<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bwael&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bwael.com/"/>
  <updated>2017-09-23T00:49:45.539Z</updated>
  <id>http://bwael.com/</id>
  
  <author>
    <name>bwael</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于flask的microBlog开发笔记（五）</title>
    <link href="http://bwael.com/2017/02/13/microblog-develop-documentation-05/"/>
    <id>http://bwael.com/2017/02/13/microblog-develop-documentation-05/</id>
    <published>2017-02-13T03:51:46.000Z</published>
    <updated>2017-09-23T00:49:45.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-用户首页和发布博客"><a href="#5-用户首页和发布博客" class="headerlink" title="5.用户首页和发布博客"></a>5.用户首页和发布博客</h2><p>我们已经完成了登录系统，则可以使用昵称和邮件登录，接下来要完成用户个人界面信息，在此之前先将数据库清空:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; users = User.query.all()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">...     db.session.delete(u)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; posts = Post.query.all()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> p <span class="keyword">in</span> posts:</span><br><span class="line">...     db.session.delete(p)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></p><p>我们将创建用户信息页，显示用户信息以及最近的 blog。作为其中一部分，我们将会学习到显示用户头像。接着，我们将要用户 web 表单用来编辑用户信。</p><h3 id="1-用户信息首页"><a href="#1-用户信息首页" class="headerlink" title="1.用户信息首页"></a>1.用户信息首页</h3><p>创建一个用户信息不需要引入新的概念,只要创建一个新的视图函数以及与它配套的 HTML 模版。添加用户信息类，并定义用户信息字段修改（forms.py）文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AboutMeForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    describe = TextAreaField(<span class="string">'about me'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">140</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'YES!'</span>)</span><br></pre></td></tr></table></figure></p><p>添加用户新信息的视图函数(app/views.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm,  SignUpForm, AboutMeForm</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    form = AboutMeForm()</span><br><span class="line">    user = User.query.filter(User.id == user_id).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        flash(<span class="string">"The user is not exist."</span>)</span><br><span class="line">        redirect(<span class="string">"/index"</span>)</span><br><span class="line">    blogs = user.posts.all()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"user.html"</span>,</span><br><span class="line">        form=form,</span><br><span class="line">        user=user,</span><br><span class="line">        blogs=blogs)</span><br></pre></td></tr></table></figure></p><p>用于这个视图函数的装饰器与之前的有些不同，在这个例子中，我们有一个参数在里面，用 &lt;int: user_id&gt; 来表示。这将转化为一个同名的参数添加到视图函数。比如当客户端以URL /user/1 请求的时候，视图函数将收到一个 user_id = 1 参数从而而被调用。<br>视图函数的实现没有让人惊喜的。首先，我们使用接收到参数 user_id 试着从数据库载入用户。如果没有找到用户的话，我们将会抛出错误信息，重定向到主页，我们还添加了@login_required装饰器，如果没有登陆的用户，向通过URL直接访问该页面，那么我们会直接在页面上报错，阻止其访问。若找到用户，将其传入到 render_template 调用，并且传入user.posts.all()找出的该用户的blogs；若如果没有找到用户，模板会显示小小的提示The user is not exist！，并跳转到主页。</p><p>用户信息页,创建文件app/templates/user.html<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;p&gt;Name: &#123;&#123; user.nickname &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Email: &#123;&#123; user.email &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> blogs | length %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> blog <span class="keyword">in</span> blogs %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; blog.body &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p style="color:blue;"&gt;the guy is so lazy.....&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>用户信息页现在已经完成了，但是缺少对它的链接。为了让用户很容易地检查他的或者她的信息，我们直接把用户信息页的链接放在导航栏中修改文件( app/templates/base.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog:</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('index') &#125;&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% if not current_user.is_authenticated() %&#125;</span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('sign_up') &#125;&#125;"</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('logout') &#125;&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-发布博客"><a href="#2-发布博客" class="headerlink" title="2.发布博客"></a>2.发布博客</h3><p>首先在forms.py文件中添加博客内容的字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishBlogForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    body = TextAreaField(<span class="string">'blog content'</span>, validators=[Required()])</span><br><span class="line">    submit = SubmitField(<span class="string">'Submit'</span>)</span><br></pre></td></tr></table></figure></p><p>而且要在app/views.py中加入如下函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> strip</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm,  SignUpForm, AboutMeForm, PublishBlogForm</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/publish/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    form = PublishBlogForm()</span><br><span class="line">    posts = Post()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        blog_body = request.form.get(<span class="string">"body"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(strip(blog_body)):</span><br><span class="line">            flash(<span class="string">"The content is necessray!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line">        posts.body = blog_body</span><br><span class="line">        posts.timestamp = datetime.datetime.now()</span><br><span class="line">        posts.user_id = user_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.add(posts)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flash(<span class="string">"Database error!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line"></span><br><span class="line">        flash(<span class="string">"Publish Successful!"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"publish.html"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure></p><p>接收当前用户的user_id用于填充Post表的user_id字段，以便在用户主页显示该用户所属的blogs。为了防止blog内容为空，除了在forms.py里添加validator的限制外，我们还要在后台再一次对输入数据的验证，strip(blog_body)就是为了防止用户只输入空格的情况，它会将字符串两边的空格去掉，如果内容仅仅为空格的话，那么长度肯定是为0的，一旦这种事情发生了，就立即报错，并刷新当前页面。</p><p>将数据库的对应的字段赋值完毕之后，使用db.session.add(posts)，db.session.commint()将值写入数据库中，因为操作数据库的时候可能会出现一些意想不到的问题，所以我们应该用try….except….来处理这些问题，提高适用性(app/publish.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for("</span><span class="attr">publish</span>", <span class="attr">user_id</span>=<span class="string">current_user.id)</span> &#125;&#125;" <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">name</span>=<span class="string">"publish"</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-子模版"><a href="#3-子模版" class="headerlink" title="3.子模版"></a>3.子模版</h3><p>已经实现了用户信息页，它能够显示用户的 blog。首页也应该显示任何一个用户这个时候的 blog 。这样就需要有两个页需要显示用户的 blog，即要制作一个渲染 blog 的子模板，我们在使用它的模板中包含这个子模板(/app/templates/post.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;post.author.avatar(50)&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;post.author.nickname&#125;&#125; says:<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着我们使用include命令在我们的用户模板中调用这个子模板(app/templates/user.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User: &#123;&#123; user.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User: &#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">    &#123;% include 'post.html' %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %</span><br></pre></td></tr></table></figure></p><h3 id="4-用户自我介绍"><a href="#4-用户自我介绍" class="headerlink" title="4.用户自我介绍"></a>4.用户自我介绍</h3><p>用户自我说明可以显示在用户信息页上，因此用户会写一些自我介绍，并将它们显示在用户资料页上。也可以追踪每个用户访问页面的最后一次的时间，将把它显示在用户信息页上。为了增加这些，就必须开始修改数据库。更具体地说，就是必须在User 类上增加两个字段(app/models.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">15</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">128</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default=ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>, lazy=<span class="string">'dynamic'</span>)</span><br><span class="line">    about_me = db.Column(db.String(<span class="number">140</span>))</span><br><span class="line">    last_seen = db.Column(db.DateTime)</span><br></pre></td></tr></table></figure></p><p>前面已经写过数据库的迁移,因此为了增加这两个新字段到数据库，需要运行升级脚本，若没有迁移的支持，也可以手动地编辑数据库，最差的方式就是删除表再重新创建。接着，修改用户信息页模板来展示这些字段(app/templates/user.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;&#123; user.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: &#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if user.about_me %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"about_me()"</span>&gt;</span>about me: &#123;&#123; user.about_me &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#4499EE;"</span> <span class="attr">onclick</span>=<span class="string">"about_me()"</span>&gt;</span>about me: I'm a person. ---- this info from the system.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aboutMe"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for('about_me', user_id=current_user.id) &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.describe &#125;&#125;</span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#4c4c4c;"</span>&gt;</span>last log: &#123;&#123; user.last_seen.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('publish', user_id=user.id) &#125;&#125;"</span>&gt;</span>Want to publish blogs?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">&#123;% if blogs | length %&#125;</span><br><span class="line">    &#123;% for blog in blogs %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; blog.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue;"</span>&gt;</span>the guy is so lazy.....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function about_me() &#123;</span></span><br><span class="line"><span class="undefined">    target = document.getElementById("aboutMe");</span></span><br><span class="line"><span class="undefined">    if (target.style.display == "block") &#123;</span></span><br><span class="line"><span class="undefined">        target.style.display = "none";</span></span><br><span class="line"><span class="undefined">    &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        target.style.display = "block";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>在user.html中多出了一段js代码，这段js代码作用是点击about me的时候，弹出一个编辑框以便我们修改自己的个人描述，当然要在base.html中添加一个block：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% if title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog:</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('index') &#125;&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% if not current_user.is_authenticated() %&#125;</span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('sign_up') &#125;&#125;"</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('logout') &#125;&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">    &#123;% if messages %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for message in messages %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% block js %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后，当要输入新的个人信息时，击yes后，能将够刷新当前页面并且显示新的个人描述，则修改views.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/user/about-me/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_me</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    user = User.query.filter(User.id == user_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        content = request.form.get(<span class="string">"describe"</span>)</span><br><span class="line">        <span class="keyword">if</span> len(content) <span class="keyword">and</span> len(content) &lt;= <span class="number">140</span>:</span><br><span class="line">            user.about_me = content</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=user_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"Sorry, May be your data have some error."</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=user_id))</span><br></pre></td></tr></table></figure></p><p>这里和原来写的不太一样，原来的表单提交都是在当前页面进行处理的，当点击yes后，会通过post的方式将数据发送到/user/about-me/2页面上去处理，所以使用request.method == “POST”进行判定之后，获取表单数据，当然也要判断content的长度，并进行相应的处理，最后跳转回用户主页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;5-用户首页和发布博客&quot;&gt;&lt;a href=&quot;#5-用户首页和发布博客&quot; class=&quot;headerlink&quot; title=&quot;5.用户首页和发布博客&quot;&gt;&lt;/a&gt;5.用户首页和发布博客&lt;/h2&gt;&lt;p&gt;我们已经完成了登录系统，则可以使用昵称和邮件登录，接下来要完成用户个
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（四）</title>
    <link href="http://bwael.com/2017/02/11/microblog-develop-documentation-04/"/>
    <id>http://bwael.com/2017/02/11/microblog-develop-documentation-04/</id>
    <published>2017-02-11T12:37:46.000Z</published>
    <updated>2017-09-23T00:46:51.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-用户登录"><a href="#4-用户登录" class="headerlink" title="4.用户登录"></a>4.用户登录</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p> 对于登录系统，使用到扩展：Flask-Login。配置情况如下(app/<strong>init</strong>.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask.ext.login <span class="keyword">import</span> LoginManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flask-Login</span></span><br><span class="line">lm = LoginManager()</span><br><span class="line">lm.setup_app(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views, models</span><br></pre></td></tr></table></figure></p><h3 id="2-重构用户模型"><a href="#2-重构用户模型" class="headerlink" title="2.重构用户模型"></a>2.重构用户模型</h3><p>Flask-Login 扩展需要在我们的 User 类中实现一些特定的方法，但是类如何去实现这些方法却没有什么要求，让我们为 Flask-Login 实现的 User 类(app/models.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">15</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">128</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default=ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>, lazy=<span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_authenticated</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_active</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_anonymous</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> unicode(self.id)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(cls, user_name)</span>:</span></span><br><span class="line">        user = cls.query.filter(db.or_(</span><br><span class="line">            User.nickname == user_name, User.email == user_name)).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br></pre></td></tr></table></figure></p><p>is_authenticated 方法有一个具有迷惑性的名称。一般而言，这个方法应该只返回 True，除非表示用户的对象因为某些原因不允许被认证；is_active 方法应该返回 True，除非是用户是无效的，比如因为他们的账号被禁止；is_anonymous 方法应该返回 True，除非是伪造的用户不允许登录系统；get_id 方法应该返回一个用户唯一的标识符，以 unicode 格式返回我们使用数据库生成的唯一的id。</p><h3 id="3-user-loader-回调"><a href="#3-user-loader-回调" class="headerlink" title="3.user_loader 回调"></a>3.user_loader 回调</h3><p>我们已经准备好用 Flask-Login 扩展来开始实现登录系统。<br>首先，我们必须编写一个函数用于从数据库加载用户，这个函数将会被 Flask-Login 使用(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lm.user_loader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</span><br></pre></td></tr></table></figure><p>Flask-Login 中的用户的id永远是 unicode 字符串，因此在我们把id 发送给 Flask-SQLAlchemy 之前，需要把id转成整型是必须的，否则会报错。</p><h3 id="4-登陆视图函数-app-views-py"><a href="#4-登陆视图函数-app-views-py" class="headerlink" title="4.登陆视图函数(app/views.py)"></a>4.登陆视图函数(app/views.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect, session, url_for, request, g </span><br><span class="line"><span class="keyword">from</span> flask.ext.login <span class="keyword">import</span> login_user, logout_user, current_user, login_required </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User, Post, ROLE_USER, ROLE_ADMIN</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app, db, lm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@lm.user_loader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</span><br><span class="line"></span><br><span class="line"><span class="meta">... </span><span class="comment"># 这里省略的是我们的index函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证用户是否被验证</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated():</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'index'</span>)</span><br><span class="line">    <span class="comment"># 注册验证</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user = User.login_check(request.form.get(<span class="string">'user_name'</span>))</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            login_user(user)</span><br><span class="line">            user.last_seen = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"The Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">'Your name: '</span> + request.form.get(<span class="string">'user_name'</span>))</span><br><span class="line">            flash(<span class="string">'remember me? '</span> + str(request.form.get(<span class="string">'remember_me'</span>)))</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=current_user.id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">'Login failed, Your name is not exist!'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"login.html"</span>,</span><br><span class="line">        title=<span class="string">"Sign In"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure><p>整个流程就是，验证用户，验证用户是否已经注册，如果注册则从数据库中加载用户并转到用户页面。如果要让这些都起作用的话，Flask-Login 需要知道哪个视图允许用户登录。我们在应用程序模块初始化中配置(app/init.py)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lm = LoginManager()</span><br><span class="line">lm.setup_app(app)</span><br></pre></td></tr></table></figure></p><h3 id="5-首页视图"><a href="#5-首页视图" class="headerlink" title="5.首页视图"></a>5.首页视图</h3><p>前面我们的 index 视图函数使用了伪造的对象，因为那时候我们并没有用户或者 blog。现在我们有用户了，让我们使用它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    user = <span class="string">'Man'</span></span><br><span class="line">    posts = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'nickname'</span>: <span class="string">'John'</span>&#125;,</span><br><span class="line"></span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'Beautiful day in Portland!'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'nickname'</span>: <span class="string">'Susan'</span>&#125;,</span><br><span class="line"></span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'The Avengers movie was so cool!'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"index.html"</span>,</span><br><span class="line">        title=<span class="string">"Home"</span>,</span><br><span class="line">        user=user,</span><br><span class="line">        posts=posts)</span><br></pre></td></tr></table></figure></p><h3 id="6-登录"><a href="#6-登录" class="headerlink" title="6.登录"></a>6.登录</h3><p>我们已经实现了登录，现在增加登陆的功能，即对登录视图函数进行修改（app/views.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>其中login_required是为了验证用户必须是登陆的前提，才会有登出。</p><h3 id="7-注册"><a href="#7-注册" class="headerlink" title="7.注册"></a>7.注册</h3><ul><li>再注册前，我们需要修改app/forms.py文件以绑定数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TextField, BooleanField, SubmitField, TextAreaField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Required, Email, Length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    user_name = TextField(<span class="string">'user name'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">15</span>)])</span><br><span class="line">    remember_me = BooleanField(<span class="string">'remember me'</span>, default=<span class="keyword">False</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">'Log in'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignUpForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    user_name = TextField(<span class="string">'user name'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">15</span>)])</span><br><span class="line">    user_email = TextField(<span class="string">'user email'</span>, validators=[</span><br><span class="line">        Email(), Required(), Length(max=<span class="number">128</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'Sign up'</span>)</span><br></pre></td></tr></table></figure><p>在这里添加了类SignUpForm，用户的用户名和邮件的注册提交</p><ul><li>接着，实现用户注册视图(app/views.py)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm， SignUpForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/sign-up', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_up</span><span class="params">()</span>:</span></span><br><span class="line">    form = SignUpForm()</span><br><span class="line">    user = User()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">        user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line"></span><br><span class="line">        register_check = User.query.filter(db.or_(</span><br><span class="line">            User.nickname == user_name, User.email == user_email)).first()</span><br><span class="line">        <span class="keyword">if</span> register_check:</span><br><span class="line">            flash(<span class="string">"error: The user's name or email already exists!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/sign-up'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(user_name) <span class="keyword">and</span> len(user_email):</span><br><span class="line">            user.nickname = user_name</span><br><span class="line">            user.email = user_email</span><br><span class="line">            user.role = ROLE_USER</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"The Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/sign-up'</span>)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">"Sign up successful!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"sign_up.html"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure></li></ul><p>在提交注册信息的时候验证数据库中是否已经注册该用户信息，如果没有注册则在数据库中提交该信息，并显示注册成功，转到首页。</p><ul><li><p>在修改主页index.html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated() %&#125;</span><br><span class="line">&lt;h1&gt;Hi, Guys!&lt;/h1&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">&lt;h1&gt;Welcome back, &#123;&#123; current_user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改登录模版（login.html）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign Up&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"/login"</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">   &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">   &lt;p&gt;Please enter your name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_name %&#125;</span><br><span class="line">   &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">   &lt;p&gt;记住我？ &#123;&#123; form.remember_me &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>当现在如果运行程序的话，肯定会说用户名不存在，因为还需要建立一个注册模版（sign_up.html）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/sign-up"</span>, method=<span class="string">"POST"</span> name=<span class="string">"sign_up"</span>&gt;</span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    &lt;p&gt;Nick name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_name %&#125;</span><br><span class="line">    &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;E-mail: &#123;&#123; form.user_email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_email %&#125;</span><br><span class="line">    &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>但是还没有在模版中添加登出和注册的链接。将要把这个链接放在基础层中的导航栏里(app/templates/base.html)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123;title&#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;Microblog: </span><br><span class="line">        &lt;a href="&#123;&#123; url_for('index') &#125;&#125;"&gt;Home&lt;/a&gt;</span><br><span class="line">        &#123;% <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated() %&#125;</span><br><span class="line">        | &lt;a href="&#123;&#123; url_for('login') &#125;&#125;"&gt;Log in&lt;/a&gt;</span><br><span class="line">        or &lt;a href="&#123;&#123; url_for('sign_up') &#125;&#125;"&gt;Sign up&lt;/a&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        | &lt;a href="&#123;&#123; url_for('logout') &#125;&#125;"&gt;Logout&lt;/a&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &#123;% <span class="keyword">with</span> messages = get_flashed_messages() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> messages %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> message <span class="keyword">in</span> messages %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% block js %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;4-用户登录&quot;&gt;&lt;a href=&quot;#4-用户登录&quot; class=&quot;headerlink&quot; title=&quot;4.用户登录&quot;&gt;&lt;/a&gt;4.用户登录&lt;/h2&gt;&lt;h3 id=&quot;1-配置&quot;&gt;&lt;a href=&quot;#1-配置&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（三）</title>
    <link href="http://bwael.com/2017/02/11/microblog-develop-documentation-03/"/>
    <id>http://bwael.com/2017/02/11/microblog-develop-documentation-03/</id>
    <published>2017-02-11T08:21:46.000Z</published>
    <updated>2017-09-23T00:45:51.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h2><p>###1.flask中的数据库</p><ul><li><p>数据库迁移，使用 SQLAlchemy-migrate 来跟踪数据库的更新。这只是在开始建立数据库的时候比较花费工作时间，以后就再不用人工进行数据的迁移了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> flask/bin/activate</span><br><span class="line">$ pip install SQLAlchemy-migrate</span><br></pre></td></tr></table></figure></li><li><p>数据库配置，针对我们小型的应用，我们将采用 sqlite 数据库，sqlite 数据库是小型应用的最方便的选择，每一个数据库都是存储在单个文件里，这里对config.py进行再次配置。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">sqlalchemy_database_url = <span class="string">'sqlite:///'</span> + os.path.join(basedir, <span class="string">'app.db'</span>)</span><br><span class="line">sqlalchemy_migrate_repo = os.path.join(basedir, <span class="string">'db_repository'</span>)</span><br></pre></td></tr></table></figure><p>  sqlalchemy_database_url是 Flask-aqlalchemy 扩展需要的，存储我们数据库文件的路径,sqlalchemy_migrate_repo 是文件夹,存储数据库文件。对<strong>init</strong>.py文件更新。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views, models</span><br></pre></td></tr></table></figure><pre><code>创建了一个 db 对象，这是我们的数据库，接着导入一个新的模块，叫做 models。</code></pre></li><li><p>数据库模型(app/models.py)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">ROLE_USER = <span class="number">0</span></span><br><span class="line">ROLE_ADMIN = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">nickname = db.Column(db.String(<span class="number">64</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</span><br><span class="line">email = db.Column(db.String(<span class="number">120</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</span><br><span class="line">role = db.Column(db.SmallInteger, default = ROLE_USER)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br></pre></td></tr></table></figure><p>  创建的 User 类包含一些字段，这些字段被定义成类的变量,repr 方法告诉 Python 如何打印这个类的对象。</p></li><li><p>创建数据库，创建数据库脚本文件(db_create.py)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"><span class="comment"># 当数据库不存在的时候创建新的数据库</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(SQLALCHEMY_MIGRATE_REPO):</span><br><span class="line">    api.create(SQLALCHEMY_MIGRATE_REPO, <span class="string">'database repository'</span>)</span><br><span class="line">    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="comment"># 否则直接更新</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, api.version(SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure><p>  运行这个脚本文件，python db_create.py，运行完后在app下会发现新的app.db文件，这是一个空的sqlite数据库，创建后就支持迁移，还有一个db_repository文件，这是SQLAlchemy-migrate 存储它的数据文件的地方。</p></li></ul><p>###2.第一次迁移</p><p>这是我们第一次迁移，我们将从一个空数据库迁移到一个能存储用户的数据库上，用db_migrate.py实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">migration = SQLALCHEMY_MIGRATE_REPO + <span class="string">'/versions/%03d_migration.py'</span> % (api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tmp_module = imp.new_module(<span class="string">'old_model'</span>)</span><br><span class="line">old_model = api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">exec</span> old_model <span class="keyword">in</span> tmp_module.__dict__</span><br><span class="line"><span class="comment"># 将数据库与更新后的模型结构之间的不同内容存入到迁移脚本中</span></span><br><span class="line">script = api.make_update_script_for_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, tmp_module.meta, db.metadata)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将迁移脚本写入迁移仓库中</span></span><br><span class="line">open(migration, <span class="string">"wt"</span>).write(script)</span><br><span class="line">api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'New migration saved as '</span> + migration</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure></p><p>SQLAlchemy-migrate 迁移的方式就是比较数据库(app.db)与我们模型的结构(app/models.py),两者间的不同将会被记录成一个迁移脚本存放在迁移仓库中。</p><ul><li>数据库的升级db_upgrade.py和回退db_downgrade.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line">api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure><p>如果有数据库迁移的支持，当你准备发布新版的时候，你只需要录制一个新的迁移，拷贝迁移脚本到生产服务器上接着运行脚本，所有事情就完成了，数据库升级也只需要一点 Python 脚本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line">v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line">api.downgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, v - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure></p><p>这个脚本会回退数据库一个版本，可以运行多次来回退多个版本。</p><ul><li>数据库关系</li></ul><p>连接用户和他们写的 blog。方式就是通过在 posts 增加一个字段，这个字段包含了编写 blog 的用户的 id。这个 id 称为一个外键，users 表中的 id 与 posts 表中的 user_id，这种关系称为一对多，一个用户编写多篇 blog。<br>对模板进行修改，(app/models.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">ROLE_USER = <span class="number">0</span></span><br><span class="line">ROLE_ADMIN = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">64</span>), unique = <span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique = <span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default = ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref = <span class="string">'author'</span>, lazy = <span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">    body = db.Column(db.String(<span class="number">140</span>))</span><br><span class="line">    timestamp = db.Column(db.DateTime)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Post %r&gt;'</span> % (self.body)</span><br></pre></td></tr></table></figure></p><p>添加了一个 Post 类，这是用来表示用户编写的 blog。在 Post 类中的 user_id 字段初始化成外键，因此让 Flask-SQLAlchemy 知道这个字段是连接到用户上。</p><p>###3.数据库操作</p><ul><li>首先创建一个新用户名为john<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line"><span class="comment"># 进入交互式界面</span></span><br><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; from app.models import User, Post, ROLE_USER, ROLE_ADMIN</span><br><span class="line">&gt;&gt;&gt; u1 = User(nickname=<span class="string">'john'</span>, email=<span class="string">'john@email.com'</span>, role=ROLE_USER)</span><br><span class="line">&gt;&gt;&gt; db.session.add(u1)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><p>在会话的上下文中完成对数据库的更改。多个的更改可以在一个会话中累积，当所有的更改已经提交，你可以发出一个db.session.commit()，这能原子地写入更改。如果在会话中出现错误的时候， db.session.rollback() 可以使得数据库回到会话开始的状态；若没有 commit 也没有 rollback 发生，系统默认情况下会回滚会话。会话保证数据库将永远保持一致的状态。</p><ul><li><p>添加另一个用户susan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u2 = User(nickname=<span class="string">'susan'</span>, email=<span class="string">'susan@email.com'</span>, role=ROLE_USER)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(u2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br></pre></td></tr></table></figure></li><li><p>查询用户</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>users = User.query.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> users [&lt;User <span class="string">u'john'</span>&gt;, &lt;User <span class="string">u'susan'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">    ...     <span class="keyword">print</span> u.id,u.nickname</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">1</span> john</span><br><span class="line">    <span class="number">2</span> susan</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>提交一篇 blog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Post(body=<span class="string">'my first post!'</span>, timestamp=datetime.datetime.utcnow(), author=u)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(p)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><p>设置我们的 timestamp 为UTC 时区，所有存储在数据库的时间戳都会是 UTC，世界上不同地方的用户因此需要有个统一的时间单位。</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u</span><br><span class="line">    &lt;User <span class="string">u'john'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts = u.posts.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> posts</span><br><span class="line">    [&lt;Post <span class="string">u'my first post!'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得john的个人信息和所有博客内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> posts:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> p.id,p.author.nickname,p.body</span><br><span class="line">...</span><br><span class="line">  <span class="number">1</span> john my first post!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u</span><br><span class="line">  &lt;User <span class="string">u'susan'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u.posts.all()</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-数据库&quot;&gt;&lt;a href=&quot;#3-数据库&quot; class=&quot;headerlink&quot; title=&quot;3.数据库&quot;&gt;&lt;/a&gt;3.数据库&lt;/h2&gt;&lt;p&gt;###1.flask中的数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据库迁移，使用 SQLAlchemy-migrat
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（二）</title>
    <link href="http://bwael.com/2017/02/10/microblog-develop-documentation-02/"/>
    <id>http://bwael.com/2017/02/10/microblog-develop-documentation-02/</id>
    <published>2017-02-10T11:41:46.000Z</published>
    <updated>2017-02-10T11:44:07.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-flask表单初始化"><a href="#4-flask表单初始化" class="headerlink" title="4. flask表单初始化"></a>4. flask表单初始化</h3><ul><li>表单配置<br>许多 Flask 扩展需要大量的配置，因此我们将要在 microblog/ 文件夹下创建一个配置文件以至于容易被编辑。这就是我们将要开始的(config.py)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSRF_ENABLED = <span class="keyword">True</span></span><br><span class="line">SECRET_KEY = <span class="string">'bawel'</span></span><br></pre></td></tr></table></figure><p>CSRF_ENABLED 配置是为了激活跨站点请求伪造保护,SECRET_KEY 配置仅仅当 CSRF 激活的时候才需要，它是用来建立一个加密的令牌，用于验证一个表单。当你编写自己的应用程序的时候，请务必设置一个很难被猜测到的密钥。当有了配置文件，我们需要告诉 Flask 去读取以及使用它。我们可以在 Flask 应用程序对象被创建后去做，方式如下(app/<strong>init</strong>.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">   app = Flask(__name__)</span><br><span class="line">   app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">from</span> app <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure></p><ul><li>用户登录表单</li></ul><p>创建一个登录表单，用于用户认证系统。在我们应用程序中支持的登录机制是标准的用户名/密码类型 我们同时在表单上提供一个remember me的选择框，以至于用户可以选择在他们的网页浏览器上种植 cookie ，当他们再次访问的时候，浏览器能够记住他们的登录，编写第一个表单(app/forms.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TextField, BooleanField, PasswordField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Required</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = TextField(<span class="string">'Name'</span>, validators=[Required()])</span><br><span class="line">    password = PasswordField(<span class="string">'password'</span>, validators=[Required()])</span><br><span class="line">    remember_me = BooleanField(<span class="string">'Remember_me'</span>, default=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p>我们导入 Form 类，接着导入两个我们需要的字段类，TextField 和 BooleanField。Required 是一个验证器，一个函数，它能够作用于一个域，用于对用户提交的数据进行验证。 Required 验证器只是简单地检查相应域提交的数据是否是空。</p><ul><li>表单模板，我们刚刚创建的 LoginForm 类知道如何呈现为 HTML 表单字段，所以我们只需要集中精力在布局上。这里就是我们登录的模板(app/templates/login.html)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- extend from base layout --&gt;</span><br><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign In&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">    &#123;&#123;form.hidden_tag()&#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Please enter your Name:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.name(size=<span class="number">80</span>)&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Password:&lt;br&gt;</span><br><span class="line">        &#123;&#123; form.password &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me?&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>base.html 模板通过 extends 模板继承声明语句,form.hidden_tag() 模板参数将被替换为一个隐藏字段，用来是实现在配置中激活的 CSRF 保护。如果已经激活了 CSRF，这个字段需要出现在所有的表单中。</p><ul><li><p>表单视图，(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect</span><br><span class="line">    <span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm</span><br><span class="line">    <span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">    <span class="comment"># 这里省略了索引函数</span></span><br><span class="line"><span class="meta">    @app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">        form = LoginForm()</span><br></pre></td></tr></table></figure><p>我们已经导入 LoginForm 类，从这个类实例化一个对象，接着把它传入到模板中。这就是我们渲染表单所有要做的。</p></li></ul><h3 id="5-表单数据"><a href="#5-表单数据" class="headerlink" title="5. 表单数据"></a>5. 表单数据</h3><ul><li>接收表单数据，flask-wtf处理提交的数据，登录视图函数更新的版本，它验证并且存储表单数据 (app/views.py)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        flash(<span class="string">'Login requested for Name: '</span> + form.name.data)</span><br><span class="line">        flash(<span class="string">'passwd: '</span> + str(form.password.data))</span><br><span class="line">        flash(<span class="string">'remember_me: '</span> + str(form.remember_me.data))</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, </span><br><span class="line">    title = <span class="string">'Sign In'</span>,</span><br><span class="line">    form = form)</span><br></pre></td></tr></table></figure><p>当validate_on_submit 在表单提交请求中被调用，它将会收集所有的数据，对字段进行验证，如果所有的事情都通过的话，它将会返回 True，表示数据都是合法的。若有一个没通过验证，则返回false，接着表单会重新呈现给用户，这也将给用户一次机会去修改错误。当 validate_on_submit 返回 True，登录视图函数调用了两个新的函数，flash函数是一种快速的方式下呈现给用户的页面上显示一个消息。<br>*加强字段验证，当字段验证失败的时候， Flask-WTF 会向表单对象中添加描述性的错误信息。这些信息是可以在模板中使用的，因此我们只需要增加一些逻辑来获取它，这就是我们含有字段验证信息的登录模板(app/templates/login.html)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- extend base layout --&gt;</span><br><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign In&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">    &#123;&#123;form.hidden_tag()&#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Please enter your OpenID:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.name(size=<span class="number">80</span>)&#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.name %&#125;</span><br><span class="line">        &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt;</span><br><span class="line">        &#123;% endfor %&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Password:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.pawword&#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.password %&#125;</span><br><span class="line">        &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt;</span><br><span class="line">        &#123;% endfor %&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;4-flask表单初始化&quot;&gt;&lt;a href=&quot;#4-flask表单初始化&quot; class=&quot;headerlink&quot; title=&quot;4. flask表单初始化&quot;&gt;&lt;/a&gt;4. flask表单初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;表单配置&lt;br&gt;许多 Flask 扩展需要大
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（一）</title>
    <link href="http://bwael.com/2017/01/09/microblog-develop-documentation-01/"/>
    <id>http://bwael.com/2017/01/09/microblog-develop-documentation-01/</id>
    <published>2017-01-09T14:11:26.000Z</published>
    <updated>2017-02-09T14:20:13.318Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址： <a href="https://coding.net/u/bwael/p/micblog/git" target="_blank" rel="noopener">https://coding.net/u/bwael/p/micblog/git</a></p><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><ul><li>在linux系统开发</li><li>开发语言python,使用框架flask</li><li>使用Mysql数据库,初期使用sqlite方便开发</li></ul><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><p>###1. flask的安装</p><ul><li><p>创建一个全新的实验环境，则安装python虚拟软件管理包virtualenv来创建python的<br>独立环境,先更新软件包,在安装pip和虚拟环境virtualenv：</p><p>  <code>$ sudo pacman -Syy</code></p><p>  <code>$ sudo pacman -S python-pip python-virtualenv</code></p></li><li><p>创建虚拟环境,先创建一个虚拟环境flask，在激活环境，</p><p>  <code>$ virtualenv flask</code></p><p>  <code>$ cd flask</code></p><p>  <code>$ source bin/activate</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install flask flask-login flask-openid flask-mail splalchemy </span><br><span class="line">flask-sqlalchemy sqlalchemy-migrate flask-whooshalchemy flask-wtf pytz </span><br><span class="line">flask-babel flup</span><br></pre></td></tr></table></figure><p>###2. 体验flask</p><ul><li>在home/bwael目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p micblog/app</span><br><span class="line">$ mkdir -p micblog/app/static</span><br><span class="line">$ mkdir -p micblog/app/templates</span><br></pre></td></tr></table></figure><p>tips:我们的应用程序包是放置在app文件夹中，子文件夹<br>static用来放置静态文件，子文件夹templates是存放模板文<br>件类的html文件。</p><ul><li><p>接下来进入到app文件夹中，并创建<em>init</em>.py和views.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> micblog/app</span><br><span class="line">$ touch __init__.py</span><br><span class="line">$ touch views.py</span><br></pre></td></tr></table></figure></li><li><p>对app包通过命令vi_init_.py进行简单的初始化，在<em>init</em>.py中写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure></li></ul><p>上面的代码简单的创建应用对象，接着从app中导入视图模块views文件内容，视图是响应来自网页浏览器的请求的处理器，在flask中视图以python函数形式表示。</p><ul><li>编写视图函数(app/views.py)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Hello!!"</span></span><br></pre></td></tr></table></figure></li></ul><p>完整的web应用程序最后一步建一个脚本rnu.py，用于启动应用程序的开发web服务器，将其置于micblog目录下。</p><ul><li>micblog/run.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">app.run(debug = <span class="keyword">True</span>,port=<span class="number">8888</span>)</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>  启动运行后在客户端的浏览器中输入<a href="http://127.0.0.1:8888,在网页中会显示hello!字符串。" target="_blank" rel="noopener">http://127.0.0.1:8888,在网页中会显示hello!字符串。</a></p><p>###3. flask模板</p><ul><li><p>模板中的控制语句，在模板中添加一个if声明(app/templates/index.html)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">     &lt;head&gt;</span><br><span class="line">       &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">       &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">       &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">       &lt;title&gt;Welcome to microblog&lt;/title&gt;</span><br><span class="line">       &#123;% endif %&#125;</span><br><span class="line">     &lt;/head&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;Hello, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">     &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>模板中的循环语句，在microblog应用程序中，登陆的用户在首页想要展示自己或者联系人列表中用户最近的文章，我们首先创建一些用户以及他们的文章来展示(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">   user = &#123; <span class="string">'nickname'</span>: <span class="string">'Miguel'</span> &#125; <span class="comment"># 用户名</span></span><br><span class="line">   posts = [ <span class="comment"># 提交内容</span></span><br><span class="line">       &#123; </span><br><span class="line">           <span class="string">'author'</span>: &#123; <span class="string">'nickname'</span>: <span class="string">'John'</span> &#125;, </span><br><span class="line">           <span class="string">'body'</span>: <span class="string">'Beautiful day in Portland!'</span> </span><br><span class="line">       &#125;,</span><br><span class="line">       &#123; </span><br><span class="line">           <span class="string">'author'</span>: &#123; <span class="string">'nickname'</span>: <span class="string">'Susan'</span> &#125;, </span><br><span class="line">           <span class="string">'body'</span>: <span class="string">'The Avengers movie was so cool!'</span> </span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,</span><br><span class="line">                          title = <span class="string">'Home'</span>,</span><br><span class="line">                          user = user,</span><br><span class="line">                          posts = posts)</span><br></pre></td></tr></table></figure><p>在模板中，列表中可能有许多元素，有多少篇文章被展示取决于视图函数，模板不会假设有多少文章，所以必须准备渲染视图传送的文章数量，使用for来做到这一点(app/templates/index.html)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">     &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">     &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">     &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">     &#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">     &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">     &#123;% endfor %&#125;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在模板继承中，允许我们把所有模板公共的部分移除出页面的布局，接着把它们放在一个基础模板中，所有使用它的模板可以导入该基础模板。定义一个基础模板，该模板包含导航栏以及标题(app/templates/base.html)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;Microblog: &lt;a href="/index"&gt;Home&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在这个模板中使用block控制语句来定义派生模板可以插入的地方，块被赋予唯一的名字。接着就是修改index.html模板继承自base.html(app/templates/index.html)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">&lt;div&gt;&lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址： &lt;a href=&quot;https://coding.net/u/bwael/p/micblog/git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://coding.net/u/bwael/p/micblog/git&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记01</title>
    <link href="http://bwael.com/2016/09/03/C-Network-1/"/>
    <id>http://bwael.com/2016/09/03/C-Network-1/</id>
    <published>2016-09-03T02:46:01.000Z</published>
    <updated>2016-09-03T04:26:42.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>计算机网络是通过通信设施将地理上分散的具有自治功能的多个计算机系统互联起来，进行信息交换，实现资源共享、互操作和协同工作的系统。<br>简明的定义：自治的计算机的互联集合。</p><h3 id="OSI参考模型与TCP-IP参考模型"><a href="#OSI参考模型与TCP-IP参考模型" class="headerlink" title="OSI参考模型与TCP/IP参考模型"></a>OSI参考模型与TCP/IP参考模型</h3><h4 id="OSI七层网络模型"><a href="#OSI七层网络模型" class="headerlink" title="OSI七层网络模型"></a>OSI七层网络模型</h4><ol><li>应用层（Application</li><li>表示层（Presentation</li><li>会话层（Session</li><li>传输层（Transport    </li><li>网络层（Network</li><li>数据链路层（Data Link</li><li>物理层（Physical</li></ol><h4 id="TCP-IP四层概念模型"><a href="#TCP-IP四层概念模型" class="headerlink" title="TCP/IP四层概念模型"></a>TCP/IP四层概念模型</h4><ol><li>应用层（对应 应用层、表示层、会话层</li><li>传输层（对应 传输层</li><li>网络层（对应 网络层</li><li>网络接口层（对应 数据链路层、物理层</li></ol><h3 id="OSI模型描述计算机网络通信中数据传输的过程"><a href="#OSI模型描述计算机网络通信中数据传输的过程" class="headerlink" title="OSI模型描述计算机网络通信中数据传输的过程"></a>OSI模型描述计算机网络通信中数据传输的过程</h3><ol><li>封装：在发送方，数据从上到下逐层传递过程中，每层要加上适当的控制信息。</li><li>传输：到最底层，数据成为二进制比特流，再转换为电信号<strong>通过物理介质传输到接收方</strong>。</li><li>拆封：在接收方，数据从下到上，要逐层剥去发送方相应层加上的控制信息。</li></ol><h3 id="传输效率的计算"><a href="#传输效率的计算" class="headerlink" title="传输效率的计算"></a>传输效率的计算</h3><blockquote><p>长度为100字节的应用层数据交给运输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部18字节。试求数据的<strong>传输效率</strong>。<br>若应用层数据长度为1000字节，数据的传输效率是多少？</p></blockquote><p><strong>答</strong>：数据长度为100字节时<br>传输效率=100/（100+20+20+18）=63.3%</p><p>数据长度为1000字节时，<br>传输效率=1000/（1000+20+20+18）=94.5%</p><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><ul><li><p>（1）从网络结点分布范围来看，可分为局域网（Local Area Network，LAN）、广域网（Wide Area Network，WAN）和城域网（Metropolitan Area Network，MAN）。以及个人区域网（Personal Area Network，PAN）</p></li><li><p>（2）按交换方式可分为电路交换网络（Circurt Switching）、报文交换网络（Message Switching）和分组交换网络（Packet Switching）。 </p></li><li><p>（3）按网络拓扑结构可分为星型网络、树型网络、总线型网络、环型网络和网状网络（不规则型网络）。</p></li><li><p>（4）按传输介质可以分为有线网络和无线网络。</p></li></ul><h3 id="计算机网络相关性能指标"><a href="#计算机网络相关性能指标" class="headerlink" title="计算机网络相关性能指标"></a>计算机网络相关性能指标</h3><h4 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h4><p>每秒钟通过信道传输的信息量称为比特传输速率，记作rb。单位是比特/秒（b/s或bit/s），简称比特率。也可写为bps(bit per second)</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>原指某个信号具有的频带宽度。带宽也表示通信线路所能传送数据的能力。即在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。又是b/s。</p><h4 id="传播速率"><a href="#传播速率" class="headerlink" title="传播速率"></a>传播速率</h4><p>MDZZ</p><h4 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h4><p>发送数据帧所需要的时间。<br><strong>发送时延 = 数据帧长度（b）/ 发送速率（b/s）</strong></p><h4 id="发送时延-传输时延"><a href="#发送时延-传输时延" class="headerlink" title="发送时延==传输时延"></a>发送时延==传输时延</h4><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中传播一定距离需要花费的时间。<br><strong>传播时延 = 信道长度（m） / 电磁波在信道上的传输速率（m/s)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;计算机网络是通过通信设施将地理上分散的具有自治功能的多个计算机系统互联起来，进行信息交换，实现资源共享、互操作和协同工作的系统。&lt;br&gt;简明
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="http://bwael.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记08----文件操作</title>
    <link href="http://bwael.com/2016/06/04/pynote08/"/>
    <id>http://bwael.com/2016/06/04/pynote08/</id>
    <published>2016-06-04T08:18:52.000Z</published>
    <updated>2016-08-30T12:44:58.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>文本文件的读写主要通过open()所构建的文件对象来实现。</p><p><strong>基本格式</strong></p><p>f = open(文件名，模式)</p><p><strong>最常用的模式有：</strong></p><ol><li>“r”       # 只读</li><li>“w”     # 写入                                                               —-&gt;如果文件中已经有内容，会把内容抹掉，如果不存在该文件，会新建文件</li><li>“a”      #追加模式                                                       —–&gt;在已有的文字后添加文字</li><li>“b”      #二进制模式（还在其他模式中追加使用）—–&gt;一般在处理音频、图像等文件的时候使用</li><li>“+”      #读/写模式(可在其他模式中追加使用)        —–&gt;r+、w+ 可读可写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>, <span class="string">'w'</span>)       <span class="comment">#创建一个名为f的类文件对象，对test1.txt进行写操作</span></span><br><span class="line">f.write(<span class="string">"大家好，我是王尼玛"</span>)    <span class="comment">#像文件中写入字符串</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>)            <span class="comment">#如果不写模式，默认为读模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = f.readline()          <span class="comment">#一次读一行</span></span><br><span class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (line,end=<span class="string">""</span>)          <span class="comment">#不换行</span></span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家好，我是王尼玛</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"0123456789"</span>)</span><br><span class="line">f.seek(<span class="number">4</span>)                     <span class="comment">#跳到第4个字节</span></span><br><span class="line">f.write(<span class="string">"Hello"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">print(f.read())               <span class="comment">#把字符串全部输出</span></span><br><span class="line">f.seek(<span class="number">2</span>)                     <span class="comment">#跳回到第2个字符</span></span><br><span class="line">print(f.read(<span class="number">5</span>))              <span class="comment">#输出接下来的5个字节</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0123</span>Hello9</span><br><span class="line"><span class="number">23</span>Hel</span><br></pre></td></tr></table></figure><h3 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h3><p>1.<br>以上所讲的仅仅是Python最基本的文件读写功能。更加丰富的文件读写功能由Python的标准库提供。<br>2.<br>read() readline()以及readlines()用法<br>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。然而 .read() 生成文件内容最直接的字符串表示，但对于连续的面向行的处理，它却是不必要的，并且如果文件大于可用内存，则不可能实现这种处理。</p><p>.readline() 和 .readlines() 非常相似。它们都在类似于以下的结构中使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fh = open(<span class="string">'c:\\autoexec.bat'</span>)</span><br><span class="line"><span class="keyword">for</span>  line <span class="keyword">in</span>  fh.readlines():</span><br><span class="line">     <span class="keyword">print</span>（line）</span><br></pre></td></tr></table></figure></p><p>.readline() 和 .readlines() 之间的差异是后者一次读取整个文件，象 .read() 一样。.readlines() 自动将文件内容分析成一个行的列表，该列表可以由 Python 的for … in …结构进行处理。另一方面，.readline() 每次只读取一行，通常比 .readlines() 慢得多。仅当没有足够内存可以一次读取整个文件时，才应该使用 .readline()。（readlines()的输出格式[“I’ll write this message for you\n”, “hehe,that’s will be ok.\n”]）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;文本文件的读写主要通过open()所构建的文件对象来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;f = 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记07----面向对象（类与对象）</title>
    <link href="http://bwael.com/2016/06/02/pynote07/"/>
    <id>http://bwael.com/2016/06/02/pynote07/</id>
    <published>2016-06-02T11:38:22.000Z</published>
    <updated>2016-08-30T12:42:53.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。</p><p>类是对现实世界中一些事物的封装。在人类认知中，会根据属性相近把东西归类，并且给类别命名。比如说，鸟类的共同属性是有羽毛，通过产卵生育后代。而且，这些鸟还有共同的行为，如飞行、名叫。任何一只特别的鸟都在鸟类的原型基础上的。接下来以鸟为例来介绍类的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span>                                                 <span class="comment">#创建类--鸟</span></span><br><span class="line">    have_feather = <span class="keyword">True</span>                                     <span class="comment">#定义类的属性（have_feather、way_of_reproduction、song均是该类的属性）</span></span><br><span class="line">    way_of_reproduction  = <span class="string">"egg"</span></span><br><span class="line">    song=<span class="string">"叽叽喳喳"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span>                                         <span class="comment">#定义类的方法（self必不可少）</span></span><br><span class="line">        print(self.song)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"飞飞飞飞飞"</span>)</span><br><span class="line">mybird=Bird()                                               <span class="comment">#实例化类的对象，可以使用这个对象访问类中的方法和属性</span></span><br><span class="line">mybird.sing()                                               <span class="comment">#访问类中的方法（对象名.方法）</span></span><br><span class="line">print(<span class="string">"mybird通过"</span>+mybird.way_of_reproduction+<span class="string">"繁殖"</span>)       <span class="comment">#访问类中的属性（+号的作用是连接字符串）</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">叽叽喳喳</span><br><span class="line">mybird通过egg繁殖</span><br></pre></td></tr></table></figure><p>小小的总结一下，我们定义了一个类（class），就是鸟（Bird）。在该类中，我们定义了三个变量，一个是有羽毛（have_feather），一个是生殖方式（way_of_reproduction）,还有一个是叫声（叽叽喳喳），这几个变量就是类的属性（attribute）。我们还定义个两个函数，一个是鸣叫(sing(self))，另一个是移动(move(self)),这两个函数就是类的方法（method）。</p><p>类建好了之后，我将类实例化为一个叫mybird的对象，并利用这个对象对类的属性和方法进行访问。</p><h3 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h3><p>鸟可以继续细分为鸡、鸭、鹅…..这就是所谓的子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span><span class="params">(Bird)</span>:</span>                                           <span class="comment">#继承上例中的Bird</span></span><br><span class="line">    song=<span class="string">"喔喔喔喔喔！"</span>                                        <span class="comment">#重写父类中的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span>                                            <span class="comment">#重写父类中的方法</span></span><br><span class="line">        print(<span class="string">"这种移动方式已经废弃"</span>,end=<span class="string">"---&gt;"</span>)               <span class="comment">#end的作用是把字符串末尾的换行符替换为“---&gt;”</span></span><br><span class="line">        super().move()                                         <span class="comment">#调用父类中的方法(对象是没有super()的)</span></span><br><span class="line">        print(<span class="string">"跑跑跑跑跑"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myChicken=Chicken()</span><br><span class="line">myChicken.move()</span><br><span class="line">myChicken.sing()</span><br></pre></td></tr></table></figure></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self,expression)</span>:</span></span><br><span class="line">        self.value=eval(expression)                         <span class="comment">#计算字符串中的表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Talker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"结果为"</span>,self.value)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TalkCalculator</span><span class="params">(Calculator,Talker)</span>:</span>                    <span class="comment">#本类不做任何事情，但是同时继承两个子类，这种行为叫做多重继承</span></span><br><span class="line">    <span class="keyword">pass</span>                                                    <span class="comment">#pass是空语句，是为了保持程序结构的完整性。</span></span><br><span class="line"></span><br><span class="line">myCal=TalkCalculator()</span><br><span class="line">myCal.calculate(<span class="string">"4+2"</span>)</span><br><span class="line">myCal.talk()</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="1-多态、封装与继承"><a href="#1-多态、封装与继承" class="headerlink" title="1.多态、封装与继承"></a>1.多态、封装与继承</h4><p>多态：意味着可以对不同类的对象进行相同的操作。</p><p>封装：对外部世界隐藏类的细节。</p><p>继承：以普通的类为基础建立专门的类的对象。</p><h4 id="2-面向对象概念"><a href="#2-面向对象概念" class="headerlink" title="2.面向对象概念"></a>2.面向对象概念</h4><p>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p><p>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p><p>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</p><p>方法重载：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。</p><p>实例变量：定义在方法中的变量，只作用于当前实例的类。</p><p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</p><p>实例化：创建一个类的实例，类的具体对象。</p><p>方法：类中定义的函数。</p><p>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p><h4 id="3-子类如何调用父类中的方法"><a href="#3-子类如何调用父类中的方法" class="headerlink" title="3.子类如何调用父类中的方法"></a>3.子类如何调用父类中的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, arg)</span>:</span></span><br><span class="line"><span class="comment">#        A.method(self,arg)                 #1直接写类名调用</span></span><br><span class="line"><span class="comment">#        super(B, self).method(arg)         #2用 super(type, obj).method(arg)方法调用</span></span><br><span class="line">         super().method(arg)                <span class="comment">#3在类定义中调用本类的父类方法，可以直接super().method(arg)</span></span><br></pre></td></tr></table></figure><h4 id="4-方法中的self"><a href="#4-方法中的self" class="headerlink" title="4.方法中的self"></a>4.方法中的self</h4><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。这个特别的变量指对象本身，按照惯例它的名称是self。</p><h2 id="面向对象之续"><a href="#面向对象之续" class="headerlink" title="面向对象之续"></a>面向对象之续</h2><h3 id="特殊的方法"><a href="#特殊的方法" class="headerlink" title="特殊的方法"></a>特殊的方法</h3><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a><strong>init</strong>方法</h4><p><strong>init</strong>方法在类的一个对象被建立时，马上运行。你可以利用这个方法对对象进行初始化。<strong>init</strong>方法类似于C++、C#和Java中的 constructor 。（注意：init的两边各有两条下划线）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>                               <span class="comment">#在__init__中初始化name</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"大家好，我是人贱人爱的"</span>, self.name)</span><br><span class="line">p = Person(<span class="string">"王尼玛"</span>)</span><br><span class="line">p.sayHi()</span><br></pre></td></tr></table></figure></p><h4 id="del方法"><a href="#del方法" class="headerlink" title="del方法"></a><strong>del</strong>方法</h4><p><strong>del</strong>在对象消逝的时候被调用。对象消逝即对象不再被使用，它所占用的内存将返回给系统作它用。<strong>del</strong>方法与 destructor 的概念类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">'''Represents a person.'''</span>                       <span class="comment">#通过Person.__doc__查看</span></span><br><span class="line">    population = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">'''Initializes the person's data.'''</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'(Initializing %s)'</span> % self.name)      <span class="comment">#格式化输出字符串.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># When this person is created, he/she</span></span><br><span class="line">        <span class="comment"># adds to the population</span></span><br><span class="line">        Person.population += <span class="number">1</span>                       <span class="comment">#类的变量在引用的时候是 类名.类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''I am dying.'''</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'%s says bye.'</span> % self.name)</span><br><span class="line"></span><br><span class="line">        Person.population -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'I am the last one.'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'There are still %d people left.'</span> % Person.population)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span>                                 <span class="comment">#可通过Person.sayHi.__doc__查看</span></span><br><span class="line">        <span class="string">'''Greeting by the person.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Really, that's all it does.'''</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Hi, my name is %s.'</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Prints the current population.'''</span></span><br><span class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'I am the only person here.'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'We have %d persons here.'</span> % Person.population)</span><br><span class="line"></span><br><span class="line">swaroop = Person(<span class="string">'Swaroop'</span>)</span><br><span class="line">swaroop.sayHi()</span><br><span class="line">swaroop.howMany()</span><br><span class="line"></span><br><span class="line">kalam = Person(<span class="string">'Abdul Kalam'</span>)</span><br><span class="line">kalam.sayHi()</span><br><span class="line">kalam.howMany()</span><br><span class="line">print(kalam.name)                                    <span class="comment">#对象变量</span></span><br><span class="line"></span><br><span class="line">swaroop.sayHi()</span><br><span class="line">swaroop.howMany()</span><br><span class="line">print(swaroop.name)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(Initializing Swaroop)</span><br><span class="line">Hi, my name is Swaroop.</span><br><span class="line">I am the only person here.</span><br><span class="line">(Initializing Abdul Kalam)</span><br><span class="line">Hi, my name is Abdul Kalam.</span><br><span class="line">We have 2 persons here.</span><br><span class="line">Abdul Kalam</span><br><span class="line">Hi, my name is Swaroop.</span><br><span class="line">We have 2 persons here.</span><br><span class="line">Swaroop</span><br></pre></td></tr></table></figure></p><h3 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h3><p><strong>1.类成员的访问权限</strong></p><p>Python中所有的类成员都是公共的，所有的方法都是有效的。<br>只有一个例外：如果你使用的数据成员名称以双下划线前缀比如__privatevar，Python的名称管理体系会有效地把它作为私有变量。<br>还有这样就有一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。而其他的名称都将作为公共的，可以被其他类/对象使用。记住这只是一个惯例，并不是Python所要求的（与双下划线前缀不同）。</p><p><strong>2.类的变量与对象的变量</strong></p><p>类的变量：由一个类的所有对象（实例）共享使用。当某个对象对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。（ 类名.类变量）<br>对象的变量：由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不是共享的，在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。（对象名.变量）</p><p><strong>3.print的格式化输出</strong></p><p>支持参数格式化，与C语言的printf类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strHello = <span class="string">"the length of (%s) is %d"</span> %(<span class="string">'Hello World'</span>,len(<span class="string">'Hello World'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (strHello)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the length of (Hello World) <span class="keyword">is</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"你好我的名字是%s,我今年%d岁了！"</span> % (<span class="string">"王尼玛"</span>,<span class="number">2</span>))                    <span class="comment">#注意，字符串与后面变量之间没有逗号！</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好我的名字是王尼玛,我今年<span class="number">2</span>岁了！</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。&lt;/p&gt;
&lt;p&gt;类是对
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记06----模块</title>
    <link href="http://bwael.com/2016/06/01/pynote06/"/>
    <id>http://bwael.com/2016/06/01/pynote06/</id>
    <published>2016-05-31T23:58:33.000Z</published>
    <updated>2016-08-30T12:40:56.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？答案是使用模块。模块是一个包含了所有你定义的函数和变量以.py结尾的文件。</p><h3 id="定义并载入模块"><a href="#定义并载入模块" class="headerlink" title="定义并载入模块"></a>定义并载入模块</h3><p>首先来学习如何使用模块。<br>我在c:\test存放一个文件：Hello.py。存放的代码是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure></p><p>接着我们执行下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys                         <span class="comment">#import的作用是导入模块，这里我们导入了sys模块</span></span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)        <span class="comment">#这条语句的作用是告诉解释器从哪里寻找模块。   路径还可以这样写sys.path.append("c:/test")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Hello                       <span class="comment">#这时我们就可以导入自己的模块Hello(模块名为文件名)</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><p>这是可以在c:/test文件夹下看到多了一个新的文件夹<strong>pycache</strong>，在这个文件夹中出现了文件Hello.cpython-34.pyc。这个文件是与平台无关，且已经经过编译处理的。</p><h3 id="包含函数的模块"><a href="#包含函数的模块" class="headerlink" title="包含函数的模块"></a>包含函数的模块</h3><p>我在c:\test存放一个文件：sayHello.py。存放的代码是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>);</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"55555555"</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>我们执行下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)         <span class="comment">#如果被导入的模块与输入他的程序在同一个目录中，则不需要sys.path.append了</span></span><br><span class="line"><span class="keyword">import</span> sayHello</span><br><span class="line"></span><br><span class="line">sayHello.say()                      <span class="comment">#导入模块之后可以调用模块中的函数，但是需要以 模块名.函数  的格式sayHello.cry()</span></span><br></pre></td></tr></table></figure></p><p>得到 hello，另一种方式是直接导入模块里的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)</span><br><span class="line"><span class="keyword">from</span> sayHello <span class="keyword">import</span> say ,cry       <span class="comment">#直接导入模块中具体的函数，缺点是如果想使用模块中的其他函数，需要追加导入</span></span><br><span class="line"></span><br><span class="line">say()                               <span class="comment">#可以直接使用函数</span></span><br><span class="line">cry()</span><br></pre></td></tr></table></figure></p><h3 id="模块的属性"><a href="#模块的属性" class="headerlink" title="模块的属性"></a>模块的属性</h3><p><strong>name</strong>属性</p><ol><li>如果模块是<strong>被导入</strong>，<strong>name</strong>的值为模块名字(文件名)</li><li>如果模块是<strong>被直接执行</strong>，<strong>name</strong>的值为’<strong>main</strong>’</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:         <span class="comment">#每个Python模块都有它的__name__，如果它是'__main__'，则输出“你好”</span></span><br><span class="line">    print(<span class="string">"你好"</span>)</span><br></pre></td></tr></table></figure><p>输出你好</p><p><strong>以模块的形式被调用，则什么都不会输出</strong></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>当我们编写Python库模块的时候，我们往往运行一些测试语句。当这个程序作为库被import的时候，我们并不需要运行这些测试语句。一种解决方法是在import之前，将模块中的测试语句注释掉。而更优美的解决方法，就是使用<strong>name</strong>。</p><p>下面是一个简单的库程序TestLib.py。当直接运行TestLib.py时，<strong>name</strong>为”<strong>main</strong>“。如果被import的话，<strong>name</strong>为”TestLib”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lib_func</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lib_func_another</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b + <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = <span class="number">101</span></span><br><span class="line">    print(lib_func(test))</span><br></pre></td></tr></table></figure></p><h4 id="doc属性"><a href="#doc属性" class="headerlink" title="doc属性"></a><strong>doc</strong>属性</h4><p>介绍模块的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.__doc__</span><br><span class="line"><span class="string">'This module is always available.  It provides access to the\nmathematical functions defined by the C standard.'</span></span><br></pre></td></tr></table></figure><h3 id="模块包"><a href="#模块包" class="headerlink" title="模块包"></a>模块包</h3><p>可以将功能相似的模块放在同一个文件夹（比如说this_dir）中，构成一个模块包。通过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this_dir.module     <span class="comment">#引入this_dir文件夹中的module模块.</span></span><br></pre></td></tr></table></figure></p><p>该文件夹中必须包含一个<strong>init</strong>.py的文件，提醒Python，该文件夹为一个模块包。<strong>init</strong>.py可以是一个空文件。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>在编译器中可以通过dir()函数来查看模块中的属性和函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(math)</span><br><span class="line">[<span class="string">'__doc__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan'</span>, <span class="string">'atan2'</span>, <span class="string">'atanh'</span>, <span class="string">'ceil'</span>, <span class="string">'copysign'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'degrees'</span>, <span class="string">'e'</span>, <span class="string">'erf'</span>, <span class="string">'erfc'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'fabs'</span>, <span class="string">'factorial'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'frexp'</span>, <span class="string">'fsum'</span>, <span class="string">'gamma'</span>, <span class="string">'hypot'</span>, <span class="string">'isfinite'</span>, <span class="string">'isinf'</span>, <span class="string">'isnan'</span>, <span class="string">'ldexp'</span>, <span class="string">'lgamma'</span>, <span class="string">'log'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log2'</span>, <span class="string">'modf'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'radians'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>, <span class="string">'trunc'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？答案是使用模块。模块是一个包含了所有你定义的函数和变量以.py结尾的文件。&lt;/p
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记05----函数</title>
    <link href="http://bwael.com/2016/05/01/pynote05/"/>
    <id>http://bwael.com/2016/05/01/pynote05/</id>
    <published>2016-05-01T01:48:33.000Z</published>
    <updated>2016-07-06T02:16:37.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><p>函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对圆括号。圆括号之中可以包括一些变量名，该行以冒号结尾。接下来是一块语句，它们是函数体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span>                  <span class="comment">#无参函数的定义，且没有返回值。函数将自动返回None。None是Python中的一个特别的数据类型，用来表示什么都没有，相当于C中的NULL。  </span></span><br><span class="line">    print(<span class="string">"你好我是王尼玛"</span>)   <span class="comment">#注意缩进  </span></span><br><span class="line">sayHi()                       <span class="comment">#函数调用</span></span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>  </span><br><span class="line">你好我是王尼玛</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareSum</span><span class="params">(a,b)</span>:</span>            <span class="comment">#带形参的函数定义（a,b即为形参）  </span></span><br><span class="line">    c = a**<span class="number">2</span> + b**<span class="number">2</span>            <span class="comment">#a**2表示a的平方  </span></span><br><span class="line">    <span class="keyword">return</span> c                   <span class="comment">#将c的值返回，与java不同的是，Python可以返回多个值，且以元组的形式返回  </span></span><br><span class="line">print(squareSum(<span class="number">3</span>,<span class="number">2</span>))          <span class="comment">#函数调用，将数值3，2带入函数</span></span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></p><h4 id="带默认形参的函数"><a href="#带默认形参的函数" class="headerlink" title="带默认形参的函数"></a>带默认形参的函数</h4><p>我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。比如“def say(message, times = 1):”是正确的而“def say(times=1,message):”是错误的！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(message, times = <span class="number">1</span>)</span>:</span>  </span><br><span class="line">    <span class="keyword">print</span> ((message+<span class="string">" "</span>) * times)         <span class="comment">#字符串可以通过+号连接  </span></span><br><span class="line">  </span><br><span class="line">say(<span class="string">'Hello'</span>)  </span><br><span class="line">say(<span class="string">'World'</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello   </span><br><span class="line">World World World</span><br></pre></td></tr></table></figure></p><h4 id="关键参数赋值"><a href="#关键参数赋值" class="headerlink" title="关键参数赋值"></a>关键参数赋值</h4><p>再调用函数的时候，我们可以直接通过形参名给形参赋值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b=<span class="number">2</span>, c=<span class="number">3</span>)</span>:</span>  </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"a、b、c的值分别为"</span>,a,b,c)      </span><br><span class="line">  </span><br><span class="line">func(<span class="number">1</span>,<span class="number">3</span>)  </span><br><span class="line">func(<span class="number">1</span>, c=<span class="number">24</span>)  </span><br><span class="line">func(c=<span class="number">50</span>, a=<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a、b、c的值分别为 <span class="number">1</span> <span class="number">3</span> <span class="number">3</span>  </span><br><span class="line">a、b、c的值分别为 <span class="number">1</span> <span class="number">2</span> <span class="number">24</span>  </span><br><span class="line">a、b、c的值分别为 <span class="number">100</span> <span class="number">2</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><h4 id="文档字符串❤"><a href="#文档字符串❤" class="headerlink" title="文档字符串❤"></a>文档字符串❤</h4><p>在函数的第一个逻辑行的字符串是这个函数的 文档字符串 。注意，DocStrings也适用于模块和类（虽然还没学到那…..委屈）。文档字符串主要用于给函数示意。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="string">""" 这个函数的作用是王尼玛勾搭妹子问候语"""</span>    <span class="comment">#只能通过三引号的行出，用井号不行  </span></span><br><span class="line">    <span class="string">"""本条语句也是不能作为函数字符串的！"""</span>  </span><br><span class="line">    print(<span class="string">"你好我是王尼玛"</span>)  </span><br><span class="line">sayHi()  </span><br><span class="line">  </span><br><span class="line">print(sayHi.__doc__)                               <span class="comment">#函数名后不需要括号，doc两边的是双下划线  </span></span><br><span class="line">help(sayHi)                                        <span class="comment">#内置的help函数其实就是读取的doc</span></span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你好我是王尼玛  </span><br><span class="line"> 这个函数的作用是王尼玛勾搭妹子问候语  </span><br><span class="line">Help on function sayHi <span class="keyword">in</span> module __main__:  </span><br><span class="line">  </span><br><span class="line">sayHi()  </span><br><span class="line">    这个函数的作用是王尼玛勾搭妹子问候语</span><br></pre></td></tr></table></figure></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><pre><code>定义在函数内部的变量叫做局部变量，不管局部变量的值在函数内部如何变化，都不会影响到函数外的同名变量。即变量名称对于函数来说是局部 的。这称为变量的作用域 。所有变量的作用域是它们被定义时所在的块。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeNum</span><span class="params">(a)</span>:</span>                               <span class="comment">#整数变量传递给函数，函数对它进行操作，但原整数变量a不发生变化。  </span></span><br><span class="line">    a = a + <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">return</span> a  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数返回值为"</span>,changeNum(a))  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"a的值为"</span>,a)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数返回值为 <span class="number">2</span>  </span><br><span class="line">a的值为 <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="4-使用global语句"><a href="#4-使用global语句" class="headerlink" title="4.使用global语句"></a>4.使用global语句</h3><p>如果你想要在函数外为一个定义在函数内的变量赋值，那么你就得通过global语句告诉Python这个变量名不是局部的，而是全局的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="keyword">global</span> x  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"函数中x的值为"</span>,x)  </span><br><span class="line">    x = <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">return</span> x  </span><br><span class="line">  </span><br><span class="line">x = <span class="number">50</span>                                              <span class="comment">#在函数外为一个定义在函数内的变量赋值  </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'x的值为'</span>, x)  </span><br><span class="line">print(<span class="string">"函数返回值为"</span>,func())</span><br></pre></td></tr></table></figure></p><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x的值为 <span class="number">50</span>  </span><br><span class="line">函数中x的值为 <span class="number">50</span>  </span><br><span class="line">函数返回值为 <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><p>lambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span>  </span><br><span class="line"><span class="keyword">print</span> (f(<span class="number">4</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#Python中使用lambda的话，写成这样   </span></span><br><span class="line">g = <span class="keyword">lambda</span> x : x**<span class="number">2</span>  </span><br><span class="line"><span class="keyword">print</span> (g(<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><p>lambda生成一个函数对象。该函数参数为x,，返回值为x的平方。函数对象赋给g。g的调用与正常函数无异。</p><h3 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h3><p>函数可以作为一个对象，进行参数传递。函数名(比如func)即该对象。比如说:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span>  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(fx, a)</span>:</span>                           <span class="comment">#将函数作为参数传递  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d的平方为'</span> % a,end=<span class="string">""</span>)  </span><br><span class="line">    <span class="keyword">print</span> (fx(a))  </span><br><span class="line">  </span><br><span class="line">test(f, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>上面的程序可以改写为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(fx, a)</span>:</span>                             </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d的平方为'</span> % a,end=<span class="string">""</span>)  </span><br><span class="line">    <span class="keyword">print</span> (fx(a))  </span><br><span class="line">  </span><br><span class="line">test(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h3><p>map函数的定义：</p><p>map(function, sequence[, sequence, …]) -&gt; list<br>通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。map()将每次从两个表中分别取出一个元素，带入lambda所定义的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))))</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])))</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure></p><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><p>filter函数的第一个参数也是一个函数对象。它也是将作为参数的函数对象作用于多个元素。如果函数对象返回的是True，则该次的元素被储存于返回的表中。filter通过读入的函数来筛选数据。同样，在Python 3.X中，filter返回的不是表，而是循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">100</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (list(filter(func,[<span class="number">10</span>,<span class="number">56</span>,<span class="number">101</span>,<span class="number">500</span>])))</span><br></pre></td></tr></table></figure></p><h3 id="小提示："><a href="#小提示：" class="headerlink" title="小提示："></a><strong>小提示：</strong></h3><ol><li><p>指针传递使函数可以改变函数外的值！</p><p> 对于基本数据类型的变量，变量传递给函数后，函数会在内存中复制一个新的变量，从而不影响原来的变量。（我们称此为值传递）</p><p> 但是对于列表来说，列表传递给函数的是一个指针，指针指向序列在内存中的位置，在函数中对表的操作将在原有内存中进行，从而影响原有变量。 （我们称此为指针传递）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeList</span><span class="params">(b)</span>:</span>                              <span class="comment">#我们将一个表传递给函数，函数进行操作，原来的表b发生变化。  </span></span><br><span class="line">   b[<span class="number">0</span>] = b[<span class="number">0</span>] + <span class="number">1</span>  </span><br><span class="line">   <span class="keyword">return</span> b  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数返回值为"</span>,changeList(b))  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"b的值为"</span>,b)</span><br></pre></td></tr></table></figure></li></ol><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数返回值为 [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line">b的值为 [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>Python可以返回多个值，以元组的形式返回</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idSave</span><span class="params">()</span>:</span>  </span><br><span class="line">   a=input(<span class="string">"姓名为："</span>)  </span><br><span class="line">   b=input(<span class="string">"年龄为："</span>)  </span><br><span class="line">   c=input(<span class="string">"性别为："</span>)  </span><br><span class="line">   <span class="keyword">return</span> a,b,c  </span><br><span class="line">  </span><br><span class="line">print(idSave())</span><br></pre></td></tr></table></figure></li></ol><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名为：王尼玛  </span><br><span class="line">年龄为：<span class="number">12</span>  </span><br><span class="line">性别为：女  </span><br><span class="line">(<span class="string">'王尼玛'</span>, <span class="string">'12'</span>, <span class="string">'女'</span>)</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>带有默认值的形参</p><p> 我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数的定义和调用&quot;&gt;&lt;a href=&quot;#函数的定义和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义和调用&quot;&gt;&lt;/a&gt;函数的定义和调用&lt;/h2&gt;&lt;p&gt;函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对圆括号。圆括号之中
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记04----控制语句</title>
    <link href="http://bwael.com/2016/04/22/pynote04/"/>
    <id>http://bwael.com/2016/04/22/pynote04/</id>
    <published>2016-04-22T01:33:24.000Z</published>
    <updated>2016-07-06T01:46:56.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h3><p>if主要用于条件判断。</p><h4 id="1-1-if结构"><a href="#1-1-if结构" class="headerlink" title="1.1 if结构"></a>1.1 if结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>  </span><br><span class="line">x = <span class="number">1</span>  </span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0</span>:                        <span class="comment">#注意后面的冒号必不可少！  </span></span><br><span class="line">    x = x+<span class="number">1</span>                      <span class="comment">#必须输入四个空格的缩进表示隶属关系！  </span></span><br><span class="line"><span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><h4 id="1-2-if-elif-else-结构"><a href="#1-2-if-elif-else-结构" class="headerlink" title="1.2 if-elif-else 结构"></a>1.2 if-elif-else 结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre name="code" class="python"&gt;a = input("a:")                  #这条语句的作用是在屏幕显示“a:”,并等待用户输值赋给a。  </span><br><span class="line">b = input(<span class="string">"b:"</span>)  </span><br><span class="line"><span class="keyword">if</span>(a &gt; b):  </span><br><span class="line">    <span class="keyword">print</span> (a, <span class="string">" 大于 "</span>, b)  </span><br><span class="line">    print(<span class="string">"显示1"</span>)  </span><br><span class="line"><span class="keyword">elif</span>(a==b):                      <span class="comment">#elif类似java中的else if，但要注意在末尾的冒号！  </span></span><br><span class="line">    print(a,<span class="string">"等于"</span>,b)  </span><br><span class="line">    print(<span class="string">"显示2"</span>)  </span><br><span class="line"><span class="keyword">else</span>:                            <span class="comment">#注意末尾的冒号！  </span></span><br><span class="line">    print(a,<span class="string">"小于"</span>,b)  </span><br><span class="line">    print(<span class="string">"显示3"</span>)  </span><br><span class="line">print(<span class="string">"显示4"</span>)</span><br></pre></td></tr></table></figure><p>这里有三个块，分别属于if, elif, else引领。Python检测条件，如果发现if的条件为假，那么跳过后面紧跟的块，检测下一个elif的条件； 如果还是假，那么执行else块。通过上面的结构将程序分出三个分支。程序根据条件，只执行三个分支中的一个。</p><h4 id="1-3-if的嵌套使用"><a href="#1-3-if的嵌套使用" class="headerlink" title="1.3 if的嵌套使用"></a>1.3 if的嵌套使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">"a:"</span>)  </span><br><span class="line">b = input(<span class="string">"b:"</span>)  </span><br><span class="line">c = input(<span class="string">"c:"</span>)  </span><br><span class="line"><span class="keyword">if</span>(a &gt; b):  </span><br><span class="line">    <span class="keyword">print</span> (a,<span class="string">"大于"</span>,b)  </span><br><span class="line">    <span class="keyword">if</span>(a&gt;c):                    <span class="comment">#注意这里的的if需要缩进，因为该if隶属于if（a&gt;b）  </span></span><br><span class="line">        print(a,<span class="string">"大于"</span>,c)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        print(a,<span class="string">"小于"</span>,c)       <span class="comment">#注意这里的if应该与if(a&gt;c)缩进相同</span></span><br></pre></td></tr></table></figure><h3 id="2-while"><a href="#2-while" class="headerlink" title="2.while"></a>2.while</h3><p>给出一个while循环终止条件。  下例循环打印1到100<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>  </span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">100</span>:  </span><br><span class="line">    a+=<span class="number">1</span>                     <span class="comment">#Python没有i++的写法  </span></span><br><span class="line">    print(a）  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="3-for"><a href="#3-for" class="headerlink" title="3.for"></a>3.for</h3><p>for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student2=[<span class="string">"王尼玛"</span>,<span class="string">"男"</span>,<span class="number">22</span>,[<span class="string">"脑袋大"</span>,<span class="string">"脖子短"</span>,<span class="string">"屁股圆"</span>]]  </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> student2:                                                   </span><br><span class="line"><span class="comment">#循环次数为列表student2中元素的个数。  注意末尾的引号  </span></span><br><span class="line">    print(a)                                                         </span><br><span class="line">   <span class="comment">#循环结构同样需要缩进  因为迭代（也就是循环）某范围的数字非常常见，所以有个内建的范围函数提供使用——range()</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">10</span>))                                                      <span class="comment">#建立一个从0到9的列表(range()生成的是iterator对象。list()的作用是转换成列表)  </span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>我们可以这样使用range()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):                                               <span class="comment">#对while中的事例进行改造，打印1到100的数字  </span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">1</span>,<span class="number">100</span>,<span class="number">3</span>))                                                <span class="comment">#生成从1到100间的数，步长为3  </span></span><br><span class="line"><span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">34</span>, <span class="number">37</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">46</span>, <span class="number">49</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">67</span>, <span class="number">70</span>, <span class="number">73</span>, <span class="number">76</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">91</span>, <span class="number">94</span>, <span class="number">97</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">99</span>,<span class="number">1</span>,<span class="number">-3</span>))                                                 <span class="comment">#1到100间的数字，逆向排列  </span></span><br><span class="line">[<span class="number">99</span>, <span class="number">96</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">84</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">60</span>, <span class="number">57</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">39</span>, <span class="number">36</span>, <span class="number">33</span>, <span class="number">30</span>, <span class="number">27</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>轻量级循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]                                            <span class="comment">#生成一个简单的  </span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p><strong>enumerate()函数</strong></p><p>利用enumerate()函数，可以在每次循环中同时得到下标和元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">'abcdefghijk'</span>  </span><br><span class="line"><span class="keyword">for</span> (index,char) <span class="keyword">in</span> enumerate(S):  </span><br><span class="line">    print(index)  </span><br><span class="line">    print(char)  </span><br><span class="line">zip()</span><br></pre></td></tr></table></figure></p><p>如果你多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ta = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">tb = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]  </span><br><span class="line">tc = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]  </span><br><span class="line"><span class="keyword">for</span> (a,b,c) <span class="keyword">in</span> zip(ta,tb,tc):  </span><br><span class="line">    print(a,b,c)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">9</span> a  </span><br><span class="line"><span class="number">2</span> <span class="number">8</span> b  </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> c</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"lucy"</span>,<span class="string">"lily"</span>,<span class="string">"tom"</span>]  </span><br><span class="line">b=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]  </span><br><span class="line">print(list(zip(a,b)))</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'lucy'</span>, <span class="number">11</span>), (<span class="string">'lily'</span>, <span class="number">12</span>), (<span class="string">'tom'</span>, <span class="number">13</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="4-中断循环"><a href="#4-中断循环" class="headerlink" title="4.中断循环"></a>4.中断循环</h3><p>break——跳出循环<br>continue——跳出本次命令的之行，继续下一次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nameList=[<span class="string">"王二小"</span>,<span class="string">"王小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>,<span class="string">"寒梅梅"</span>,<span class="string">"王尼玛"</span>,<span class="string">"李磊"</span>]  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:  </span><br><span class="line">    <span class="keyword">if</span> name==<span class="string">"王尼玛"</span>:  </span><br><span class="line">        print(<span class="string">"凶手找到啦！"</span>)  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>输出为王尼玛<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nameList=[<span class="string">"王二小"</span>,<span class="string">"王小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>,<span class="string">"寒梅梅"</span>,<span class="string">"王尼玛"</span>,<span class="string">"李磊"</span>]  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:  </span><br><span class="line">    <span class="keyword">if</span> name==<span class="string">"王尼玛"</span>:  </span><br><span class="line">        print(<span class="string">"凶手找到啦！"</span>)  </span><br><span class="line">        <span class="keyword">continue</span>  </span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure></p><p>输出为李磊</p><h3 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h3><ul><li>1.Python的缩进<pre><code>空白在Python中是重要的。事实上行首的空白是重要的。它称为缩进。在逻辑行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。 这意味着同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。我们将在后面的章节中看到有关块的用处的例子。 你需要记住的一样东西是错误的缩进会引发错误。</code></pre></li><li><p>2.if格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if  &lt;条件1&gt;:</span><br><span class="line">    statement</span><br><span class="line">elif &lt;条件2&gt;:</span><br><span class="line">    statement</span><br><span class="line">elif &lt;条件3&gt;：</span><br><span class="line">    statement</span><br><span class="line">else:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure></li><li><p>3.while格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while&lt;条件&gt;:</span><br><span class="line">statement</span><br><span class="line">else:</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>4.for格式</p><p>  <code>for 变量 in &lt;对象集合&gt;：</code></p></li><li><p>5.Python与其他语言的不同</p><p>  <code>Python的while可以写else！</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-if&quot;&gt;&lt;a href=&quot;#1-if&quot; class=&quot;headerlink&quot; title=&quot;1.if&quot;&gt;&lt;/a&gt;1.if&lt;/h3&gt;&lt;p&gt;if主要用于条件判断。&lt;/p&gt;
&lt;h4 id=&quot;1-1-if结构&quot;&gt;&lt;a href=&quot;#1-1-if结构&quot; class=&quot;h
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 64 Bit Installation Guide Acer C720, HP Chromebook 14, Toshiba CB-30, and Dell Chromebook 11</title>
    <link href="http://bwael.com/2016/04/19/windows-for-chromebook/"/>
    <id>http://bwael.com/2016/04/19/windows-for-chromebook/</id>
    <published>2016-04-19T15:50:57.000Z</published>
    <updated>2016-05-24T05:25:47.980Z</updated>
    
    <content type="html"><![CDATA[<p>Acer C740, Acer C910, Acer CB5-571, Toshiba Chromebook 2 and Dell Chromebook 13, see here:<a href="https://docs.google.com/document/d/1nFZmoRzQ03btPCGVSa4ku6JPQik-SxD__zOd1CoB2yg/edit" target="_blank" rel="noopener">Click</a></p><h3 id="Flash-Custom-Coreboot-BIOS"><a href="#Flash-Custom-Coreboot-BIOS" class="headerlink" title="Flash Custom Coreboot BIOS"></a>Flash Custom Coreboot BIOS</h3><p><strong>Warning</strong>: this BIOS is only for the Acer C720, C720P, HP Chromebook 14, Toshiba CB-30, and Dell Chromebook 11.</p><ol><li><p>Please remove the write protect screw before flashing the BIOS.</p></li><li><p>Please check your CPU before flashing the BIOS.</p></li><li><p>Easy Flashing Script:<br><code>cd ~; curl -L -O https://goo.gl/1hFfO3; sudo bash 1hFfO3</code></p></li></ol><p><em>Select the “Install/Update custom coreboot firmware” option.</em></p><h3 id="Create-USB-Installer"><a href="#Create-USB-Installer" class="headerlink" title="Create USB Installer"></a>Create USB Installer</h3><p>Use rufus to create the Windows 10 <strong>64 bit</strong> USB installer. Select MBR for legacy BIOS and create the USB drive.</p><p>You will need a USB keyboard/mouse for installation</p><h3 id="Install-Chipset-Audio-WiFi-and-Bluetooth-Drivers"><a href="#Install-Chipset-Audio-WiFi-and-Bluetooth-Drivers" class="headerlink" title="Install Chipset, Audio, WiFi, and Bluetooth Drivers"></a>Install Chipset, Audio, WiFi, and Bluetooth Drivers</h3><p>Audio Driver: <a href="http://www.realtek.com.tw/downloads/downloadsCheck.aspx?Langid=1&amp;PNid=14&amp;PFid=24&amp;Level=4&amp;Conn=3&amp;DownTypeID=3&amp;GetDown=false" target="_blank" rel="noopener">Link</a></p><p>Chipset Driver: Use the latest from Windows Update!</p><p>WiFi Driver: Use the latest from Windows Update!</p><p>Bluetooth Driver: Use the latest from Windows Update!</p><p>Run the setup files for the audio and chipset drivers. For WiFi and Bluetooth, use Device Manager to update the driver.</p><h3 id="Turn-on-testsigning"><a href="#Turn-on-testsigning" class="headerlink" title="Turn on testsigning"></a>Turn on testsigning</h3><p>Open Command Prompt as administrator, and type in “bcdedit /set testsigning on”. Then reboot.</p><h3 id="Keyboard-Driver"><a href="#Keyboard-Driver" class="headerlink" title="Keyboard Driver"></a>Keyboard Driver</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/croskeyboard3.4.1.zip" target="_blank" rel="noopener">Link</a></p><p>Open Device Manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_GGL&amp;DEV_0303” or “ACPI\GGL0303”. Under the driver tab, click “Update Driver” and browse to the croskeyboard3 driver. Then install.</p><h3 id="Trackpad-Driver-Cypress-Trackpad"><a href="#Trackpad-Driver-Cypress-Trackpad" class="headerlink" title="Trackpad Driver (Cypress Trackpad)"></a>Trackpad Driver (Cypress Trackpad)</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/crostrackpad%203%20beta%2011.zip" target="_blank" rel="noopener">Link</a></p><p>Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_CYAP&amp;DEV_0000” or “ACPI\CYAP0000”. Under the driver tab, click “Update Driver” and browse to the crostrackpad3 driver. Then install.</p><h3 id="Trackpad-Driver-Elan-Trackpad"><a href="#Trackpad-Driver-Elan-Trackpad" class="headerlink" title="Trackpad Driver (Elan Trackpad)"></a>Trackpad Driver (Elan Trackpad)</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/crostrackpad%203%20beta%2011-elan.zip" target="_blank" rel="noopener">Link</a></p><p>Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_ELAN&amp;DEV_0000” or “ACPI\ELAN0000”. Under the driver tab, click “Update Driver” and browse to the crostrackpad3 driver. Then install.</p><h3 id="Visual-Studio-2015-Redistributable"><a href="#Visual-Studio-2015-Redistributable" class="headerlink" title="Visual Studio 2015 Redistributable:"></a>Visual Studio 2015 Redistributable:</h3><p>Download: <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">Link</a></p><h3 id="Trackpad-Driver-Helper-Utilities-Cypress-and-Elan-Trackpads"><a href="#Trackpad-Driver-Helper-Utilities-Cypress-and-Elan-Trackpads" class="headerlink" title="Trackpad Driver Helper Utilities (Cypress and Elan Trackpads)"></a>Trackpad Driver Helper Utilities (Cypress and Elan Trackpads)</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/crostrackpad%203%20beta%2011.2%20utilities.zip" target="_blank" rel="noopener">Link</a></p><p>Place the trackpad driver utility in the Windows startup folder (Start &gt; Run &gt; shell:startup) and run it after installing the driver.</p><h3 id="Touch-Screen-Driver-Acer-C720P-users-only"><a href="#Touch-Screen-Driver-Acer-C720P-users-only" class="headerlink" title="Touch Screen Driver (Acer C720P users only)"></a>Touch Screen Driver (Acer C720P users only)</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/crostouchscreen2.3.zip" target="_blank" rel="noopener">Link</a></p><p>Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_ATML&amp;DEV_0001” or “ACPI\ATML0001”. Under the driver tab, click “Update Driver” and browse to the crostouchscreen2 driver. Then install.</p><h3 id="Graphics-Driver"><a href="#Graphics-Driver" class="headerlink" title="Graphics Driver"></a>Graphics Driver</h3><p><strong>Grab the latest Graphics Driver from Windows Update!</strong></p><h3 id="Embedded-Controller-Driver-Utility-Optional"><a href="#Embedded-Controller-Driver-Utility-Optional" class="headerlink" title="Embedded Controller Driver + Utility (Optional)"></a>Embedded Controller Driver + Utility (Optional)</h3><p>Download: <a href="https://dl.dropboxusercontent.com/u/59964215/chromebook/x64/CrosPowerMan%201.1.zip" target="_blank" rel="noopener">Link</a></p><h3 id="Visual-Studio-2013-Redistr"><a href="#Visual-Studio-2013-Redistr" class="headerlink" title="Visual Studio 2013 Redistr"></a>Visual Studio 2013 Redistr</h3><p>ibutable: <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784" target="_blank" rel="noopener">Download</a></p><p>If you like running Windows on your chromebook, please donate if you are able to do so. I have made these drivers and the BIOS available free of charge and am relying on donations to be able to get Windows running on more chromebooks (Pixel 2, Dell Chromebook 13).<br>For support, please see <a href="https://reddit.com/r/chrultrabook" target="_blank" rel="noopener">https://reddit.com/r/chrultrabook</a><br>Please donate <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=AR25GXJD45KBW&amp;lc=US&amp;item_name=CoolStar%20Chromebook%20Dev%2e&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted" target="_blank" rel="noopener">here</a>.</p><p><em>from : reddit.com chrultrabook</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Acer C740, Acer C910, Acer CB5-571, Toshiba Chromebook 2 and Dell Chromebook 13, see here:&lt;a href=&quot;https://docs.google.com/document/d/1nF
      
    
    </summary>
    
      <category term="折腾笔记" scheme="http://bwael.com/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="折腾笔记" scheme="http://bwael.com/tags/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://bwael.com/tags/Linux/"/>
    
      <category term="Chromebook" scheme="http://bwael.com/tags/Chromebook/"/>
    
  </entry>
  
  <entry>
    <title>Professional English Key Words Chapter-1</title>
    <link href="http://bwael.com/2016/04/12/ProE-key-terms-chapter-one/"/>
    <id>http://bwael.com/2016/04/12/ProE-key-terms-chapter-one/</id>
    <published>2016-04-12T14:50:57.000Z</published>
    <updated>2016-05-24T05:24:20.767Z</updated>
    
    <content type="html"><![CDATA[<h5 id="application-software"><a href="#application-software" class="headerlink" title="application software"></a>application software</h5><p>Also referred to as apps. Software that can perform useful work, such as word processing, cost estimating, or accounting tasks. The user primarily interacts with application software.</p><h5 id="Blu-ray"><a href="#Blu-ray" class="headerlink" title="Blu-ray"></a>Blu-ray</h5><p>A type of high-definition disc with a capacity of 25 to 50 gigabytes.</p><h5 id="cloud-computing"><a href="#cloud-computing" class="headerlink" title="cloud computing"></a>cloud computing</h5><p>Data stored at a server on the Internet and available anywhere the Internet can be accessed.</p><h5 id="communication-device"><a href="#communication-device" class="headerlink" title="communication device"></a>communication device</h5><p>Computer systems that communicate with other computer systems using modems. For example, it modifies computer output into a form that can be transmitted across standard telephone lines.</p><h5 id="compact-disc-CD"><a href="#compact-disc-CD" class="headerlink" title="compact disc (CD)"></a>compact disc (CD)</h5><p>Widely used optical disc format. It holds 650 MB (megabytes) to 1 GB (gigabyte) of data on one side of the CD.</p><h5 id="computer-competency"><a href="#computer-competency" class="headerlink" title="computer competency"></a>computer competency</h5><p>Becoming proficient in computer-related skills.</p><h5 id="connectivity"><a href="#connectivity" class="headerlink" title="connectivity"></a>connectivity</h5><p>Capability of the microcomputer to use information from the world beyond one’s desk. Data and information can be sent over telephone or cable lines and through the air so that computers can talk to each other and share information.</p><h5 id="data"><a href="#data" class="headerlink" title="data"></a>data</h5><p>Raw, unprocessed facts that are input to a computer system that will give compiled information when the computer processes those facts. Data is also defined as facts or observations about people, places, things, and events.</p><h5 id="database-file"><a href="#database-file" class="headerlink" title="database file"></a>database file</h5><p>File containing highly structured and organized data created by database management programs.</p><h5 id="desktop-computer"><a href="#desktop-computer" class="headerlink" title="desktop computer"></a>desktop computer</h5><p>Computer small enough to fit on top of or along the side of a desk and yet too big to carry around.</p><h5 id="device-driver"><a href="#device-driver" class="headerlink" title="device driver"></a>device driver</h5><p>Every device that is connected to the computer has a special program associated with it called a device driver that allows communication between the operating system and the device.</p><h5 id="DVD-digital-versatile-disc-or-digital-video-disc"><a href="#DVD-digital-versatile-disc-or-digital-video-disc" class="headerlink" title="DVD (digital versatile disc or digital video disc)"></a>DVD (digital versatile disc or digital video disc)</h5><p>Similar to CD-ROMs except that more data can be packed into the same amount of space. DVD drives can store a typical capacity of 4.7 GB on one side.</p><h5 id="document-file"><a href="#document-file" class="headerlink" title="document file"></a>document file</h5><p>File created by a word processor to save documents such as letters, research papers, and memos.</p><h5 id="end-user"><a href="#end-user" class="headerlink" title="end user"></a>end user</h5><p>Person who uses microcomputers or has access to larger computers.</p><h5 id="flash-memory-card"><a href="#flash-memory-card" class="headerlink" title="flash memory card"></a>flash memory card</h5><p>A solid-state storage device widely used in notebook computers. Flash memory also is used in a variety of specialized input devices to capture and transfer data to desktop computers.</p><h5 id="general-purpose-application"><a href="#general-purpose-application" class="headerlink" title="general-purpose application"></a>general-purpose application</h5><p>Application used for doing common tasks, such as browsers and word processors, spreadsheets, databases, management systems, and presentation graphics. Also known as productivity applications.</p><h5 id="handheld-computer"><a href="#handheld-computer" class="headerlink" title="handheld computer"></a>handheld computer</h5><p>See personal digital assistant (PDA).</p><h5 id="hard-disk"><a href="#hard-disk" class="headerlink" title="hard disk"></a>hard disk</h5><p>Enclosed disk drive containing one or more metallic disks. Hard disks use magnetic charges to record data and have large storage capacities and fast retrieval times.</p><h5 id="hardware"><a href="#hardware" class="headerlink" title="hardware"></a>hardware</h5><p>Equipment that includes a keyboard, monitor, printer, the computer itself, and other devices that are controlled by software programming.</p><h5 id="information"><a href="#information" class="headerlink" title="information"></a>information</h5><p>Data that has been processed by a computer system.</p><h5 id="information-system"><a href="#information-system" class="headerlink" title="information system"></a>information system</h5><p>Collection of hardware, software, people, data, and procedures that work together to provide information essential to running an organization.</p><h5 id="information-technology-IT"><a href="#information-technology-IT" class="headerlink" title="information technology (IT)"></a>information technology (IT)</h5><p>Computer and communication technologies, such as communication links to the Internet, that provide help and understanding to the end user.</p><h5 id="input-device"><a href="#input-device" class="headerlink" title="input device"></a>input device</h5><p>Piece of equipment that translates data into a form a computer can process. The most common input devices are the keyboard and the mouse.</p><h5 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h5><p>A huge computer network available to everyone with a microcomputer and a means to connect to it. It is the actual physical network made up of wires, cables, and satellites as opposed to the Web, which is the multimedia interface to resources available on the Internet.</p><h5 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h5><p>Input device that looks like a typewriter keyboard but has additional keys.</p><h5 id="laptop-computer"><a href="#laptop-computer" class="headerlink" title="laptop computer"></a>laptop computer</h5><p>See notebook computer and notebook system unit.</p><h5 id="mainframe-computer"><a href="#mainframe-computer" class="headerlink" title="mainframe computer"></a>mainframe computer</h5><p>This computer can process several million program instructions per second. Sizeable organizations rely on these room-size systems to handle large programs and a great deal of data.</p><h5 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h5><p>Memory is contained on chips connected to the system board and is a holding area for data instructions and information (processed data waiting to be output to secondary storage). RAM, ROM, and CMOS are three types of memory chips.</p><h5 id="microcomputer"><a href="#microcomputer" class="headerlink" title="microcomputer"></a>microcomputer</h5><p>Small, low-cost computer designed for individual users. These include desktop, notebook, and personal digital assistant computers.</p><h5 id="microprocessor"><a href="#microprocessor" class="headerlink" title="microprocessor"></a>microprocessor</h5><p>The central processing unit (CPU) of a microcomputer controls and manipulates data to produce information. The microprocessor is contained on a single integrated circuit chip and is the brains of the system.</p><h5 id="midrange-computer"><a href="#midrange-computer" class="headerlink" title="midrange computer"></a>midrange computer</h5><p>Also known as a minicomputer.</p><h5 id="mobile-app-application"><a href="#mobile-app-application" class="headerlink" title="mobile app (application)"></a>mobile app (application)</h5><p>Add-on features for a variety of mobile devices, including smartphones, netbooks, and tablets.</p><h5 id="modem"><a href="#modem" class="headerlink" title="modem"></a>modem</h5><p>Short for modulator-demodulator. It is a communication device that translates the electronic signals from a computer into electronic signals that can travel over telephone lines.</p><h5 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h5><p>Output device like a television screen that displays data processed by the computer.</p><h5 id="mouse"><a href="#mouse" class="headerlink" title="mouse"></a>mouse</h5><p>Device that typically rolls on the desktop and directs the cursor on the display screen.</p><h5 id="network"><a href="#network" class="headerlink" title="network"></a>network</h5><p>The arrangement in which various communications channels are connected through two or more computers. The largest network in the world is the Internet.</p><h5 id="notebook-computer"><a href="#notebook-computer" class="headerlink" title="notebook computer"></a>notebook computer</h5><p>Portable computer, also known as a laptop computer, weighing between 4 and 10 pounds.</p><h5 id="operating-system-OS"><a href="#operating-system-OS" class="headerlink" title="operating system (OS)"></a>operating system (OS)</h5><p>Software that interacts between application software and the computer, handling such details as running programs, storing and processing data, and coordinating all computer resources, including attached peripheral devices. It is the most important program on the computer. Windows 7, Windows Vista, and Mac OS X are examples of operating systems.</p><h5 id="optical-disc"><a href="#optical-disc" class="headerlink" title="optical disc"></a>optical disc</h5><p>Storage device that can hold over 17 gigabytes of data, which is an equivalent of several million typewritten pages. Lasers are used to record and read data on the disc. The two basic types of optical discs are compact discs (CDs) and digital versatile or video discs (DVDs).</p><h5 id="output-device"><a href="#output-device" class="headerlink" title="output device"></a>output device</h5><p>Equipment that translates processed information from the central processing unit into a form that can be understood by humans. The most common output devices are monitors and printers.</p><h5 id="people"><a href="#people" class="headerlink" title="people"></a>people</h5><p>End users who use computers to make themselves more productive.</p><h5 id="personal-digital-assistant-PDA"><a href="#personal-digital-assistant-PDA" class="headerlink" title="personal digital assistant (PDA)"></a>personal digital assistant (PDA)</h5><p>A device that typically combines pen input, writing recognition, personal organizational tools, and communication capabilities in a very small package. Also called handheld PC and palm computer.</p><h5 id="presentation-file"><a href="#presentation-file" class="headerlink" title="presentation file"></a>presentation file</h5><p>A file created by presentation graphics programs to save presentation materials. For example, a file might contain audience handouts, speaker notes, and electronic slides.</p><h5 id="printer"><a href="#printer" class="headerlink" title="printer"></a>printer</h5><p>Device that produces printed paper output.</p><h5 id="procedures"><a href="#procedures" class="headerlink" title="procedures"></a>procedures</h5><p>Rules or guidelines to follow when using hardware, software, and data.</p><h5 id="program"><a href="#program" class="headerlink" title="program"></a>program</h5><p>Instructions for the computer to follow to process data. See software.</p><h5 id="random-access-memory-RAM"><a href="#random-access-memory-RAM" class="headerlink" title="random-access memory (RAM)"></a>random-access memory (RAM)</h5><p>Volatile, temporary storage that holds the program and data the CPU is presently processing. It is called temporary storage because its contents will be lost if electrical power to the computer is disrupted or the computer is turned off.</p><h5 id="secondary-storage"><a href="#secondary-storage" class="headerlink" title="secondary storage"></a>secondary storage</h5><p>Permanent storage used to preserve programs and data that can be retained after the computer is turned off. These devices include floppy disks, hard disks, magnetic tape, CDs, DVDs, and more.</p><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><p>A host computer with a connection to the Internet that stores document files used to display web pages. Depending on the resources shared, it may be called a file server, printer server, communication server, web server, or database server.</p><h5 id="smartphone"><a href="#smartphone" class="headerlink" title="smartphone"></a>smartphone</h5><p>A type of cell phone that offers a variety of advanced functionality, including Internet and e-mail.</p><h5 id="software"><a href="#software" class="headerlink" title="software"></a>software</h5><p>Computer program consisting of step-by-step instructions, directing the computer on each task it will perform.</p><h5 id="solid-state-drive-SSD"><a href="#solid-state-drive-SSD" class="headerlink" title="solid-state drive (SSD)"></a>solid-state drive (SSD)</h5><p>Designed to be connected inside a microcomputer system the same way an internal hard disk would be, but contains solid-state memory instead of magnetic disks to store data.</p><h5 id="solid-state-storage"><a href="#solid-state-storage" class="headerlink" title="solid-state storage"></a>solid-state storage</h5><p>A secondary storage device that has no moving parts. Data is stored and retrieved electronically directly from these devices, much as they would be from conventional computer memory.</p><h5 id="specialized-application"><a href="#specialized-application" class="headerlink" title="specialized application"></a>specialized application</h5><p>Programs that are narrowly focused on specific disciplines and occupations. Some of the best known are multimedia, Web authoring, graphics, virtual reality, and artificial intelligence.</p><h5 id="supercomputer"><a href="#supercomputer" class="headerlink" title="supercomputer"></a>supercomputer</h5><p>Fastest calculating device ever invented, processing billions of program instructions per second. Used by very large organizations like NASA.</p><h5 id="system-software"><a href="#system-software" class="headerlink" title="system software"></a>system software</h5><p>“Background” software that enables the application software to interact with the computer. System software consists of the operating system, utilities, device drivers, and language translators. It works with application software to handle the majority of technical details.</p><h5 id="system-unit"><a href="#system-unit" class="headerlink" title="system unit"></a>system unit</h5><p>Part of a microcomputer that contains the CPU. Also known as the system cabinet or chassis, it is the container that houses most of the electronic components that make up the computer system.</p><h5 id="tablet"><a href="#tablet" class="headerlink" title="tablet"></a>tablet</h5><p>A type of microcomputer that contains a thin system unit, most of which is the monitor. The best-known tablets are Apple’s iPad, Motorola’s Zoom, and HP’s Slate.</p><h5 id="tablet-computer"><a href="#tablet-computer" class="headerlink" title="tablet computer"></a>tablet computer</h5><p>A type of notebook computer that accepts handwritten data, using a stylus or pen, that is converted to standard text and can be processed by a word processor program.</p><h5 id="USB-drive"><a href="#USB-drive" class="headerlink" title="USB drive"></a>USB drive</h5><p>The size of a key chain, these hard drives connect to a computer’s USB port enabling a transfer of files; has a capacity of up to <strong><em>64GB</em></strong>.</p><h5 id="utility"><a href="#utility" class="headerlink" title="utility"></a>utility</h5><p>Performs specific tasks related to managing computer resources or files. Norton Utility for virus control and system maintenance is a good example of a utility. Also known as service programs.</p><h5 id="virus"><a href="#virus" class="headerlink" title="virus"></a>virus</h5><p>Hidden instructions that migrate through networks and operating systems and become embedded in different programs. They may be designed to destroy data or simply to display messages.</p><h5 id="web"><a href="#web" class="headerlink" title="web"></a>web</h5><p>Introduced in 1992 and prior to the web, the Internet was all text. The Web made it possible to provide a multimedia interface that includes graphics, animations, sound, and video.</p><h5 id="wireless-revolution"><a href="#wireless-revolution" class="headerlink" title="wireless revolution"></a>wireless revolution</h5><p>A revolution that is expected to dramatically affect the way we communicate and use computer technology.</p><h5 id="worksheet-file"><a href="#worksheet-file" class="headerlink" title="worksheet file"></a>worksheet file</h5><p>Created by electronic spreadsheets to analyze things like budgets and to predict sales.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;application-software&quot;&gt;&lt;a href=&quot;#application-software&quot; class=&quot;headerlink&quot; title=&quot;application software&quot;&gt;&lt;/a&gt;application software&lt;/h5&gt;&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Computing Essential" scheme="http://bwael.com/tags/Computing-Essential/"/>
    
      <category term="English" scheme="http://bwael.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux安装到U盘上de安装教程</title>
    <link href="http://bwael.com/2016/04/03/install-archlinux-on-usb-storage-device/"/>
    <id>http://bwael.com/2016/04/03/install-archlinux-on-usb-storage-device/</id>
    <published>2016-04-03T06:58:31.000Z</published>
    <updated>2016-04-03T17:03:42.420Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如果只是想单纯的安装Arch Linux</strong><br>请移步<a href="http://bbs.archlinuxcn.org/viewtopic.php?id=1037" target="_blank" rel="noopener">Arch Linux安装教程</a><br><a href="https://wiki.archlinux.org/index.php/Main_page_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">完善的中文Wiki</a>)</p><h3 id="Arch-Linux简介"><a href="#Arch-Linux简介" class="headerlink" title="Arch Linux简介"></a>Arch Linux简介</h3><p>Arch Linux(或称Arch)是一种以轻量简洁为设计理念的Linux发行版。<br>Arch Linux 将简洁定义为：避免任何不必要的添加、修改和复杂增加。它提供的软件都来自原始开发者(上游)，仅进行和发行版(下游)相关的最小修改。<br>Arch向GNU/Linux用户提供了许多新特性，包括systemd初始化系统、现代的文件系统（Ext2/3/4、Reiser、XFS、JFS、BTRFS）、LVM2/EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核（目前是4.4）。</p><p><a href="http://mirrors.163.com/archlinux/iso/" target="_blank" rel="noopener">速度不错的国内镜像</a></p><h3 id="基本系统安装"><a href="#基本系统安装" class="headerlink" title="基本系统安装"></a>基本系统安装</h3><h4 id="关于分区"><a href="#关于分区" class="headerlink" title="关于分区"></a>关于分区</h4><p>本想使用GPT分区表，查了一些资料，为了使这个U盘在 BIOS 和 UEFI 电脑上都能用，需要创建一个BIOS boot分区，2M大小足够，位置尽量靠前。 多系统的话还要创建一个200M的 EFI System Partition(ESP)分区。但是有大神说GPT中的NTFS分区在Win7下不认（感觉Win8、Win10应该可以） 想用这个分区作为常规U盘使用就不行了，只好再回到MBR分区表。如果是移动硬盘用 GPT 应该没有问题。</p><p>所以仍然使用MBR分区，所以就要用<strong>fdisk</strong>或者cfdisk了，不能使用支持GPT的gdisk和cgdisk，4k对齐也是自动完成。<br>为了在安装过程中能更好认清我的分区，我先在Windows下用DiskGenius进行了分区，只可惜不支持ext4，之后再格式化一下就好。16G的U盘分区规划如下：</p><blockquote><p>第一个分区 5G的ntfs分区，为了这个U盘还能进行一些拷拷文件的工作（非必须，看具体情况来吧)<br>  第二个分区 100M的分区 /boot；<br>  第三个分区 6G的分区，作为ArchLinux根分区；<br>  第四个分区 4G的分区，作为 /home；</p></blockquote><h4 id="先刻录一个U盘启动盘吧"><a href="#先刻录一个U盘启动盘吧" class="headerlink" title="先刻录一个U盘启动盘吧"></a>先刻录一个U盘启动盘吧</h4><p>开始用ultraISO刻了几次都无法启动（原因是ultraISO不分青红皂白的写了syslinux引导进去），看来Arch真的是与众不同，于是用了烧录树莓派的Win32 Disk Image，成功。同理，在Linux下用dd命令应该也是可以的。<br>启动，进入Arch Linux安装界面，选择合适的版本，直接就进root了！这时可以插上你要安装的U盘。</p><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>启动U盘是 /dev/sdb，目标U盘就成了 /dev/sdc。下面是在Linux显示的分区，并不是我的优盘，网上找来的,仅供参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># fdisk /dev/sdc</span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 8022 MB, 8022982656 bytes, 15669888 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device Boot Start End Blocks Id System</span><br><span class="line">/dev/sdc1 2048 1804287 901120 7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sdc2 * 1804288 2009087 102400 83 Linux</span><br><span class="line">/dev/sdc3 2009088 10405887 4198400 83 Linux</span><br><span class="line">/dev/sdc4 10405888 15669887 2632000 83 Linux</span><br></pre></td></tr></table></figure></p><h5 id="在root下直接重新格式化为ext4"><a href="#在root下直接重新格式化为ext4" class="headerlink" title="在root下直接重新格式化为ext4"></a>在root下直接重新格式化为ext4</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mkfs.ntfs -f /dev/sdc1 -L f004-c</span><br><span class="line"># mkfs.ext4 -b 4096 -m 0 -i 16384 -O &apos;^has_journal&apos; /dev/sdc2 -L f004-boot</span><br><span class="line"># mkfs.ext4 -b 4096 -m 1 -i 16384 -O &apos;^has_journal&apos; /dev/sdc3 -L f004-a</span><br><span class="line"># mkfs.ext4 -b 4096 -m 0 -i 16384 -O &apos;^has_journal&apos; /dev/sdc4 -L f004-b</span><br></pre></td></tr></table></figure><p>-b 4096 是每个存储块的大小。 -m 1 是指定 root 保留空间为 1%，home 区就不留了。 -i 16384 是指定多少字节的数据设置一个 inode 节点， 增加它的值会减少 inode 的总数，占用的空间会少一些， 相应的能够存储的文件数量也减少了，这个稍微注意一下就好，一般都够用。 -O ‘^has_journal’ 是关掉文件系统日志，有点小危险。</p><h5 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/sdc3 /mnt      //没有根什么也挂不上啊</span><br><span class="line"># mkdir /mnt/boot</span><br><span class="line"># mount /dev/sdc2 /mnt/boot</span><br><span class="line"># mkdir /mnt/home</span><br><span class="line"># mount /dev/sdc4 /mnt/home</span><br></pre></td></tr></table></figure><blockquote><p>用df -h检查一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//显示</span><br><span class="line"># ext4</span><br><span class="line">Filesystem Size Used Avail Use% Mounted on</span><br><span class="line">/dev/sdc3 5.9G 8.1M 6.0G 1% /mnt</span><br><span class="line">/dev/sdc2 96M 48K 96M 1% /mnt</span><br><span class="line">/dev/sdc4 3.8G 3.8M 3.9G 1% /mnt/home</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="基本系统安装-1"><a href="#基本系统安装-1" class="headerlink" title="基本系统安装"></a>基本系统安装</h4><p>只讲一些必须的步骤</p><ul><li>默认网络连接：<br>  dhcpcd（有线连接）</li><li><p>网络连接：<br>  无线连接：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wifi-menu</span><br></pre></td></tr></table></figure><p>  ADSL 宽带连接：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pppoe-setup   #配置</span><br><span class="line"># systemctl start adsl  #连接</span><br></pre></td></tr></table></figure></li></ul><h5 id="pacman-软件仓库镜像服务器："><a href="#pacman-软件仓库镜像服务器：" class="headerlink" title="pacman 软件仓库镜像服务器："></a>pacman 软件仓库镜像服务器：</h5><p>选择地理位置最为接近的镜像服务器以获得更高的下载速度。pacman优先使用位置靠前的镜像地址。将选定的镜像地址置于最前以便 pacman 使用。<br>注意：该配置不仅会应用到安装环境，也会应用至新系统中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nano /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure></p><p>更新本地数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -Syy</span><br></pre></td></tr></table></figure></p><p>查看中国大陆的镜像服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 1 &apos;China&apos; /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure></p><p>选择所有的中国大陆的镜像服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -i &apos;/Score/&#123;/China/!&#123;n;s/^/#/&#125;&#125;&apos; /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure></p><h5 id="安装基础系统"><a href="#安装基础系统" class="headerlink" title="安装基础系统"></a>安装基础系统</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacstrap -i /mnt base base-devel</span><br></pre></td></tr></table></figure><p>提示共141个软件包，需要下载220.37M内容，安装完成后是 710.09M。</p><blockquote><p>需要等待一会，休息一下</p></blockquote><h5 id="生成fstab"><a href="#生成fstab" class="headerlink" title="生成fstab"></a>生成fstab</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fstab： # genfstab -p -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>然后更改fstab（系统默认一般就比较好了，不优化也行）。</p><h5 id="下面的操作可以在-chroot-环境下运行"><a href="#下面的操作可以在-chroot-环境下运行" class="headerlink" title="下面的操作可以在 chroot 环境下运行"></a>下面的操作可以在 chroot 环境下运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># arch-chroot /mnt</span><br></pre></td></tr></table></figure><h5 id="设置-hostname"><a href="#设置-hostname" class="headerlink" title="设置 hostname"></a>设置 hostname</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;nisuiyi&apos; &gt; /etc/hostname 。</span><br></pre></td></tr></table></figure><h5 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><h5 id="新建-etc-locale-conf-内容为"><a href="#新建-etc-locale-conf-内容为" class="headerlink" title="新建 /etc/locale.conf 内容为"></a>新建 /etc/locale.conf 内容为</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANG=&apos;en_US.UTF-8&apos;</span><br><span class="line">LC_COLLATE=&apos;C&apos;</span><br><span class="line">LC_MESSAGES=&apos;C&apos;</span><br></pre></td></tr></table></figure><h5 id="编辑-etc-locale-gen"><a href="#编辑-etc-locale-gen" class="headerlink" title="编辑 /etc/locale.gen"></a>编辑 /etc/locale.gen</h5><p>取消 en_US.UTF-8, zh_CN.UTF-8, zh_TW.UTF-8 前面的注释，然后执行 locale-gen 命令。</p><h5 id="更改-root-密码"><a href="#更改-root-密码" class="headerlink" title="更改 root 密码"></a>更改 root 密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><h4 id="安装-Grub-引导系统"><a href="#安装-Grub-引导系统" class="headerlink" title="安装 Grub 引导系统"></a>安装 Grub 引导系统</h4><p>仍然在chroot环境中操作。编辑 /etc/mkinitcpio.conf，检查HOOKS段，让 block 参数紧挨着 udev 参数之后（早一点加载），然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkinitcpio -p linux</span><br></pre></td></tr></table></figure></p><p>生成img文件。</p><p><strong>使用pacman安装GRUB</strong>重要！</p><p>GRUB<br>BIOS：<br>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S grub os-prober</span><br></pre></td></tr></table></figure></p><p>格式: grub-install –recheck /dev/&lt;目标磁盘&gt;,无论是32位还是64位系统，都是使用–target=i386-pc参数，–no-floppy是不检查软驱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># grub-install --target=i386-pc --recheck --boot-directory=/boot --no-floppy /dev/sdc</span><br></pre></td></tr></table></figure></p><p>生成grub:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"># grep &apos;set=root&apos; /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><p>确保:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># blkid /dev/sdc2</span><br></pre></td></tr></table></figure></p><p>UEFI：注意，仅UEFI使用这种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S dosfstools grub efibootmgr</span><br><span class="line"># grub-install --target=x86_64-efi --efi-directory=&lt;EFI 分区挂载点&gt; --bootloader-id=arch_grub --recheck</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><h4 id="退出收工"><a href="#退出收工" class="headerlink" title="退出收工"></a>退出收工</h4><ul><li>退出chroot，Ctrl + d 即可。</li><li><p>umount</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># umount /dev/sdc3</span><br><span class="line"># umount /dev/sdc2</span><br><span class="line"># umount /dev/sdc4</span><br></pre></td></tr></table></figure></li><li><p>重启reboot</p></li></ul><p>拔下启动U盘，用你的Arch Linux优盘启动吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;如果只是想单纯的安装Arch Linux&lt;/strong&gt;&lt;br&gt;请移步&lt;a href=&quot;http://bbs.archlinuxcn.org/viewtopic.php?id=1037&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arc
      
    
    </summary>
    
      <category term="折腾笔记" scheme="http://bwael.com/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="折腾笔记" scheme="http://bwael.com/tags/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://bwael.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【算法学习笔记】贪心算法背包问题</title>
    <link href="http://bwael.com/2016/04/03/ALG-4/"/>
    <id>http://bwael.com/2016/04/03/ALG-4/</id>
    <published>2016-04-03T05:59:11.000Z</published>
    <updated>2016-04-03T14:42:18.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>贪心算法是我们在《计算机算法设计与分析》这门课中学习的几种重要的算法之一，顾名思义，贪心算法总是做出在当前看来最好的选择。也就是该算法并不从整体最优考虑，它所作出的选择只是在某种意义上的从局部的最优选择，寻找到解决问题的次优解的方法。虽然我们希望贪心算法得到的最终结果也是整体最优的，但是在某些情况下，该算法得到的只是问题的最优解的近似。</p></blockquote><h3 id="贪心算法思路"><a href="#贪心算法思路" class="headerlink" title="贪心算法思路"></a>贪心算法思路</h3><p>————问题通常以自顶向下的方式进行，以迭代的方式做出相继的贪心选择，每做一次贪心选择就将所求问题简化为规模更小的子问题。当达到算法中的某一步（不可简化的子问题）不能再继续前进时，算法停止。<br>该算法存在的短板：</p><ol><li>不能保证求得的最后解是最佳的；</li><li>不能用来求最大或最小解问题；</li><li>只能求满足某些约束条件的可行解的范围。</li></ol><blockquote><p>实现该算法的过程：<br> Begin 从问题的某一初始解出发；<br> while 能朝给定总目标前进一步<br> do 求出可行解的一个解元素；<br> end 由所有解元素组合成问题的一个可行解</p></blockquote><h3 id="背包问题描述"><a href="#背包问题描述" class="headerlink" title="背包问题描述"></a>背包问题描述</h3><ol><li>0-1背包问题：给定n种物品和一个背包。物品i的重量是Wi，其价值为Vi，背包的容量为C。应如何选择装入背包的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有2种选择，即装入背包（1）或不装入背包（0）。不能将物品i装入背包多次，也不能只装入部分的物品i。</li><li>背包问题：与0-1背包问题类似，所不同的是在选择物品i装入背包时，可以选择物品i的一部分，而不一定要全部装入背包，1≤i≤n。背包问题可以定义如下：给出n个大小为w1,w2,…,wn,值为v1,v2,…,vn的项目，并设背包容量为C，要找到非负实数x1,x2,…,xn, 使和在约束下最大。</li></ol><h3 id="贪心算法解决背包问题有几种策略："><a href="#贪心算法解决背包问题有几种策略：" class="headerlink" title="贪心算法解决背包问题有几种策略："></a>贪心算法解决背包问题有几种策略：</h3><h4 id="i-一种贪婪准则为："><a href="#i-一种贪婪准则为：" class="headerlink" title="(i) 一种贪婪准则为："></a>(i) 一种贪婪准则为：</h4><p>从剩余的物品中，选出可以装入背包的价值最大的物品，利用这种规则，价值最大的物品首先被装入（假设有足够容量），然后是下一个价值最大的物品，如此继续下去。这种策略不能保证得到最优解。例如，考虑n=2, w=[100,10,10], v =[20,15,15], c = 105。当利用价值贪婪准则时，获得的解为x= [ 1 , 0 , 0 ]，这种方案的总价值为2 0。而最优解为[ 0 , 1 , 1 ]，其总价值为3 0。</p><h4 id="ii-另一种方案是重量贪婪准则是："><a href="#ii-另一种方案是重量贪婪准则是：" class="headerlink" title="(ii) 另一种方案是重量贪婪准则是："></a>(ii) 另一种方案是重量贪婪准则是：</h4><p>从剩下的物品中选择可装入背包的重量最小的物品。虽然这种规则对于前面的例子能产生最优解，但在一般情况下则不一定能得到最优解。考虑n= 2 ,w=[10,20], v=[5,100], c= 2 5。当利用重量贪婪策略时，获得的解为x =[1,0], 比最优解[ 0 , 1 ]要差。</p><h4 id="iii-还有一种贪婪准则，就是我们教材上提到的："><a href="#iii-还有一种贪婪准则，就是我们教材上提到的：" class="headerlink" title="(iii) 还有一种贪婪准则，就是我们教材上提到的："></a>(iii) 还有一种贪婪准则，就是我们教材上提到的：</h4><p>认为，每一项计算yi=vi/si,即该项值和大小的比，再按比值的降序来排序，从第一项开始装背包，然后是第二项，依次类推，尽可能的多放，直到装满背包。有的参考资料也称为价值密度pi/wi贪婪算法。这种策略也不能保证得到最优解。利用此策略试解n= 3 ,w=[20,15,15], v=[40,25,25], c=30 时的最优解。虽然按pi /wi 非递减的次序装入物品不能保证得到最优解，但它是一个直觉上近似的解。而且这是解决普通背包问题的最优解，因为在选择物品i装入背包时，可以选择物品i的一部分，而不一定要全部装入背包，1≤i≤n。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> c = <span class="number">10</span>;    <span class="comment">//背包容量</span></span><br><span class="line"><span class="keyword">float</span> w[] = &#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;    <span class="comment">//物品质量</span></span><br><span class="line"><span class="keyword">float</span> v[] = &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;    <span class="comment">//物品价值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(w)/<span class="keyword">sizeof</span>(w[<span class="number">0</span>]) - <span class="number">1</span> ;    <span class="comment">//物品品种数</span></span><br><span class="line"><span class="keyword">float</span> x[n+<span class="number">1</span>];    <span class="comment">//背包中某种物品的质量（结果）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">float</span> v[],<span class="keyword">float</span> w[])</span>    <span class="comment">//对物品的单位价值排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i]/w[i] &lt; v[j]/w[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span> tempv = v[i];</span><br><span class="line">                v[i] = v[j];</span><br><span class="line">                v[j]=tempv;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> tempw = w[i];</span><br><span class="line">                w[i] = w[j];</span><br><span class="line">                w[j] = tempw;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">float</span> v[],<span class="keyword">float</span> w[])</span>    <span class="comment">//输出排序后结果</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"v:"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;v[i]&lt;&lt;<span class="string">"    "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"w:"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;w[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Knapsack</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">float</span> c,<span class="keyword">float</span> v[],<span class="keyword">float</span> w[],<span class="keyword">float</span> x[])</span>    <span class="comment">//贪心选择</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sort(n,v,w);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//float c = M;</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">if</span>(w[i] &gt; c)</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         x[i] = <span class="number">1</span>;</span><br><span class="line">         c-=w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= n)</span><br><span class="line">        x[i]= c/w[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Knapsack(n,c,v,w,x);</span><br><span class="line">    printSort(n,v,w);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The best answer is:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; v[j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x[i] * w[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;贪心算法是我们在《计算机算法设计与分析》这门课中学习的几种重要的算法之一，顾名思义，贪心算法总是做出在当前看来最好的选择。也就是该算法并不从整体最优考虑，它所作出的选择只是在某种意义上的从局部的最优选择，寻找到解决问题的次优解的方法。虽然我们希望贪
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://bwael.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>转：【算法学习笔记】动态规划0—1背包问题</title>
    <link href="http://bwael.com/2016/03/24/ALG-3/"/>
    <id>http://bwael.com/2016/03/24/ALG-3/</id>
    <published>2016-03-24T01:21:50.000Z</published>
    <updated>2016-03-24T04:33:41.261Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>给定n种物品和一背包。物品i的重量是wi，其价值为vi，背包的容量为C。问应如何选择装入背包的物品，使得装<br>入背包中物品的总价值最大?</p><blockquote><p>对于一种物品，要么装入背包，要么不装。所以对于一种物品的装入状态可以取0和1.我们设物品i的装入状态为xi,xi∈ (0,1)，此问题称为0-11背包问题。</p></blockquote><h4 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h4><p><strong>数据：物品个数n=5,物品重量w[n]={0，2，2，6，5，4},物品价值V[n]={0，6，3，5，4，6},<br>（第0位，置为0，不参与计算，只是便于与后面的下标进行统一，无特别用处，也可不这么处理。）总重量c=10.</strong><br>背包的最大容量为10，那么在设置数组m大小时，可以设行列值为6和11，那么，对于m(i,j)就表示可选物品为i…n背包容量为j(总重量)时背包中所放物品的最大价值。</p><p><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/64570543.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/27894142.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/50858835.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/1383357.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/64404941.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/97461564.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/92409505.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/78719221.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/12275615.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/74489686.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/47520646.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/2659508.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/74515954.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/4158651.jpg" alt=""><br><img src="http://7xrite.com1.z0.glb.clouddn.com/16-3-24/34478495.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">10</span>;             <span class="comment">//背包的容量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> w[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;<span class="comment">//物品的重量，其中0号位置不使用 。</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> v[] = &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;<span class="comment">//物品对应的待加，0号位置置为空。</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(w)/<span class="keyword">sizeof</span>(w[<span class="number">0</span>]) - <span class="number">1</span> ; <span class="comment">//n为物品的个数</span></span><br><span class="line"><span class="keyword">int</span> x[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">package0_1</span><span class="params">(<span class="keyword">int</span> m[][<span class="number">11</span>],<span class="keyword">const</span> <span class="keyword">int</span> w[],<span class="keyword">const</span> <span class="keyword">int</span> v[],<span class="keyword">const</span> <span class="keyword">int</span> n)</span><span class="comment">//n代表物品的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//采用从底到顶的顺序来设置m[i][j]的值</span></span><br><span class="line">    <span class="comment">//首先放w[n]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c; j++)</span><br><span class="line">        <span class="keyword">if</span>(j &lt; w[n]) m[n][j] = <span class="number">0</span>;     <span class="comment">//j小于w[n],所对应的值设为0，否则就为可以放置</span></span><br><span class="line">        <span class="keyword">else</span>         m[n][j] = v[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对剩下的n-1个物品进行放置。</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c; j++)</span><br><span class="line">            <span class="keyword">if</span>(j &lt; w[i])</span><br><span class="line">                m[i][j] = m[i+<span class="number">1</span>][j];<span class="comment">//如果j &lt; w[i]则，当前位置就不能放置，它等于上一个位置的值。</span></span><br><span class="line">    <span class="comment">//否则，就比较到底是放置之后的值大，还是不放置的值大，选择其中较大者。</span></span><br><span class="line">            <span class="keyword">else</span>         m[i][j] = m[i+<span class="number">1</span>][j] &gt; m[i+<span class="number">1</span>][j-w[i]] + v[i]?</span><br><span class="line">                                       m[i+<span class="number">1</span>][j] : m[i+<span class="number">1</span>][j-w[i]] + v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">answer</span><span class="params">(<span class="keyword">int</span> m[][<span class="number">11</span>],<span class="keyword">const</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(m[i][j] == m[i+<span class="number">1</span>][j]) x[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x[i] = <span class="number">1</span>;</span><br><span class="line">            j = j - w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    x[n] = m[i][j] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">6</span>][<span class="number">11</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    package0_1(m,w,v,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10</span>; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d "</span>,m[i][j]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    answer(m,n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The best answer is:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/dapengbusi/article/details/7463968" target="_blank" rel="noopener">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h4&gt;&lt;p&gt;给定n种物品和一背包。物品i的重量是wi，其价值为vi，背包的容量为C。问应如何选择装入背包的物品，使得装&lt;br&gt;入
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://bwael.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记03----运算符与表达式、序列</title>
    <link href="http://bwael.com/2016/03/22/pynote03/"/>
    <id>http://bwael.com/2016/03/22/pynote03/</id>
    <published>2016-03-21T16:10:59.000Z</published>
    <updated>2016-07-06T01:15:54.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><h3 id="1-在解释器总执行运算"><a href="#1-在解释器总执行运算" class="headerlink" title="1.在解释器总执行运算"></a>1.在解释器总执行运算</h3><p>在Python的解释器中，你可以交互地使用解释器来进行计算。<br>例如输入:<br>`</p><blockquote><blockquote><blockquote><p>222+222<br>`</p></blockquote></blockquote></blockquote><p>解释器会直接显示结果：<br><code>&gt;&gt;&gt;444</code></p><h3 id="2-运算符及用法"><a href="#2-运算符及用法" class="headerlink" title="2.运算符及用法"></a>2.运算符及用法</h3><p>运算符    名称    说明    例子</p><p><strong>与其他语言基本一致</strong></p><h3 id="3-运算符的优先级（由低到高）"><a href="#3-运算符的优先级（由低到高）" class="headerlink" title="3. 运算符的优先级（由低到高）"></a>3. 运算符的优先级（由低到高）</h3><p>默认地，运算符优先级表决定了哪个运算符在别的运算符之前计算。</p><p>运算符    描述</p><ul><li>lambda    Lambda表达式</li><li>or    布尔“或”</li><li>and    布尔“与”</li><li>not x    布尔“非”</li><li>in，not in    成员测试</li><li>is，is not    同一性测试</li><li>&lt;，&lt;=，&gt;，&gt;=，!=，==    比较</li><li>|    按位或</li><li>^    按位异或</li><li>&amp;    按位与</li><li>&lt;&lt;，&gt;&gt;    移位</li><li>+，-    加法与减法</li><li>*，/，%    乘法、除法与取余</li><li>+x，-x    正负号</li><li>~x    按位翻转</li><li>**    指数</li><li>x.attribute    属性参考</li><li>x[index]    下标</li><li>x[index:index]    寻址段</li><li>f(arguments…)    函数调用</li><li>(experession,…)    绑定或元组显示</li><li>[expression,…]    列表显示</li><li>{key:datum,…}    字典显示</li><li>‘expression,…’    字符串转换然而，如果你想要改变它们的计算顺序，你得使用圆括号。</li></ul><blockquote></blockquote><p>例如:&gt;&gt;&gt;3*(3+2)</p><blockquote></blockquote><p>输出结果为&gt;&gt;&gt;15</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"></span><br><span class="line">a=<span class="number">40</span>  </span><br><span class="line">b=<span class="number">60</span>  </span><br><span class="line">area=a*b  </span><br><span class="line">print(<span class="string">"Area is"</span>,area)</span><br></pre></td></tr></table></figure><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><ul><li>在Python中最基本的数据结构是序列，序列中的每个元素被分配了一个序号——即元素的位置，叫做索引。第一个索引是0，第二个是1，而倒数第一个元素可以标记为-1，倒数第二个为-2以此类推。</li><li>序列的元素可以是之前讲的所有基础数据类型，也可以是另一个序列，还可以是之后我们将要将的对象。</li><li>序列最常用的有两类，元组(tuple)和列表(list)。两者的区别是，列表可以修改，而元组不行。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student1=(<span class="string">"霸天虎"</span>,<span class="string">"男"</span>,<span class="number">19</span>)      <span class="comment">#student1就是元组  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student1                         <span class="comment">#在解释器中输入变量名称，可以显示变量值  </span></span><br><span class="line">(<span class="string">'霸天虎'</span>, <span class="string">'男'</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student2=[<span class="string">"汤姆猫"</span>,<span class="string">"男"</span>,<span class="number">22</span>]      <span class="comment">#student2就是列表  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student2  </span><br><span class="line">[<span class="string">'汤姆猫'</span>, <span class="string">'男'</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student3=(<span class="string">"王尼玛"</span>,<span class="string">"男"</span>,<span class="string">"未知"</span>,[<span class="string">"脑袋大"</span>,<span class="string">"脖子短"</span>,<span class="string">"屁股圆"</span>])   <span class="comment">#在序列中的元素也是序列  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student3  </span><br><span class="line">(<span class="string">'王尼玛'</span>, <span class="string">'男'</span>, <span class="string">'未知'</span>, [<span class="string">'脑袋大'</span>, <span class="string">'脖子短'</span>, <span class="string">'屁股圆'</span>])</span><br></pre></td></tr></table></figure><h3 id="序列的操作"><a href="#序列的操作" class="headerlink" title="序列的操作"></a>序列的操作</h3><p>1.索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student1[<span class="number">0</span>]            <span class="comment">#显示元组student1的第一个元素  </span></span><br><span class="line"><span class="string">'霸天虎'</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student1[<span class="number">-1</span>]           <span class="comment">#显示元组student1的最后一个元素  </span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student3[<span class="number">-1</span>][<span class="number">0</span>]        <span class="comment">#显示元组student3最后一个元组元素中的第一个元素  </span></span><br><span class="line"><span class="string">'脑袋大'</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student3[<span class="number">-1</span>][<span class="number">0</span>][<span class="number">0</span>]     <span class="comment">#显示元组student3最后一个元组元素中的第一个元素字符串中的第一个字符  </span></span><br><span class="line"><span class="string">'脑'</span></span><br></pre></td></tr></table></figure><p>1.1分片</p><p>使用索引访问的是单个元素，而使用分片访问的是一坨元素<br>基本样式[下限:上限:步长]，步长省略默认步长为1.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">0</span>:<span class="number">3</span>]                       <span class="comment">#显示从第一个（包括第一个）到第三个（包括第三个）之间的元素，类似for（int i=0，i&lt;3,i++）  </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">8</span>:<span class="number">11</span>]                      <span class="comment">#显示第9个到第11个元素，因为没有第11个，所以只输出第9个元素  </span></span><br><span class="line">[<span class="number">9</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">-3</span>:<span class="number">-1</span>]                     <span class="comment">#显示末第三到末第一个元素  </span></span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">-1</span>:<span class="number">-3</span>]                     <span class="comment">#如果顺序写反，不会输出元素  </span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[:<span class="number">3</span>]                        <span class="comment">#如果索引空缺，则默认索引两端  </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">-3</span>:]  </span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">7</span>:]  </span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]                     <span class="comment">#显示第1个到第5个元素，且步长为2  </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[::<span class="number">3</span>]                       <span class="comment">#步长3，从左向右输出  </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[::<span class="number">-1</span>]                      <span class="comment">#步长为1，从右向左输出  </span></span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>2.赋值</p><p>元组不可修改，而列表可以修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student1[<span class="number">0</span>]=<span class="string">"擎天柱"</span>                         <span class="comment">#给元组student1第一个元素重新赋值，结果报错  </span></span><br><span class="line">Traceback (most recent call last):  </span><br><span class="line">  File <span class="string">"&lt;pyshell#22&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;  </span><br><span class="line">    student1[<span class="number">0</span>]=<span class="string">"擎天柱"</span>  </span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student2[<span class="number">0</span>]=<span class="string">"纸巾"</span>                           <span class="comment">#给列表student2第一个元素复制，没有问题  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student2  </span><br><span class="line">[<span class="string">'纸巾'</span>, <span class="string">'男'</span>, <span class="number">22</span>]  </span><br><span class="line"><span class="number">3.</span>序列相加与乘法</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">"王小明"</span>]+[<span class="string">"男"</span>]                            <span class="comment">#序列的加法  </span></span><br><span class="line">[<span class="string">'王小明'</span>, <span class="string">'男'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">"王大头"</span>,<span class="string">"男"</span>]*<span class="number">11</span>                         <span class="comment">#序列的乘法  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a  </span><br><span class="line">[<span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>, <span class="string">'王大头'</span>, <span class="string">'男'</span>]</span><br></pre></td></tr></table></figure><p>4.序列的循环调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student3=(<span class="string">"王尼玛"</span>,<span class="string">"男"</span>,<span class="string">"未知"</span>,[<span class="string">"脑袋大"</span>,<span class="string">"脖子短"</span>,<span class="string">"屁股圆"</span>])  </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> student3:  </span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></p><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">王尼玛  </span><br><span class="line">男  </span><br><span class="line">未知  </span><br><span class="line">[<span class="string">'脑袋大'</span>, <span class="string">'脖子短'</span>, <span class="string">'屁股圆'</span>]</span><br></pre></td></tr></table></figure><h3 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h3><p>1.词典的定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dic = &#123;<span class="string">'tom'</span>:<span class="number">11</span>, <span class="string">'sam'</span>:<span class="number">57</span>,<span class="string">'lily'</span>:<span class="number">100</span>&#125;          <span class="comment">#tom是键，11是值</span></span><br></pre></td></tr></table></figure></p><p>词典和表类似的地方，是包含有多个元素，每个元素以逗号分隔。但词典的元素包含有两部分，键和值，常见的是以字符串来表示键，也可以使用数字或者真值来表示键（不可变的对象可以作为键）。值可以是任意对象。键和值两者一一对应。</p><p>与列表和元组不同的是，词典的元素没有顺序。你不能通过下标引用元素。词典是通过键来引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'tom'</span>:<span class="number">11</span>, <span class="string">'sam'</span>:<span class="number">57</span>,<span class="string">'lily'</span>:<span class="number">100</span>&#125;  </span><br><span class="line">print(dic[<span class="string">'tom'</span>])  </span><br><span class="line">dic[<span class="string">'tom'</span>] = <span class="number">30</span>  </span><br><span class="line">dic[<span class="string">'王尼玛'</span>]=<span class="number">250</span>                                 <span class="comment">#可以通过这种形式向词典中添加元素  </span></span><br><span class="line">  </span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>  </span><br><span class="line">&#123;<span class="string">'sam'</span>: <span class="number">57</span>, <span class="string">'王尼玛'</span>: <span class="number">250</span>, <span class="string">'tom'</span>: <span class="number">30</span>, <span class="string">'lily'</span>: <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure><p>2.词典的循环调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'tom'</span>:<span class="number">11</span>, <span class="string">'sam'</span>:<span class="number">57</span>,<span class="string">'lily'</span>:<span class="number">100</span>&#125;  </span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:  </span><br><span class="line">    print(key,dic[key])</span><br></pre></td></tr></table></figure></p><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lily <span class="number">100</span>  </span><br><span class="line">sam <span class="number">57</span>  </span><br><span class="line">tom <span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>小提示：</strong></p><ol><li>在初始化序列时，单个元素的排列仍是排列，单个元素的元组不是元祖。<br><code>python</code><blockquote><blockquote><blockquote><p>(“dd”)<br>‘dd’                             #不是元组<br>[“dd”]<br>[‘dd’]  </p></blockquote></blockquote></blockquote></li><li><p>其实tuple、list是python中的两个”类”。至于什么是类，之后我会提到</p></li><li><p>小括号是元组，中括号是列表，大括号是词典</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运算符与表达式&quot;&gt;&lt;a href=&quot;#运算符与表达式&quot; class=&quot;headerlink&quot; title=&quot;运算符与表达式&quot;&gt;&lt;/a&gt;运算符与表达式&lt;/h2&gt;&lt;h3 id=&quot;1-在解释器总执行运算&quot;&gt;&lt;a href=&quot;#1-在解释器总执行运算&quot; class=&quot;he
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记02----基本数据类型</title>
    <link href="http://bwael.com/2016/03/22/pynote02/"/>
    <id>http://bwael.com/2016/03/22/pynote02/</id>
    <published>2016-03-21T16:10:50.000Z</published>
    <updated>2016-07-06T01:17:59.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Python中的数"><a href="#1-Python中的数" class="headerlink" title="1.Python中的数"></a>1.Python中的数</h3><p>在Python中有4种类型的数——整数、长整数、浮点数和复数。<br>a) 2是一个整数的例子。<br>b) 长整数不过是大一些的整数。<br>c) 3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。<br>d) (-5+4j)和(2.3-4.6j)是复数的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">3.53E-4</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b                       <span class="comment">#在解释器中直接输入变量名可以输出变量中的值  </span></span><br><span class="line"><span class="number">0.000353</span></span><br></pre></td></tr></table></figure></p><h3 id="2-Python中的字符串"><a href="#2-Python中的字符串" class="headerlink" title="2.Python中的字符串"></a>2.Python中的字符串</h3><p>字符串是字符的序列。字符串基本上就是一组单词。</p><p>a）  可以使用单引号、双引号、三个引号来指示字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello World"</span>  </span><br><span class="line"><span class="string">'Hello World'</span>  </span><br><span class="line"><span class="string">"""Hello World"""</span>  </span><br><span class="line"><span class="comment">#单引号双引号作用相同，都可以保存字符串中的空格  </span></span><br><span class="line"><span class="comment">#三个引号除了空格以外，还可以保存换行</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">"王尼玛"</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>]                <span class="comment">#通过序号0可以调用字符串第一个字符  </span></span><br><span class="line"><span class="string">'王'</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">-1</span>]               <span class="comment">#通过需要-1可以调用字符串末第一个字符  </span></span><br><span class="line"><span class="string">'玛'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"王蜜桃"</span>[<span class="number">-1</span>]           <span class="comment">#直接调用字符串末第一个字符  </span></span><br><span class="line"><span class="string">'桃'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">"hello"</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">"world"</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=a+b                  <span class="comment">#字符串加法  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c  </span><br><span class="line"><span class="string">'helloworld'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"python "</span>*<span class="number">11</span>             <span class="comment">#字符串的乘法  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a  </span><br><span class="line"><span class="string">'python python python python python python python python python python python '</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">"python"</span>*<span class="number">11</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"p"</span> <span class="keyword">in</span> a               <span class="comment">#判断p是否在a中  </span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>b)   转义符。 在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：<br>转义字符    描述<br>(在行尾时)    续行符<br>\    反斜杠符号<br>\’    单引号<br>\”    双引号<br>\a    响铃<br>\b    退格(Backspace)<br>\e    转义<br>\000    空<br>\n    换行<br>\v    纵向制表符<br>\t    横向制表符<br>\r    回车<br>\f    换页<br>\oyy    八进制数yy代表的字符，例如：\o12代表换行<br>\xyy    十进制数yy代表的字符，例如：\x0a代表换行<br>\other    其它的字符以普通格式输出 有时我们并不想让转义字符生效，我们只想显示字符串原来的意思，这就要用r和R来定义原始字符串。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>（<span class="string">r'\t\r'</span>）</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\t\r</span><br></pre></td></tr></table></figure></p><p>c) Unicode字符串 Unicode是书写国际文本的标准方法。如果你想要用你的母语如北印度语或阿拉伯语写文本，那么你需要有一个支持Unicode的编辑器。类似地，Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u”This is a Unicode string.”。</p><h3 id="3-Python中的变量"><a href="#3-Python中的变量" class="headerlink" title="3.Python中的变量"></a>3.Python中的变量</h3><p>   Python中的变量不需要声明就可以使用。<br>   比如可以输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"测试"</span></span><br></pre></td></tr></table></figure></p><p>那么内存中就会有一个变量a，它的值是”测试”，变量的类型是字符串类型。<br>我们可以通过type（）来查询变量的类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tpye(a)</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>可以再次给a赋其他类型的数值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>小提示：<br>1.字符串是不可变的！一旦定义了字符串，这个字符串中的内容就不能更改啦！</p><p>2.Python中没有char类型！</p><p>3.多个字符串放在一起会自动连接！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你"</span><span class="string">"好"</span>)  </span><br><span class="line">输出结果是 你好</span><br></pre></td></tr></table></figure></p><p>4.Python是大小写敏感的，标识符的明明要求与C语言相同。标识符的第一个字母必须是字母或者下划线”_”，其他位置的字母可以是字母、数字、下划线。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Python中的数&quot;&gt;&lt;a href=&quot;#1-Python中的数&quot; class=&quot;headerlink&quot; title=&quot;1.Python中的数&quot;&gt;&lt;/a&gt;1.Python中的数&lt;/h3&gt;&lt;p&gt;在Python中有4种类型的数——整数、长整数、浮点数和复数。&lt;br
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【OS学习笔记】进程同步与通信</title>
    <link href="http://bwael.com/2016/03/21/OSnote-3/"/>
    <id>http://bwael.com/2016/03/21/OSnote-3/</id>
    <published>2016-03-21T08:10:40.000Z</published>
    <updated>2016-03-28T15:01:40.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程同步与通信"><a href="#进程同步与通信" class="headerlink" title="进程同步与通信"></a>进程同步与通信</h2><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><h4 id="并发进程的关系"><a href="#并发进程的关系" class="headerlink" title="并发进程的关系"></a>并发进程的关系</h4><ol><li>间接制约关系：一组（两个或多个）进程共享一中资源，且该资源一次仅允许一个进程使用。</li><li>直接制约关系：几个进程相互协作完成一项任务，这些进程要求必须按照规定好的顺序依次执行。<h4 id="进程的互斥与同步"><a href="#进程的互斥与同步" class="headerlink" title="进程的互斥与同步"></a>进程的互斥与同步</h4></li></ol><ul><li>1.进程同步：若干进程为为完成一个共同的任务而互相合作等待对方的消息的协调关系称为进程同步。</li><li>2.进程互斥：进程之间争夺互斥资源引起的。</li><li>2.1 饥饿：一个就绪进程所申请的资源总是被优先于自己的其他进程占有，而始终处于不能被调度执行的状态，这种情况称为饥饿。</li><li>2.2 <strong>死锁</strong>：一个进程集合中，已经占有部分资源的两个或两个以上的进程，还需要获得已被其他进程占有的资源才能继续执行；有可能出现某些进程相互之间都在等待对方的资源且无法运行的局面，即在进程集合中的这些进程处于永远的阻塞状态，这就是死锁。</li><li>3.二者相似之处<br><strong>进程互斥实质上是进程同步的一种特殊情况。</strong></li><li>4.进程同步与进程互斥的区别：~</li></ul><h4 id="临界资源与临界区"><a href="#临界资源与临界区" class="headerlink" title="临界资源与临界区"></a>临界资源与临界区</h4><ul><li>一段时间内只能允许一个进程使用的资源（即互斥资源）称为临界资源。</li><li>对临界资源的访问只能互斥进行，也即个进程对同一临界资源进行操作的程序段也应互斥执行，只有这样才能保证对临界资源的互斥访问。我们把进程中<strong>访问临界资源的代码段称为临界区</strong>。<h5 id="临界区同步机制的4条准则："><a href="#临界区同步机制的4条准则：" class="headerlink" title="临界区同步机制的4条准则："></a>临界区同步机制的4条准则：</h5>1 .空闲让进。<br>2 .忙则等待。<br>3 .有限等待。若干进程要求进入同一临界资源的临界区时，应在有限的时间内使一进程进入临界区，即不应出现各进程相互等待而都无法进入临界区的情况。<br>4 .让权等待。当进程不能进入其临界区时应立即释放所占有的CPU，以免陷入忙等（<strong>进程占用CPU的同时又一直等待</strong>）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;进程同步与通信&quot;&gt;&lt;a href=&quot;#进程同步与通信&quot; class=&quot;headerlink&quot; title=&quot;进程同步与通信&quot;&gt;&lt;/a&gt;进程同步与通信&lt;/h2&gt;&lt;h3 id=&quot;进程同步&quot;&gt;&lt;a href=&quot;#进程同步&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OS" scheme="http://bwael.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>【OS学习笔记】处理器管理——单处理器调度算法 / 线程</title>
    <link href="http://bwael.com/2016/03/21/OSnote-2/"/>
    <id>http://bwael.com/2016/03/21/OSnote-2/</id>
    <published>2016-03-21T08:10:40.000Z</published>
    <updated>2016-03-24T04:19:34.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用调度算法"><a href="#常用调度算法" class="headerlink" title="常用调度算法"></a>常用调度算法</h2><h3 id="一、先来先服务（FCFS）"><a href="#一、先来先服务（FCFS）" class="headerlink" title="一、先来先服务（FCFS）"></a>一、先来先服务（FCFS）</h3><h3 id="二、短作业-短进程优先（SJF-SPF"><a href="#二、短作业-短进程优先（SJF-SPF" class="headerlink" title="二、短作业/短进程优先（SJF/SPF)"></a>二、短作业/短进程优先（SJF/SPF)</h3><h3 id="三、时间片轮转（RR）"><a href="#三、时间片轮转（RR）" class="headerlink" title="三、时间片轮转（RR）"></a>三、时间片轮转（RR）</h3><p>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。</p><h3 id="四、高响应比优先（HRRF）"><a href="#四、高响应比优先（HRRF）" class="headerlink" title="四、高响应比优先（HRRF）"></a>四、高响应比优先（HRRF）</h3><p>高响应比优先调度算法的基本思想是把CPU分配给就绪队列中响应比最高的进程。<br>高响应比优先调度算法既考虑作业的执行时间也考虑作业的等待时间，综合了先来先服务和最短作业优先两种算法的特点。<br>该算法中的响应比是指作业等待时间与运行比值，响应比公式定义如下：<br>响应比 =（等待时间+要求服务时间）/ 要求服务时间,即RR=（w+s）/s=1+w/s，因此响应比一定是大于1的。</p><h3 id="五、优先级调度"><a href="#五、优先级调度" class="headerlink" title="五、优先级调度"></a>五、优先级调度</h3><p>既可用于高级调度，又可用于低级调度，还可用于实时系统。当该算法用于作业调度时，系统从后备作业队列中选择若干个优先级最高的，且系统能满足资源要求的作业装入内存运行。当该算法用于进程调度时，将把处理机分配给就绪进程队列中优先级最高的进程。</p><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><h5 id="1-静态优先级：静态优先级是在创建进程时确定进程的优先级，并且规定它在进程的整个运行期间保持不变。"><a href="#1-静态优先级：静态优先级是在创建进程时确定进程的优先级，并且规定它在进程的整个运行期间保持不变。" class="headerlink" title="1.静态优先级：静态优先级是在创建进程时确定进程的优先级，并且规定它在进程的整个运行期间保持不变。"></a>1.静态优先级：静态优先级是在创建进程时确定进程的优先级，并且规定它在进程的整个运行期间保持不变。</h5><h5 id="2-动态优先级：动态优先级是在创建进程时赋予该进程一个初始优先级，然后其优先级随着进程的执行情况的变化而改变，以便获得更好的调度性能。"><a href="#2-动态优先级：动态优先级是在创建进程时赋予该进程一个初始优先级，然后其优先级随着进程的执行情况的变化而改变，以便获得更好的调度性能。" class="headerlink" title="2.动态优先级：动态优先级是在创建进程时赋予该进程一个初始优先级，然后其优先级随着进程的执行情况的变化而改变，以便获得更好的调度性能。"></a>2.动态优先级：动态优先级是在创建进程时赋予该进程一个初始优先级，然后其优先级随着进程的执行情况的变化而改变，以便获得更好的调度性能。</h5><h4 id="在采用优先级法的低级调度中，分为抢占式和非抢占式"><a href="#在采用优先级法的低级调度中，分为抢占式和非抢占式" class="headerlink" title="在采用优先级法的低级调度中，分为抢占式和非抢占式"></a>在采用优先级法的低级调度中，分为抢占式和非抢占式</h4><ol><li>非抢占式优先级算法<br>在这种调度方式下，系统一旦把处理机分配给就绪队列中优先级最高的进程后，该进程就能一直执行下去，直至完成；或因等待某事件的发生使该进程不得不放弃处理机时，系统才能将处理机分配给另一个优先级高的就绪进程。</li><li>抢占式优先级算法<br>在这种调度方式下，进程调度程序把处理机分配给当时优先级最高的就绪进程，使之执行。一旦出现了另一个优先级更高的就绪进程时，进程调度程序就停止正在执行的进程，将处理机分配给新出现的优先级最高的就绪进程。</li></ol><h3 id="六、多级反馈队列调度（MLFQ）"><a href="#六、多级反馈队列调度（MLFQ）" class="headerlink" title="六、多级反馈队列调度（MLFQ）"></a>六、多级反馈队列调度（MLFQ）</h3><p>多级反馈队列调度算法为就绪状态的进程设置多个队列，第1级队列优先度最高，但时间片最小，以下各级队列优先度依次降低而时间片依次增加。各级队列均按先来先服务的原则排序。</p><ul><li>优点<br>1、短进程优先处理。<br>2、系统开销不大。<br>3、对分时系统来说，交互型请求通常能在第一队列中完成。</li><li>缺点<br>如果优先级高的队列一直不为空，优先级较低的队列中的进程可能长时间无法得到运行，即会导致饥饿的发生。</li></ul><h3 id="七、实时调度"><a href="#七、实时调度" class="headerlink" title="七、实时调度"></a>七、实时调度</h3><p>基本要求是保证计算机在规定的时间内对外部事件的请求做出响应。</p><h4 id="实时调度和非实时调度的区别："><a href="#实时调度和非实时调度的区别：" class="headerlink" title="实时调度和非实时调度的区别："></a>实时调度和非实时调度的区别：</h4><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ul><li>（1）比率单调调度算法<br>算法的任务优先级按照任务周期来确定。短任务周期的任务具有较高的优先级，周期长的任务优先级较低。<blockquote><p>实现简单、系统开销小、灵活性好，实时调度基础算法，但CPU利用率低。</p></blockquote></li><li>（2）最早截止时间优先调度算法<br>算法的任务优先级按照截止时间来确定。截止时间接近的任务具有较高的优先级，截止时间较晚的任务优先级较低。<blockquote><p>更多用于抢占式调度算法</p></blockquote></li><li>（3）最短空闲时间优先调度算法<br>算法的任务优先级按最短空闲时间来确定。最短空闲时间越短的任务具有较高的优先级。<blockquote><p>任务空闲时间 = 任务截止时间 - 任务剩余时间 - 当前时间<br>更多用于抢占式调度算法<br>系统开销较大</p></blockquote></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h3><p><strong>线程</strong>是为了弥补进程的缺陷而提出并使用的。</p><blockquote><p>进程在一个时段内只能做一件事。</p></blockquote><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><p><strong>线程</strong>可以理解为CPU调度和执行的最小单元。</p><ul><li>1 进程内的一个执行单元。</li><li>2 进程内的一个可独立调度的实体。</li><li>3 线程是进程中一个相对独立的控制流程序。</li><li>4 线程是执行的上下文。</li></ul><p><strong>属性</strong></p><ul><li>1.线程属于轻型实体，基本不拥有系统资源，只拥有为保证其运行必不可少的资源。<blockquote><p>例如，只有一个线程控制块<strong>（TCB）</strong>、程序计数器（PC）、一组寄存器和堆栈等。</p></blockquote></li><li>2.线程是独立调度和分派的基本单位，是能够独立运行的基本单位。</li><li>3.同一个进程中的所有线程共享该进程的全部资源。</li><li>4.线程并发执行程度高，同一进程的多个线程可以并发执行，多个进程的多个线程也可并发执行。</li></ul><h3 id="线程和传统进程的比较"><a href="#线程和传统进程的比较" class="headerlink" title="线程和传统进程的比较"></a>线程和传统进程的比较</h3><h4 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h4><ul><li>1.二者都有标识符（ID）、一组寄存器、状态、优先级及所要遵循的调度策略。</li><li>2.进程控制块(PCB)，线程控制块（TCB）。</li><li>3.进程中的线程共享该进程的资源，进程中的子进程也共享该进程的资源；线程和子线程的创建者可以对线程和子线程实施某些控制。</li></ul><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><ul><li>1.传统进程除了是调度和分派的基本单位以外，还是资源分配的基本单位。而引入线程的操作系统中，线程只是调度和分派的基本单位。</li><li>2.线程并发执行的程度高于传统进程并发执行的程度。</li><li>3.线程的创建和撤销时空开销小于进程，切换时间小于进程。</li><li>4.</li><li>5.一个线程的数据可以直接被属于同一个进程的其他线程所使用，因此数据传递既方便又快捷。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用调度算法&quot;&gt;&lt;a href=&quot;#常用调度算法&quot; class=&quot;headerlink&quot; title=&quot;常用调度算法&quot;&gt;&lt;/a&gt;常用调度算法&lt;/h2&gt;&lt;h3 id=&quot;一、先来先服务（FCFS）&quot;&gt;&lt;a href=&quot;#一、先来先服务（FCFS）&quot; class=&quot;he
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OS" scheme="http://bwael.com/tags/OS/"/>
    
  </entry>
  
</feed>
