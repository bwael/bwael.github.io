<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bwael&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bwael.com/"/>
  <updated>2020-07-28T09:27:14.497Z</updated>
  <id>http://bwael.com/</id>
  
  <author>
    <name>bwael</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0-1背包问题和LeetCode 416.分割等和子集</title>
    <link href="http://bwael.com/2020/07/28/leetcode-416/"/>
    <id>http://bwael.com/2020/07/28/leetcode-416/</id>
    <published>2020-07-28T08:37:11.000Z</published>
    <updated>2020-07-28T09:27:14.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="※-0-1背包"><a href="#※-0-1背包" class="headerlink" title="※ 0-1背包"></a>※ 0-1背包</h2><p>有一个容量为 N 的背包，要用这个背包装下物品的价值最大，这些物品有两个属性：体积 w 和价值 v。</p><p>定义一个二维数组 dp 存储最大价值，其中 $dp[i][j] $表示前 i 件物品体积不超过 j 的情况下能达到的最大价值。设第 i 件物品体积为 w，价值为 v，根据第 i 件物品是否添加到背包中，可以分两种情况讨论：</p><ul><li>第 i 件物品没添加到背包，总体积不超过 j 的前 i 件物品的最大价值，就是总体积不超过 j 的前 i-1 件物品的最大价值，$dp[i][j] = dp[i-1][j]$。</li><li>第 i 件物品添加到背包中，$dp[i][j] = dp[i-1][j-w] + v$。</li></ul><a id="more"></a><p>第 i 件物品可添加也可以不添加，取决于哪种情况下最大价值更大。因此，0-1 背包的状态转移方程为：</p><p><img src="8cb2be66-3d47-41ba-b55b-319fc68940d4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// W 为背包总体积</span></span><br><span class="line"><span class="comment">// N 为物品数量</span></span><br><span class="line"><span class="comment">// weights 数组存储 N 个物品的重量</span></span><br><span class="line"><span class="comment">// values 数组存储 N 个物品的价值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, <span class="keyword">int</span> N, <span class="keyword">int</span>[] weights, <span class="keyword">int</span>[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>空间优化</strong></p><p>在程序实现时可以对 0-1 背包做优化。观察状态转移方程可以知道，前 i 件物品的状态仅与前 i-1 件物品的状态有关，因此可以将 dp 定义为一维数组，其中 $dp[j]$ 既可以表示 $dp[i-1][j]$ 也可以表示$ dp[i][j]$。此时，</p><p><img src="9ae89f16-7905-4a6f-88a2-874b4cac91f4.jpg" alt=""></p><p>因为 $dp[j-w] $表示 $dp[i-1][j-w]$，因此不能先求 $dp[i][j-w]$，防止将 $dp[i-1][j-w] $覆盖。也就是说要先计算 $dp[i][j] $再计算 $dp[i][j-w]$，在程序实现时需要按倒序来循环求解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, <span class="keyword">int</span> N, <span class="keyword">int</span>[] weights, <span class="keyword">int</span>[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无法使用贪心算法的解释</strong></p><p><strong>0-1 背包问题无法使用贪心算法来求解</strong>，也就是说不能按照先添加性价比最高的物品来达到最优，这是因为这种方式可能造成背包空间的浪费，从而无法达到最优。考虑下面的物品和一个容量为 5 的背包，如果先添加物品 0 再添加物品 1，那么只能存放的价值为 16，浪费了大小为 2 的空间。最优的方式是存放物品 1 和物品 2，价值为 22.</p><table><thead><tr><th>id</th><th>w</th><th>v</th><th>v/w</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>6</td><td>6</td></tr><tr><td>1</td><td>2</td><td>10</td><td>5</td></tr><tr><td>2</td><td>3</td><td>12</td><td>4</td></tr></tbody></table><p><strong>变种</strong></p><ul><li>完全背包：物品数量为无限个</li><li>多重背包：物品数量有限制</li><li>多维费用背包：物品不仅有重量，还有体积，同时考虑这两种限制</li><li>其它：物品之间相互约束或者依赖</li></ul><h2 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h2><p>416.Partition Equal Subset Sum (Medium)</p><p><a href="https://leetcode.com/problems/partition-equal-subset-sum/description/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/description/" target="_blank" rel="noopener">力扣</a></p><p>2020-7-28 15:46:15</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。<br>注意:</p><ul><li>每个数组中的元素不会超过 100</li><li>数组的大小不会超过 200</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [1, 5, 11, 5]</span><br><span class="line">输出: true</span><br><span class="line">解释: 数组可以分割成 [1, 5, 5] 和 [11].</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = calcArraySum(nums);</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> N = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[N + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = N; j &gt;= num; j--)&#123;</span><br><span class="line">                dp[j] = dp[j] || dp[j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcArraySum</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了防止True正序遍历被覆盖，所以倒着来。</p><p>上面这种写法节省了一定空间。完整的状态转移过程具体可以看下图，$dp[i][j] = dp[i-1][j]$  or  $dp[i-1][j - nums[i]]$。</p><p><img src="77838706e514294db6eb703b11a44a43b3524498dadcf0870b014268af6f8783-image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;※-0-1背包&quot;&gt;&lt;a href=&quot;#※-0-1背包&quot; class=&quot;headerlink&quot; title=&quot;※ 0-1背包&quot;&gt;&lt;/a&gt;※ 0-1背包&lt;/h2&gt;&lt;p&gt;有一个容量为 N 的背包，要用这个背包装下物品的价值最大，这些物品有两个属性：体积 w 和价值 v。&lt;/p&gt;
&lt;p&gt;定义一个二维数组 dp 存储最大价值，其中 $dp[i][j] $表示前 i 件物品体积不超过 j 的情况下能达到的最大价值。设第 i 件物品体积为 w，价值为 v，根据第 i 件物品是否添加到背包中，可以分两种情况讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 i 件物品没添加到背包，总体积不超过 j 的前 i 件物品的最大价值，就是总体积不超过 j 的前 i-1 件物品的最大价值，$dp[i][j] = dp[i-1][j]$。&lt;/li&gt;
&lt;li&gt;第 i 件物品添加到背包中，$dp[i][j] = dp[i-1][j-w] + v$。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="动态规划" scheme="http://bwael.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer 14.剪绳子（LeetCode 343.整数拆分）</title>
    <link href="http://bwael.com/2020/07/27/offer-14/"/>
    <id>http://bwael.com/2020/07/27/offer-14/</id>
    <published>2020-07-27T07:41:17.000Z</published>
    <updated>2020-07-28T09:28:08.904Z</updated>
    
    <content type="html"><![CDATA[<p><strong>剑指Offer 14.剪绳子（LeetCode 343.整数拆分）</strong></p><p><a href="https://leetcode-cn.com/problems/integer-break/submissions/" target="_blank" rel="noopener">343.整数拆分 - LeetCode (Medium)</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一根绳子剪成多段，并且使得每段的长度乘积最大。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 2</span><br><span class="line">return 1 (2 = 1 + 1)</span><br><span class="line"></span><br><span class="line">n = 10</span><br><span class="line">return 36 (10 = 3 + 3 + 4)</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>贪心</strong></p><p>尽可能多剪长度为 3 的绳子，并且不允许有长度为 1 的绳子出现。如果出现了，就从已经切好长度为 3 的绳子中拿出一段与长度为 1 的绳子重新组合，把它们切成两段长度为 2 的绳子。</p><a id="more"></a><p>证明：当 n &gt;= 5 时，3(n - 3) - n = 2n - 9 &gt; 0，且 2(n - 2) - n = n - 4 &gt; 0。因此在 n &gt;= 5 的情况下，将绳子剪成一段为 2 或者 3，得到的乘积会更大。又因为 3(n - 3) - 2(n - 2) = n - 5 &gt;= 0，所以剪成一段长度为 3 比长度为 2 得到的乘积更大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> timesOf3 = n / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n - timesOf3 * <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        timesOf3--;</span><br><span class="line">    <span class="keyword">int</span> timesOf2 = (n - timesOf3 * <span class="number">3</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.pow(<span class="number">3</span>, timesOf3)) * (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, timesOf2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态规划</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="comment">//记录求解的历史</span></span><br><span class="line">            dp[i] = Math.max(dp[i], Math.max(j * (i - j), dp[j] * (i - j)));</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;剑指Offer 14.剪绳子（LeetCode 343.整数拆分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/integer-break/submissions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;343.整数拆分 - LeetCode (Medium)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;把一根绳子剪成多段，并且使得每段的长度乘积最大。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 1 (2 = 1 + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 36 (10 = 3 + 3 + 4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;贪心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽可能多剪长度为 3 的绳子，并且不允许有长度为 1 的绳子出现。如果出现了，就从已经切好长度为 3 的绳子中拿出一段与长度为 1 的绳子重新组合，把它们切成两段长度为 2 的绳子。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="剑指Offer" scheme="http://bwael.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 95.不同的二叉搜索树 II</title>
    <link href="http://bwael.com/2020/07/26/leetcode-95/"/>
    <id>http://bwael.com/2020/07/26/leetcode-95/</id>
    <published>2020-07-26T02:41:16.000Z</published>
    <updated>2020-07-28T09:26:48.853Z</updated>
    
    <content type="html"><![CDATA[<p><strong>95. 不同的二叉搜索树 II</strong></p><p>95.Unique Binary Search Trees II (Medium)</p><p><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/description/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/description/" target="_blank" rel="noopener">力扣</a></p><p>2020-7-26 10:17:45</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数字 n，要求生成所有值为 1…n 的二叉搜索树。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST's shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">return</span> generateSubTrees(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">generateSubTrees</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; ret = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(s &gt; e)&#123;</span><br><span class="line">            ret.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 枚举可行根节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= e; ++i) &#123;</span><br><span class="line">            <span class="comment">// 获得所有可行的左子树集合</span></span><br><span class="line">            List&lt;TreeNode&gt; leftSubtrees = generateSubTrees(s, i - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 获得所有可行的右子树集合</span></span><br><span class="line">            List&lt;TreeNode&gt; rightSubtrees = generateSubTrees(i + <span class="number">1</span>, e);</span><br><span class="line">            <span class="comment">// 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode left : leftSubtrees) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode right : rightSubtrees) &#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = left;</span><br><span class="line">                    root.right = right;</span><br><span class="line">                    ret.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;95. 不同的二叉搜索树 II&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;95.Unique Binary Search Trees II (Medium)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees-ii/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode&lt;/a&gt; / &lt;a href=&quot;https://leetcode-cn.com/problems/unique-binary-search-trees-ii/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2020-7-26 10:17:45&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个数字 n，要求生成所有值为 1…n 的二叉搜索树。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="分治" scheme="http://bwael.com/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 435.无重叠的区间个数</title>
    <link href="http://bwael.com/2020/07/24/leetcode-435-Non-overlapping-Intervals/"/>
    <id>http://bwael.com/2020/07/24/leetcode-435-Non-overlapping-Intervals/</id>
    <published>2020-07-24T03:24:54.000Z</published>
    <updated>2020-07-28T09:27:32.068Z</updated>
    
    <content type="html"><![CDATA[<p><strong>435.无重叠的区间个数</strong></p><p>435.Non-overlapping Intervals (Medium)</p><p><a href="https://leetcode.com/problems/non-overlapping-intervals/description/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/non-overlapping-intervals/description/" target="_blank" rel="noopener">力扣</a></p><p>2020-7-24 11:00:19</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。可以认为区间的终点总是大于它的起点。区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [ [1,2], [2,3], [3,4], [1,3] ]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。</p><p>在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</p><p>按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>] &lt; end)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end = intervals[i][<span class="number">1</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length - cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays.sort( )用lambda表达式可写为，执行效率低：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;435.无重叠的区间个数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;435.Non-overlapping Intervals (Medium)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/non-overlapping-intervals/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode&lt;/a&gt; / &lt;a href=&quot;https://leetcode-cn.com/problems/non-overlapping-intervals/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2020-7-24 11:00:19&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。可以认为区间的终点总是大于它的起点。区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: [ [1,2], [2,3], [3,4], [1,3] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 移除 [1,3] 后，剩下的区间没有重叠。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 51.N皇后</title>
    <link href="http://bwael.com/2018/08/20/leetcode-51/"/>
    <id>http://bwael.com/2018/08/20/leetcode-51/</id>
    <published>2018-08-20T13:11:14.000Z</published>
    <updated>2020-07-28T09:26:39.447Z</updated>
    
    <content type="html"><![CDATA[<p><strong>51. N皇后</strong></p><p>51.N-Queens (Hard)</p><p><a href="https://leetcode.com/problems/n-queens/description/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/n-queens/description/" target="_blank" rel="noopener">力扣</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="067b310c-6877-40fe-9dcf-10654e737485.jpg" alt=""></p><p>在 n*n 的矩阵中摆放 n 个皇后，并且每个皇后不能在同一行，同一列，同一对角线上，求所有的 n 皇后的解。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p><a id="more"></a><p>当 N = 8 时，就是八皇后问题，数学大佬高斯穷尽一生都没有数清楚八皇后问题到底有几种可能的放置方法，但是我们的算法只需要一秒就可以算出来所有可能的结果。</p><p>不过真的不怪高斯。这个问题的复杂度确实非常高，看看我们的决策树，虽然有 isValid 函数剪枝，但是最坏时间复杂度仍然是 O(N^(N+1))，而且无法优化。如果 N = 10 的时候，计算就已经很耗时了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;String&gt;&gt; res;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">charToString</span><span class="params">(<span class="keyword">char</span>[][] array)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>[] chars : array) &#123;</span><br><span class="line">            result.add(String.valueOf(chars));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 输入棋盘边长 n，返回所有合法的放置 */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// '.' 表示空，'Q' 表示皇后，初始化空棋盘</span></span><br><span class="line">        <span class="keyword">char</span>[][] board = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>[] chars : board)&#123;</span><br><span class="line">            Arrays.fill(chars, <span class="string">'.'</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        backtrack(board, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径：board中小于row的那些行都已经成功放置了皇后</span></span><br><span class="line"><span class="comment">     * 可选择列表: 第row行的所有列都是放置Q的选择</span></span><br><span class="line"><span class="comment">     * 结束条件: row超过board的最后一行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 结束条件，构造输出</span></span><br><span class="line">        <span class="keyword">if</span> (row == board.length) &#123;</span><br><span class="line">            res.add(charToString(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = board[row].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="comment">// 排除不合法选择</span></span><br><span class="line">            <span class="keyword">if</span> (!isValid(board, row, col)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 做选择</span></span><br><span class="line">            board[row][col] = <span class="string">'Q'</span>;</span><br><span class="line">            <span class="comment">// 进入下一行决策</span></span><br><span class="line">            backtrack(board, row + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 撤销选择</span></span><br><span class="line">            board[row][col] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 是否可以在 board[row][col] 放置皇后？ */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = board.length;</span><br><span class="line">        <span class="comment">// check is valid in col列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>[] chars : board) <span class="keyword">if</span> (chars[col] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// check is valide upright右上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; rows; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check is valide upleft左上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;51. N皇后&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;51.N-Queens (Hard)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/n-queens/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode&lt;/a&gt; / &lt;a href=&quot;https://leetcode-cn.com/problems/n-queens/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;067b310c-6877-40fe-9dcf-10654e737485.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 n*n 的矩阵中摆放 n 个皇后，并且每个皇后不能在同一行，同一列，同一对角线上，求所有的 n 皇后的解。&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="回溯搜索" scheme="http://bwael.com/tags/%E5%9B%9E%E6%BA%AF%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1143.最长公共子序列</title>
    <link href="http://bwael.com/2017/08/28/leetcode-1143/"/>
    <id>http://bwael.com/2017/08/28/leetcode-1143/</id>
    <published>2017-08-28T08:36:51.000Z</published>
    <updated>2020-07-28T09:27:54.347Z</updated>
    
    <content type="html"><![CDATA[<p><strong>※ 最长公共子序列</strong></p><p>对于两个子序列 S1 和 S2，找出它们最长的公共子序列。</p><p>定义一个二维数组 dp 用来存储最长公共子序列的长度，其中$ dp[i][j] $表示 S1 的前 i 个字符与 S2 的前 j 个字符最长公共子序列的长度。考虑 $S1_i $与$ S2_j $值是否相等，分为两种情况：</p><ul><li>当 $S1_i==S2_j $时，那么就能在 S1 的前 i-1 个字符与 S2 的前 j-1 个字符最长公共子序列的基础上再加上$ S1_i $这个值，最长公共子序列长度加 1，即 $dp[i][j] = dp[i-1][j-1] + 1$。</li><li>当 $S1_i != S2_j $时，此时最长公共子序列为 S1 的前 i-1 个字符和 S2 的前 j 个字符最长公共子序列，或者 S1 的前 i 个字符和 S2 的前 j-1 个字符最长公共子序列，取它们的最大者，即 $dp[i][j] = max({ dp[i-1][j], dp[i][j-1] })$。</li></ul><a id="more"></a><p>综上，最长公共子序列的状态转移方程为：<img src="ecd89a22-c075-4716-8423-e0ba89230e9a.jpg" alt=""></p><p>对于长度为 N 的序列 S1 和长度为 M 的序列 S2，$dp[N][M] $就是序列 S1 和序列 S2 的最长公共子序列长度。</p><p>与最长递增子序列相比，最长公共子序列有以下不同点：</p><ul><li>针对的是两个序列，求它们的最长公共子序列。</li><li>在最长递增子序列中，$dp[i]$ 表示以 $S_i $为结尾的最长递增子序列长度，子序列必须包含 $S_i$ ；在最长公共子序列中，$dp[i][j] $表示 S1 中前 i 个字符与 S2 中前 j 个字符的最长公共子序列长度，不一定包含 $S1_i $和 $S2_j$。</li><li>在求最终解时，最长公共子序列中 $dp[N][M] $就是最终解，而最长递增子序列中 $dp[N] $不是最终解，因为以 $S_N$ 为结尾的最长递增子序列不一定是整个序列最长递增子序列，需要遍历一遍 dp 数组找到最大者。</li></ul><p><strong>1143. 最长公共子序列</strong></p><p>1143.Longest Common Subsequence</p><p><a href="https://leetcode.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">力扣</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</p><p>若这两个字符串没有公共子序列，则返回 0。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入：text1 = "abcde", text2 = "ace" </span><br><span class="line">输出：3 </span><br><span class="line">解释：最长公共子序列是 "ace"，它的长度为 3。</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>同上，记住状态转移方程就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = text1.length(), n2 = text2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n1 + <span class="number">1</span>][n2 + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;※ 最长公共子序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于两个子序列 S1 和 S2，找出它们最长的公共子序列。&lt;/p&gt;
&lt;p&gt;定义一个二维数组 dp 用来存储最长公共子序列的长度，其中$ dp[i][j] $表示 S1 的前 i 个字符与 S2 的前 j 个字符最长公共子序列的长度。考虑 $S1_i $与$ S2_j $值是否相等，分为两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 $S1_i==S2_j $时，那么就能在 S1 的前 i-1 个字符与 S2 的前 j-1 个字符最长公共子序列的基础上再加上$ S1_i $这个值，最长公共子序列长度加 1，即 $dp[i][j] = dp[i-1][j-1] + 1$。&lt;/li&gt;
&lt;li&gt;当 $S1_i != S2_j $时，此时最长公共子序列为 S1 的前 i-1 个字符和 S2 的前 j 个字符最长公共子序列，或者 S1 的前 i 个字符和 S2 的前 j-1 个字符最长公共子序列，取它们的最大者，即 $dp[i][j] = max({ dp[i-1][j], dp[i][j-1] })$。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="动态规划" scheme="http://bwael.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 455.分配饼干</title>
    <link href="http://bwael.com/2017/08/24/leetcode-455/"/>
    <id>http://bwael.com/2017/08/24/leetcode-455/</id>
    <published>2017-08-24T03:35:09.000Z</published>
    <updated>2020-07-28T09:27:41.331Z</updated>
    
    <content type="html"><![CDATA[<p><strong>455.分配饼干</strong></p><p>Assign Cookies (Easy)</p><p><a href="https://leetcode-cn.com/problems/assign-cookies/description/" target="_blank" rel="noopener">LeetCode 分发饼干</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid[1,3], size[1,2,4]</span><br><span class="line">Output: 2Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>题目描述：每个孩子都有一个满足度 grid，每个饼干都有一个大小 size，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>给一个孩子的饼干应当尽量小并且又能满足该孩子，这样大饼干才能拿来给满足度比较大的孩子。</li><li>因为满足度最小的孩子最容易得到满足，所以先满足满足度最小的孩子。</li></ol><a id="more"></a><p>在以上的解法中，我们只在每次分配时饼干时选择一种看起来是当前最优的分配方法，但无法保证这种局部最优的分配方法最后能得到全局最优解。我们假设能得到全局最优解，并使用反证法进行证明，即假设存在一种比我们使用的贪心策略更优的最优策略。如果不存在这种最优策略，表示贪心策略就是最优策略，得到的解也就是全局最优解。</p><p>证明：假设在某次选择中，贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。假设存在一种最优策略，可以给该孩子分配第 n 个饼干，并且 m &lt; n。我们可以发现，经过这一轮分配，贪心策略分配后剩下的饼干一定有一个比最优策略来得大。因此在后续的分配中，贪心策略一定能满足更多的孩子。也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。</p><p><img src="e69537d2-a016-4676-b169-9ea17eeb9037.gif" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(g == <span class="keyword">null</span> || s == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//贪心方法，先排序</span></span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="keyword">int</span> gi = <span class="number">0</span>, si = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(gi &lt; g.length &amp;&amp; si &lt; s.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[gi] &lt;= s[si])&#123;</span><br><span class="line">                gi++;</span><br><span class="line">            &#125;</span><br><span class="line">            si++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;455.分配饼干&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assign Cookies (Easy)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/assign-cookies/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 分发饼干&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: grid[1,3], size[1,2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2Copy to clipboardErrorCopied&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;题目描述：每个孩子都有一个满足度 grid，每个饼干都有一个大小 size，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;给一个孩子的饼干应当尽量小并且又能满足该孩子，这样大饼干才能拿来给满足度比较大的孩子。&lt;/li&gt;
&lt;li&gt;因为满足度最小的孩子最容易得到满足，所以先满足满足度最小的孩子。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 241.给表达式加括号</title>
    <link href="http://bwael.com/2017/07/26/leetcode-241/"/>
    <id>http://bwael.com/2017/07/26/leetcode-241/</id>
    <published>2017-07-26T02:40:59.000Z</published>
    <updated>2020-07-28T09:27:01.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>241.给表达式加括号</strong></p><p>Different Ways to Add Parentheses (Medium)</p><p><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/description/" target="_blank" rel="noopener">Leetcode</a> / <a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/description/" target="_blank" rel="noopener">力扣</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: "2-1-1".</span><br><span class="line"></span><br><span class="line">((2-1)-1) = 0</span><br><span class="line">(2-(1-1)) = 2</span><br><span class="line"></span><br><span class="line">Output : [0, 2]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">diffWaysToCompute</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ways = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递归：以某个字符作为分隔符断开字符串，递归遍历左右两边</span></span><br><span class="line"><span class="comment">        做法类似构造二叉树，也是分割开来左右遍历，然后合并</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'+'</span> || c == <span class="string">'-'</span> || c == <span class="string">'*'</span>)&#123;</span><br><span class="line">                List&lt;Integer&gt; left = diffWaysToCompute(input.substring(<span class="number">0</span>, i));</span><br><span class="line">                List&lt;Integer&gt; right = diffWaysToCompute(input.substring(i + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l : left) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> r : right) &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                                ways.add(l + r);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                                ways.add(l - r);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                             <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                                ways.add(l * r);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//纯数字</span></span><br><span class="line">        <span class="keyword">if</span> (ways.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            ways.add(Integer.valueOf(input));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ways;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;241.给表达式加括号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Different Ways to Add Parentheses (Medium)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/different-ways-to-add-parentheses/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode&lt;/a&gt; / &lt;a href=&quot;https://leetcode-cn.com/problems/different-ways-to-add-parentheses/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &quot;2-1-1&quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((2-1)-1) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2-(1-1)) = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output : [0, 2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode" scheme="http://bwael.com/tags/LeetCode/"/>
    
      <category term="分治" scheme="http://bwael.com/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>debian系Cron定时任务</title>
    <link href="http://bwael.com/2017/03/01/debian-cron/"/>
    <id>http://bwael.com/2017/03/01/debian-cron/</id>
    <published>2017-03-01T12:55:54.000Z</published>
    <updated>2018-12-05T03:57:05.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install cron</span><br></pre></td></tr></table></figure><h3 id="Create-a-scheduled-task"><a href="#Create-a-scheduled-task" class="headerlink" title="Create a scheduled task"></a>Create a scheduled task</h3><ol><li>键入 crontab  -e 编辑 crontab 服务文件</li><li>用 crontab -u username  -l 命令,查看该用户下的crontab服务是否创建成功</li><li>用 ps -ax | grep cron 查看服务是否已经运行</li></ol><p>初始化 cron 进程，使用 systemctl 进行管理的发行版同理</p><ul><li><p>启动 /etc/init.d/cron start</p></li><li><p>关闭 /etc/init.d/cron stop</p></li><li><p>重启 /etc/init.d/cron restart</p></li></ul><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><h4 id="1-编辑配置文件"><a href="#1-编辑配置文件" class="headerlink" title="1. 编辑配置文件"></a>1. 编辑配置文件</h4><p>　　crontab是通过读取一个crontab文件来工作，这是一个普通的文本文件，里面列出了要执行的任务。每行都含有要指定的任务的命令、参数与选项，以及要执行任务的时间。（cron 软件在后台运行并且经常检查 /etc/crontab 文件。cron 软件也检查 /var/cron/tabs 目录，搜索新的 crontab 文件。这些 crontab 文件存储一些 cron 在特定时间执行任务的信息。）</p><p>　　crontab的基本格式：</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>几个星号分别为：分 时 日 月 周，最后是要执行的命令。</p><ul><li>分：0~59</li><li>时：0~23</li><li>日：1~31</li><li>月：1~12</li><li>周：0～6（0表示星期天）</li></ul><p>除了数字还有几个个特殊的符号就是* / - ：</p><ul><li>* 代表所有的取值范围内的数字</li><li>/ 代表每的意思</li><li>*/5 表示每5个单位</li><li>- 代表从某个数字到某个数字</li><li>, 分开几个离散的数字</li></ul><p>配置文件的一些例子：</p><ul><li>0 3 <em> </em> * /root/test.sh 每天凌晨3点执行test.sh文件</li><li>* 23-7/1 <em> </em> * /root/lnmp restart 晚上11点到早上7点之间，每隔一小时重启lnmp套件</li><li><em>/30 </em> <em> </em> * /usr/sbin/ntpdate 每半小时同步一下时间</li><li>0 23 <em> </em> 6 /lnmp restart 每星期六的11 : 00 pm重启重启lnmp套件。</li><li><em>/1 </em> <em> </em> * echo “i am running.”&gt;&gt;/tmp/running.txt 每隔1分钟向/tmp/running.txt写一个”i am running.”字符串。</li></ul><h4 id="2-直接用crontab命令编辑"><a href="#2-直接用crontab命令编辑" class="headerlink" title="2. 直接用crontab命令编辑"></a>2. 直接用crontab命令编辑</h4><p>cron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明：</p><p>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</p><p>crontab -l //列出某个用户cron服务的详细内容</p><p>crontab -r //删除每个用户的cron服务</p><p>crontab -e //编辑某个用户的cron服务</p><p>比如说root查看自己的cron设置：</p><p>crontab -u root -l</p><p>再例如，root想删除fred的cron设置：</p><p>crontab -u fred -r</p><p>在编辑cron服务时，编辑的内容有一些格式和约定，输入：</p><p>crontab -u root -e</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install cron&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Create-a-scheduled-task&quot;&gt;&lt;a href=&quot;#Create-a-scheduled-task&quot; class=&quot;headerlink&quot; title=&quot;Create a scheduled task&quot;&gt;&lt;/a&gt;Create a scheduled task&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;键入 crontab  -e 编辑 crontab 服务文件&lt;/li&gt;
&lt;li&gt;用 crontab -u username  -l 命令,查看该用户下的crontab服务是否创建成功&lt;/li&gt;
&lt;li&gt;用 ps -ax | grep cron 查看服务是否已经运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;初始化 cron 进程，使用 systemctl 进行管理的发行版同理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;启动 /etc/init.d/cron start&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭 /etc/init.d/cron stop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启 /etc/init.d/cron restart&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Configuration&quot;&gt;&lt;a href=&quot;#Configuration&quot; class=&quot;headerlink&quot; title=&quot;Configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h3&gt;&lt;h4 id=&quot;1-编辑配置文件&quot;&gt;&lt;a href=&quot;#1-编辑配置文件&quot; class=&quot;headerlink&quot; title=&quot;1. 编辑配置文件&quot;&gt;&lt;/a&gt;1. 编辑配置文件&lt;/h4&gt;&lt;p&gt;　　crontab是通过读取一个crontab文件来工作，这是一个普通的文本文件，里面列出了要执行的任务。每行都含有要指定的任务的命令、参数与选项，以及要执行任务的时间。（cron 软件在后台运行并且经常检查 /etc/crontab 文件。cron 软件也检查 /var/cron/tabs 目录，搜索新的 crontab 文件。这些 crontab 文件存储一些 cron 在特定时间执行任务的信息。）&lt;/p&gt;
&lt;p&gt;　　crontab的基本格式：&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://bwael.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（五）</title>
    <link href="http://bwael.com/2017/02/13/microblog-develop-documentation-05/"/>
    <id>http://bwael.com/2017/02/13/microblog-develop-documentation-05/</id>
    <published>2017-02-13T03:51:46.000Z</published>
    <updated>2018-12-05T03:59:16.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-用户首页和发布博客"><a href="#5-用户首页和发布博客" class="headerlink" title="5.用户首页和发布博客"></a>5.用户首页和发布博客</h2><p>我们已经完成了登录系统，则可以使用昵称和邮件登录，接下来要完成用户个人界面信息，在此之前先将数据库清空:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; users = User.query.all()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">...     db.session.delete(u)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; posts = Post.query.all()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> p <span class="keyword">in</span> posts:</span><br><span class="line">...     db.session.delete(p)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></p><p>我们将创建用户信息页，显示用户信息以及最近的 blog。作为其中一部分，我们将会学习到显示用户头像。接着，我们将要用户 web 表单用来编辑用户信。</p><h3 id="1-用户信息首页"><a href="#1-用户信息首页" class="headerlink" title="1.用户信息首页"></a>1.用户信息首页</h3><p>创建一个用户信息不需要引入新的概念,只要创建一个新的视图函数以及与它配套的 HTML 模版。添加用户信息类，并定义用户信息字段修改（forms.py）文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AboutMeForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    describe = TextAreaField(<span class="string">'about me'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">140</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'YES!'</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>添加用户新信息的视图函数(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm,  SignUpForm, AboutMeForm</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    form = AboutMeForm()</span><br><span class="line">    user = User.query.filter(User.id == user_id).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        flash(<span class="string">"The user is not exist."</span>)</span><br><span class="line">        redirect(<span class="string">"/index"</span>)</span><br><span class="line">    blogs = user.posts.all()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"user.html"</span>,</span><br><span class="line">        form=form,</span><br><span class="line">        user=user,</span><br><span class="line">        blogs=blogs)</span><br></pre></td></tr></table></figure><p>用于这个视图函数的装饰器与之前的有些不同，在这个例子中，我们有一个参数在里面，用 &lt;int: user_id&gt; 来表示。这将转化为一个同名的参数添加到视图函数。比如当客户端以URL /user/1 请求的时候，视图函数将收到一个 user_id = 1 参数从而而被调用。<br>视图函数的实现没有让人惊喜的。首先，我们使用接收到参数 user_id 试着从数据库载入用户。如果没有找到用户的话，我们将会抛出错误信息，重定向到主页，我们还添加了@login_required装饰器，如果没有登陆的用户，向通过URL直接访问该页面，那么我们会直接在页面上报错，阻止其访问。若找到用户，将其传入到 render_template 调用，并且传入user.posts.all()找出的该用户的blogs；若如果没有找到用户，模板会显示小小的提示The user is not exist！，并跳转到主页。</p><p>用户信息页,创建文件app/templates/user.html<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;p&gt;Name: &#123;&#123; user.nickname &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Email: &#123;&#123; user.email &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> blogs | length %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> blog <span class="keyword">in</span> blogs %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; blog.body &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p style="color:blue;"&gt;the guy is so lazy.....&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>用户信息页现在已经完成了，但是缺少对它的链接。为了让用户很容易地检查他的或者她的信息，我们直接把用户信息页的链接放在导航栏中修改文件( app/templates/base.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog:</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('index') &#125;&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% if not current_user.is_authenticated() %&#125;</span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('sign_up') &#125;&#125;"</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('logout') &#125;&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-发布博客"><a href="#2-发布博客" class="headerlink" title="2.发布博客"></a>2.发布博客</h3><p>首先在forms.py文件中添加博客内容的字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishBlogForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    body = TextAreaField(<span class="string">'blog content'</span>, validators=[Required()])</span><br><span class="line">    submit = SubmitField(<span class="string">'Submit'</span>)</span><br></pre></td></tr></table></figure></p><p>而且要在app/views.py中加入如下函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> strip</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm,  SignUpForm, AboutMeForm, PublishBlogForm</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/publish/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    form = PublishBlogForm()</span><br><span class="line">    posts = Post()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        blog_body = request.form.get(<span class="string">"body"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(strip(blog_body)):</span><br><span class="line">            flash(<span class="string">"The content is necessray!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line">        posts.body = blog_body</span><br><span class="line">        posts.timestamp = datetime.datetime.now()</span><br><span class="line">        posts.user_id = user_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.add(posts)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flash(<span class="string">"Database error!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line"></span><br><span class="line">        flash(<span class="string">"Publish Successful!"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">"publish"</span>, user_id=user_id))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"publish.html"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure></p><p>接收当前用户的user_id用于填充Post表的user_id字段，以便在用户主页显示该用户所属的blogs。为了防止blog内容为空，除了在forms.py里添加validator的限制外，我们还要在后台再一次对输入数据的验证，strip(blog_body)就是为了防止用户只输入空格的情况，它会将字符串两边的空格去掉，如果内容仅仅为空格的话，那么长度肯定是为0的，一旦这种事情发生了，就立即报错，并刷新当前页面。</p><p>将数据库的对应的字段赋值完毕之后，使用db.session.add(posts)，db.session.commint()将值写入数据库中，因为操作数据库的时候可能会出现一些意想不到的问题，所以我们应该用try….except….来处理这些问题，提高适用性(app/publish.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for("</span><span class="attr">publish</span>", <span class="attr">user_id</span>=<span class="string">current_user.id)</span> &#125;&#125;" <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">name</span>=<span class="string">"publish"</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-子模版"><a href="#3-子模版" class="headerlink" title="3.子模版"></a>3.子模版</h3><p>已经实现了用户信息页，它能够显示用户的 blog。首页也应该显示任何一个用户这个时候的 blog 。这样就需要有两个页需要显示用户的 blog，即要制作一个渲染 blog 的子模板，我们在使用它的模板中包含这个子模板(/app/templates/post.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;post.author.avatar(50)&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;post.author.nickname&#125;&#125; says:<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着我们使用include命令在我们的用户模板中调用这个子模板(app/templates/user.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User: &#123;&#123; user.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User: &#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">    &#123;% include 'post.html' %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %</span><br></pre></td></tr></table></figure></p><h3 id="4-用户自我介绍"><a href="#4-用户自我介绍" class="headerlink" title="4.用户自我介绍"></a>4.用户自我介绍</h3><p>用户自我说明可以显示在用户信息页上，因此用户会写一些自我介绍，并将它们显示在用户资料页上。也可以追踪每个用户访问页面的最后一次的时间，将把它显示在用户信息页上。为了增加这些，就必须开始修改数据库。更具体地说，就是必须在User 类上增加两个字段(app/models.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">15</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">128</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default=ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>, lazy=<span class="string">'dynamic'</span>)</span><br><span class="line">    about_me = db.Column(db.String(<span class="number">140</span>))</span><br><span class="line">    last_seen = db.Column(db.DateTime)</span><br></pre></td></tr></table></figure></p><p>前面已经写过数据库的迁移,因此为了增加这两个新字段到数据库，需要运行升级脚本，若没有迁移的支持，也可以手动地编辑数据库，最差的方式就是删除表再重新创建。接着，修改用户信息页模板来展示这些字段(app/templates/user.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;&#123; user.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: &#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if user.about_me %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"about_me()"</span>&gt;</span>about me: &#123;&#123; user.about_me &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#4499EE;"</span> <span class="attr">onclick</span>=<span class="string">"about_me()"</span>&gt;</span>about me: I'm a person. ---- this info from the system.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aboutMe"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for('about_me', user_id=current_user.id) &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.describe &#125;&#125;</span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#4c4c4c;"</span>&gt;</span>last log: &#123;&#123; user.last_seen.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('publish', user_id=user.id) &#125;&#125;"</span>&gt;</span>Want to publish blogs?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">&#123;% if blogs | length %&#125;</span><br><span class="line">    &#123;% for blog in blogs %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; blog.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue;"</span>&gt;</span>the guy is so lazy.....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function about_me() &#123;</span></span><br><span class="line"><span class="undefined">    target = document.getElementById("aboutMe");</span></span><br><span class="line"><span class="undefined">    if (target.style.display == "block") &#123;</span></span><br><span class="line"><span class="undefined">        target.style.display = "none";</span></span><br><span class="line"><span class="undefined">    &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        target.style.display = "block";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>在user.html中多出了一段js代码，这段js代码作用是点击about me的时候，弹出一个编辑框以便我们修改自己的个人描述，当然要在base.html中添加一个block：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% if title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog:</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('index') &#125;&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% if not current_user.is_authenticated() %&#125;</span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('sign_up') &#125;&#125;"</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('logout') &#125;&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">    &#123;% if messages %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for message in messages %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% block js %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后，当要输入新的个人信息时，击yes后，能将够刷新当前页面并且显示新的个人描述，则修改views.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/user/about-me/&lt;int:user_id&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_me</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    user = User.query.filter(User.id == user_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        content = request.form.get(<span class="string">"describe"</span>)</span><br><span class="line">        <span class="keyword">if</span> len(content) <span class="keyword">and</span> len(content) &lt;= <span class="number">140</span>:</span><br><span class="line">            user.about_me = content</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=user_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"Sorry, May be your data have some error."</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=user_id))</span><br></pre></td></tr></table></figure></p><p>这里和原来写的不太一样，原来的表单提交都是在当前页面进行处理的，当点击yes后，会通过post的方式将数据发送到/user/about-me/2页面上去处理，所以使用request.method == “POST”进行判定之后，获取表单数据，当然也要判断content的长度，并进行相应的处理，最后跳转回用户主页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;5-用户首页和发布博客&quot;&gt;&lt;a href=&quot;#5-用户首页和发布博客&quot; class=&quot;headerlink&quot; title=&quot;5.用户首页和发布博客&quot;&gt;&lt;/a&gt;5.用户首页和发布博客&lt;/h2&gt;&lt;p&gt;我们已经完成了登录系统，则可以使用昵称和邮件登录，接下来要完成用户个人界面信息，在此之前先将数据库清空:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; users = User.query.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; users:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...     db.session.delete(u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; posts = Post.query.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; posts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...     db.session.delete(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; db.session.commit()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们将创建用户信息页，显示用户信息以及最近的 blog。作为其中一部分，我们将会学习到显示用户头像。接着，我们将要用户 web 表单用来编辑用户信。&lt;/p&gt;
&lt;h3 id=&quot;1-用户信息首页&quot;&gt;&lt;a href=&quot;#1-用户信息首页&quot; class=&quot;headerlink&quot; title=&quot;1.用户信息首页&quot;&gt;&lt;/a&gt;1.用户信息首页&lt;/h3&gt;&lt;p&gt;创建一个用户信息不需要引入新的概念,只要创建一个新的视图函数以及与它配套的 HTML 模版。添加用户信息类，并定义用户信息字段修改（forms.py）文件&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AboutMeForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    describe = TextAreaField(&lt;span class=&quot;string&quot;&gt;&#39;about me&#39;&lt;/span&gt;, validators=[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Required(), Length(max=&lt;span class=&quot;number&quot;&gt;140&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    submit = SubmitField(&lt;span class=&quot;string&quot;&gt;&#39;YES!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（四）</title>
    <link href="http://bwael.com/2017/02/11/microblog-develop-documentation-04/"/>
    <id>http://bwael.com/2017/02/11/microblog-develop-documentation-04/</id>
    <published>2017-02-11T12:37:46.000Z</published>
    <updated>2018-12-05T03:58:53.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-用户登录"><a href="#4-用户登录" class="headerlink" title="4.用户登录"></a>4.用户登录</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p> 对于登录系统，使用到扩展：Flask-Login。配置情况如下(app/<strong>init</strong>.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask.ext.login <span class="keyword">import</span> LoginManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flask-Login</span></span><br><span class="line">lm = LoginManager()</span><br><span class="line">lm.setup_app(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views, models</span><br></pre></td></tr></table></figure></p><h3 id="2-重构用户模型"><a href="#2-重构用户模型" class="headerlink" title="2.重构用户模型"></a>2.重构用户模型</h3><p>Flask-Login 扩展需要在我们的 User 类中实现一些特定的方法，但是类如何去实现这些方法却没有什么要求，让我们为 Flask-Login 实现的 User 类(app/models.py)</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">15</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">128</span>), index=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default=ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>, lazy=<span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_authenticated</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_active</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_anonymous</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> unicode(self.id)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(cls, user_name)</span>:</span></span><br><span class="line">        user = cls.query.filter(db.or_(</span><br><span class="line">            User.nickname == user_name, User.email == user_name)).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br></pre></td></tr></table></figure><p>is_authenticated 方法有一个具有迷惑性的名称。一般而言，这个方法应该只返回 True，除非表示用户的对象因为某些原因不允许被认证；is_active 方法应该返回 True，除非是用户是无效的，比如因为他们的账号被禁止；is_anonymous 方法应该返回 True，除非是伪造的用户不允许登录系统；get_id 方法应该返回一个用户唯一的标识符，以 unicode 格式返回我们使用数据库生成的唯一的id。</p><h3 id="3-user-loader-回调"><a href="#3-user-loader-回调" class="headerlink" title="3.user_loader 回调"></a>3.user_loader 回调</h3><p>我们已经准备好用 Flask-Login 扩展来开始实现登录系统。<br>首先，我们必须编写一个函数用于从数据库加载用户，这个函数将会被 Flask-Login 使用(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lm.user_loader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</span><br></pre></td></tr></table></figure><p>Flask-Login 中的用户的id永远是 unicode 字符串，因此在我们把id 发送给 Flask-SQLAlchemy 之前，需要把id转成整型是必须的，否则会报错。</p><h3 id="4-登陆视图函数-app-views-py"><a href="#4-登陆视图函数-app-views-py" class="headerlink" title="4.登陆视图函数(app/views.py)"></a>4.登陆视图函数(app/views.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect, session, url_for, request, g </span><br><span class="line"><span class="keyword">from</span> flask.ext.login <span class="keyword">import</span> login_user, logout_user, current_user, login_required </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User, Post, ROLE_USER, ROLE_ADMIN</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app, db, lm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@lm.user_loader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</span><br><span class="line"></span><br><span class="line"><span class="meta">... </span><span class="comment"># 这里省略的是我们的index函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证用户是否被验证</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated():</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'index'</span>)</span><br><span class="line">    <span class="comment"># 注册验证</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user = User.login_check(request.form.get(<span class="string">'user_name'</span>))</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            login_user(user)</span><br><span class="line">            user.last_seen = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"The Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">'Your name: '</span> + request.form.get(<span class="string">'user_name'</span>))</span><br><span class="line">            flash(<span class="string">'remember me? '</span> + str(request.form.get(<span class="string">'remember_me'</span>)))</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"users"</span>, user_id=current_user.id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">'Login failed, Your name is not exist!'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"login.html"</span>,</span><br><span class="line">        title=<span class="string">"Sign In"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure><p>整个流程就是，验证用户，验证用户是否已经注册，如果注册则从数据库中加载用户并转到用户页面。如果要让这些都起作用的话，Flask-Login 需要知道哪个视图允许用户登录。我们在应用程序模块初始化中配置(app/init.py)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lm = LoginManager()</span><br><span class="line">lm.setup_app(app)</span><br></pre></td></tr></table></figure></p><h3 id="5-首页视图"><a href="#5-首页视图" class="headerlink" title="5.首页视图"></a>5.首页视图</h3><p>前面我们的 index 视图函数使用了伪造的对象，因为那时候我们并没有用户或者 blog。现在我们有用户了，让我们使用它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    user = <span class="string">'Man'</span></span><br><span class="line">    posts = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'nickname'</span>: <span class="string">'John'</span>&#125;,</span><br><span class="line"></span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'Beautiful day in Portland!'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'nickname'</span>: <span class="string">'Susan'</span>&#125;,</span><br><span class="line"></span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'The Avengers movie was so cool!'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"index.html"</span>,</span><br><span class="line">        title=<span class="string">"Home"</span>,</span><br><span class="line">        user=user,</span><br><span class="line">        posts=posts)</span><br></pre></td></tr></table></figure></p><h3 id="6-登录"><a href="#6-登录" class="headerlink" title="6.登录"></a>6.登录</h3><p>我们已经实现了登录，现在增加登陆的功能，即对登录视图函数进行修改（app/views.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>其中login_required是为了验证用户必须是登陆的前提，才会有登出。</p><h3 id="7-注册"><a href="#7-注册" class="headerlink" title="7.注册"></a>7.注册</h3><ul><li>再注册前，我们需要修改app/forms.py文件以绑定数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TextField, BooleanField, SubmitField, TextAreaField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Required, Email, Length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    user_name = TextField(<span class="string">'user name'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">15</span>)])</span><br><span class="line">    remember_me = BooleanField(<span class="string">'remember me'</span>, default=<span class="keyword">False</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">'Log in'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignUpForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    user_name = TextField(<span class="string">'user name'</span>, validators=[</span><br><span class="line">        Required(), Length(max=<span class="number">15</span>)])</span><br><span class="line">    user_email = TextField(<span class="string">'user email'</span>, validators=[</span><br><span class="line">        Email(), Required(), Length(max=<span class="number">128</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'Sign up'</span>)</span><br></pre></td></tr></table></figure><p>在这里添加了类SignUpForm，用户的用户名和邮件的注册提交</p><ul><li>接着，实现用户注册视图(app/views.py)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm， SignUpForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/sign-up', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_up</span><span class="params">()</span>:</span></span><br><span class="line">    form = SignUpForm()</span><br><span class="line">    user = User()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">        user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line"></span><br><span class="line">        register_check = User.query.filter(db.or_(</span><br><span class="line">            User.nickname == user_name, User.email == user_email)).first()</span><br><span class="line">        <span class="keyword">if</span> register_check:</span><br><span class="line">            flash(<span class="string">"error: The user's name or email already exists!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/sign-up'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(user_name) <span class="keyword">and</span> len(user_email):</span><br><span class="line">            user.nickname = user_name</span><br><span class="line">            user.email = user_email</span><br><span class="line">            user.role = ROLE_USER</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flash(<span class="string">"The Database error!"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/sign-up'</span>)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">"Sign up successful!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">"sign_up.html"</span>,</span><br><span class="line">        form=form)</span><br></pre></td></tr></table></figure></li></ul><p>在提交注册信息的时候验证数据库中是否已经注册该用户信息，如果没有注册则在数据库中提交该信息，并显示注册成功，转到首页。</p><ul><li><p>在修改主页index.html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated() %&#125;</span><br><span class="line">&lt;h1&gt;Hi, Guys!&lt;/h1&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">&lt;h1&gt;Welcome back, &#123;&#123; current_user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改登录模版（login.html）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign Up&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"/login"</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">   &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">   &lt;p&gt;Please enter your name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_name %&#125;</span><br><span class="line">   &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">   &lt;p&gt;记住我？ &#123;&#123; form.remember_me &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>当现在如果运行程序的话，肯定会说用户名不存在，因为还需要建立一个注册模版（sign_up.html）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/sign-up"</span>, method=<span class="string">"POST"</span> name=<span class="string">"sign_up"</span>&gt;</span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    &lt;p&gt;Nick name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_name %&#125;</span><br><span class="line">    &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;E-mail: &#123;&#123; form.user_email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.user_email %&#125;</span><br><span class="line">    &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>但是还没有在模版中添加登出和注册的链接。将要把这个链接放在基础层中的导航栏里(app/templates/base.html)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123;title&#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;Microblog: </span><br><span class="line">        &lt;a href="&#123;&#123; url_for('index') &#125;&#125;"&gt;Home&lt;/a&gt;</span><br><span class="line">        &#123;% <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated() %&#125;</span><br><span class="line">        | &lt;a href="&#123;&#123; url_for('login') &#125;&#125;"&gt;Log in&lt;/a&gt;</span><br><span class="line">        or &lt;a href="&#123;&#123; url_for('sign_up') &#125;&#125;"&gt;Sign up&lt;/a&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        | &lt;a href="&#123;&#123; url_for('logout') &#125;&#125;"&gt;Logout&lt;/a&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &#123;% <span class="keyword">with</span> messages = get_flashed_messages() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> messages %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> message <span class="keyword">in</span> messages %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% block js %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;4-用户登录&quot;&gt;&lt;a href=&quot;#4-用户登录&quot; class=&quot;headerlink&quot; title=&quot;4.用户登录&quot;&gt;&lt;/a&gt;4.用户登录&lt;/h2&gt;&lt;h3 id=&quot;1-配置&quot;&gt;&lt;a href=&quot;#1-配置&quot; class=&quot;headerlink&quot; title=&quot;1.配置&quot;&gt;&lt;/a&gt;1.配置&lt;/h3&gt;&lt;p&gt; 对于登录系统，使用到扩展：Flask-Login。配置情况如下(app/&lt;strong&gt;init&lt;/strong&gt;.py)&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-*- coding:utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask.ext.sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SQLAlchemy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask.ext.login &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LoginManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化flask应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.config.from_object(&lt;span class=&quot;string&quot;&gt;&#39;config&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db = SQLAlchemy(app)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化flask-Login&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lm = LoginManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lm.setup_app(app)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; app &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; views, models&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-重构用户模型&quot;&gt;&lt;a href=&quot;#2-重构用户模型&quot; class=&quot;headerlink&quot; title=&quot;2.重构用户模型&quot;&gt;&lt;/a&gt;2.重构用户模型&lt;/h3&gt;&lt;p&gt;Flask-Login 扩展需要在我们的 User 类中实现一些特定的方法，但是类如何去实现这些方法却没有什么要求，让我们为 Flask-Login 实现的 User 类(app/models.py)&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（三）</title>
    <link href="http://bwael.com/2017/02/11/microblog-develop-documentation-03/"/>
    <id>http://bwael.com/2017/02/11/microblog-develop-documentation-03/</id>
    <published>2017-02-11T08:21:46.000Z</published>
    <updated>2018-12-05T03:58:38.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h2><h3 id="1-flask中的数据库"><a href="#1-flask中的数据库" class="headerlink" title="1.flask中的数据库"></a>1.flask中的数据库</h3><ul><li><p>数据库迁移，使用 SQLAlchemy-migrate 来跟踪数据库的更新。这只是在开始建立数据库的时候比较花费工作时间，以后就再不用人工进行数据的迁移了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> flask/bin/activate</span><br><span class="line">$ pip install SQLAlchemy-migrate</span><br></pre></td></tr></table></figure></li><li><p>数据库配置，针对我们小型的应用，我们将采用 sqlite 数据库，sqlite 数据库是小型应用的最方便的选择，每一个数据库都是存储在单个文件里，这里对config.py进行再次配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">sqlalchemy_database_url = <span class="string">'sqlite:///'</span> + os.path.join(basedir, <span class="string">'app.db'</span>)</span><br><span class="line">sqlalchemy_migrate_repo = os.path.join(basedir, <span class="string">'db_repository'</span>)</span><br></pre></td></tr></table></figure><p>sqlalchemy_database_url是 Flask-aqlalchemy 扩展需要的，存储我们数据库文件的路径,sqlalchemy_migrate_repo 是文件夹,存储数据库文件。对<strong>init</strong>.py文件更新。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views, models</span><br></pre></td></tr></table></figure><pre><code>创建了一个 db 对象，这是我们的数据库，接着导入一个新的模块，叫做 models。</code></pre></li><li><p>数据库模型(app/models.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">ROLE_USER = <span class="number">0</span></span><br><span class="line">ROLE_ADMIN = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">nickname = db.Column(db.String(<span class="number">64</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</span><br><span class="line">email = db.Column(db.String(<span class="number">120</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</span><br><span class="line">role = db.Column(db.SmallInteger, default = ROLE_USER)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br></pre></td></tr></table></figure><p>创建的 User 类包含一些字段，这些字段被定义成类的变量,repr 方法告诉 Python 如何打印这个类的对象。</p></li><li><p>创建数据库，创建数据库脚本文件(db_create.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"><span class="comment"># 当数据库不存在的时候创建新的数据库</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(SQLALCHEMY_MIGRATE_REPO):</span><br><span class="line">    api.create(SQLALCHEMY_MIGRATE_REPO, <span class="string">'database repository'</span>)</span><br><span class="line">    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="comment"># 否则直接更新</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, api.version(SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure><p>运行这个脚本文件，python db_create.py，运行完后在app下会发现新的app.db文件，这是一个空的sqlite数据库，创建后就支持迁移，还有一个db_repository文件，这是SQLAlchemy-migrate 存储它的数据文件的地方。</p></li></ul><h3 id="2-第一次迁移"><a href="#2-第一次迁移" class="headerlink" title="2.第一次迁移"></a>2.第一次迁移</h3><p>这是我们第一次迁移，我们将从一个空数据库迁移到一个能存储用户的数据库上，用db_migrate.py实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">migration = SQLALCHEMY_MIGRATE_REPO + <span class="string">'/versions/%03d_migration.py'</span> % (api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tmp_module = imp.new_module(<span class="string">'old_model'</span>)</span><br><span class="line">old_model = api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">exec</span> old_model <span class="keyword">in</span> tmp_module.__dict__</span><br><span class="line"><span class="comment"># 将数据库与更新后的模型结构之间的不同内容存入到迁移脚本中</span></span><br><span class="line">script = api.make_update_script_for_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, tmp_module.meta, db.metadata)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将迁移脚本写入迁移仓库中</span></span><br><span class="line">open(migration, <span class="string">"wt"</span>).write(script)</span><br><span class="line">api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'New migration saved as '</span> + migration</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure></p><p>SQLAlchemy-migrate 迁移的方式就是比较数据库(app.db)与我们模型的结构(app/models.py),两者间的不同将会被记录成一个迁移脚本存放在迁移仓库中。</p><ul><li>数据库的升级db_upgrade.py和回退db_downgrade.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line">api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure><p>如果有数据库迁移的支持，当你准备发布新版的时候，你只需要录制一个新的迁移，拷贝迁移脚本到生产服务器上接着运行脚本，所有事情就完成了，数据库升级也只需要一点 Python 脚本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> SQLALCHEMY_MIGRATE_REPO</span><br><span class="line"></span><br><span class="line">v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)</span><br><span class="line">api.downgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, v - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Current database version: '</span> + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))</span><br></pre></td></tr></table></figure></p><p>这个脚本会回退数据库一个版本，可以运行多次来回退多个版本。</p><ul><li>数据库关系</li></ul><p>连接用户和他们写的 blog。方式就是通过在 posts 增加一个字段，这个字段包含了编写 blog 的用户的 id。这个 id 称为一个外键，users 表中的 id 与 posts 表中的 user_id，这种关系称为一对多，一个用户编写多篇 blog。<br>对模板进行修改，(app/models.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">ROLE_USER = <span class="number">0</span></span><br><span class="line">ROLE_ADMIN = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">    nickname = db.Column(db.String(<span class="number">64</span>), unique = <span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique = <span class="keyword">True</span>)</span><br><span class="line">    role = db.Column(db.SmallInteger, default = ROLE_USER)</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref = <span class="string">'author'</span>, lazy = <span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</span><br><span class="line">    body = db.Column(db.String(<span class="number">140</span>))</span><br><span class="line">    timestamp = db.Column(db.DateTime)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Post %r&gt;'</span> % (self.body)</span><br></pre></td></tr></table></figure></p><p>添加了一个 Post 类，这是用来表示用户编写的 blog。在 Post 类中的 user_id 字段初始化成外键，因此让 Flask-SQLAlchemy 知道这个字段是连接到用户上。</p><h3 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3.数据库操作"></a>3.数据库操作</h3><ul><li>首先创建一个新用户名为john<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line"><span class="comment"># 进入交互式界面</span></span><br><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; from app.models import User, Post, ROLE_USER, ROLE_ADMIN</span><br><span class="line">&gt;&gt;&gt; u1 = User(nickname=<span class="string">'john'</span>, email=<span class="string">'john@email.com'</span>, role=ROLE_USER)</span><br><span class="line">&gt;&gt;&gt; db.session.add(u1)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><p>在会话的上下文中完成对数据库的更改。多个的更改可以在一个会话中累积，当所有的更改已经提交，你可以发出一个db.session.commit()，这能原子地写入更改。如果在会话中出现错误的时候， db.session.rollback() 可以使得数据库回到会话开始的状态；若没有 commit 也没有 rollback 发生，系统默认情况下会回滚会话。会话保证数据库将永远保持一致的状态。</p><ul><li><p>添加另一个用户susan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u2 = User(nickname=<span class="string">'susan'</span>, email=<span class="string">'susan@email.com'</span>, role=ROLE_USER)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(u2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br></pre></td></tr></table></figure></li><li><p>查询用户</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>users = User.query.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> users [&lt;User <span class="string">u'john'</span>&gt;, &lt;User <span class="string">u'susan'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">    ...     <span class="keyword">print</span> u.id,u.nickname</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">1</span> john</span><br><span class="line">    <span class="number">2</span> susan</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>提交一篇 blog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Post(body=<span class="string">'my first post!'</span>, timestamp=datetime.datetime.utcnow(), author=u)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(p)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><p>设置我们的 timestamp 为UTC 时区，所有存储在数据库的时间戳都会是 UTC，世界上不同地方的用户因此需要有个统一的时间单位。</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u</span><br><span class="line">    &lt;User <span class="string">u'john'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts = u.posts.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> posts</span><br><span class="line">    [&lt;Post <span class="string">u'my first post!'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得john的个人信息和所有博客内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> posts:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> p.id,p.author.nickname,p.body</span><br><span class="line">...</span><br><span class="line">  <span class="number">1</span> john my first post!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.get(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u</span><br><span class="line">  &lt;User <span class="string">u'susan'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u.posts.all()</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3-数据库&quot;&gt;&lt;a href=&quot;#3-数据库&quot; class=&quot;headerlink&quot; title=&quot;3.数据库&quot;&gt;&lt;/a&gt;3.数据库&lt;/h2&gt;&lt;h3 id=&quot;1-flask中的数据库&quot;&gt;&lt;a href=&quot;#1-flask中的数据库&quot; class=&quot;headerlink&quot; title=&quot;1.flask中的数据库&quot;&gt;&lt;/a&gt;1.flask中的数据库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据库迁移，使用 SQLAlchemy-migrate 来跟踪数据库的更新。这只是在开始建立数据库的时候比较花费工作时间，以后就再不用人工进行数据的迁移了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; flask/bin/activate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pip install SQLAlchemy-migrate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库配置，针对我们小型的应用，我们将采用 sqlite 数据库，sqlite 数据库是小型应用的最方便的选择，每一个数据库都是存储在单个文件里，这里对config.py进行再次配置。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;basedir = os.path.abspath(os.path.dirname(__file__))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlalchemy_database_url = &lt;span class=&quot;string&quot;&gt;&#39;sqlite:///&#39;&lt;/span&gt; + os.path.join(basedir, &lt;span class=&quot;string&quot;&gt;&#39;app.db&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlalchemy_migrate_repo = os.path.join(basedir, &lt;span class=&quot;string&quot;&gt;&#39;db_repository&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;sqlalchemy_database_url是 Flask-aqlalchemy 扩展需要的，存储我们数据库文件的路径,sqlalchemy_migrate_repo 是文件夹,存储数据库文件。对&lt;strong&gt;init&lt;/strong&gt;.py文件更新。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（二）</title>
    <link href="http://bwael.com/2017/02/10/microblog-develop-documentation-02/"/>
    <id>http://bwael.com/2017/02/10/microblog-develop-documentation-02/</id>
    <published>2017-02-10T11:41:46.000Z</published>
    <updated>2018-12-05T03:58:11.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-flask表单初始化"><a href="#4-flask表单初始化" class="headerlink" title="4. flask表单初始化"></a>4. flask表单初始化</h3><ul><li>表单配置<br>许多 Flask 扩展需要大量的配置，因此我们将要在 microblog/ 文件夹下创建一个配置文件以至于容易被编辑。这就是我们将要开始的(config.py)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSRF_ENABLED = <span class="keyword">True</span></span><br><span class="line">SECRET_KEY = <span class="string">'bawel'</span></span><br></pre></td></tr></table></figure><p>CSRF_ENABLED 配置是为了激活跨站点请求伪造保护,SECRET_KEY 配置仅仅当 CSRF 激活的时候才需要，它是用来建立一个加密的令牌，用于验证一个表单。当你编写自己的应用程序的时候，请务必设置一个很难被猜测到的密钥。当有了配置文件，我们需要告诉 Flask 去读取以及使用它。我们可以在 Flask 应用程序对象被创建后去做，方式如下(app/<strong>init</strong>.py)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">   app = Flask(__name__)</span><br><span class="line">   app.config.from_object(<span class="string">'config'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">from</span> app <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure></p><ul><li>用户登录表单</li></ul><p>创建一个登录表单，用于用户认证系统。在我们应用程序中支持的登录机制是标准的用户名/密码类型 我们同时在表单上提供一个remember me的选择框，以至于用户可以选择在他们的网页浏览器上种植 cookie ，当他们再次访问的时候，浏览器能够记住他们的登录，编写第一个表单(app/forms.py)</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TextField, BooleanField, PasswordField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Required</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = TextField(<span class="string">'Name'</span>, validators=[Required()])</span><br><span class="line">    password = PasswordField(<span class="string">'password'</span>, validators=[Required()])</span><br><span class="line">    remember_me = BooleanField(<span class="string">'Remember_me'</span>, default=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>我们导入 Form 类，接着导入两个我们需要的字段类，TextField 和 BooleanField。Required 是一个验证器，一个函数，它能够作用于一个域，用于对用户提交的数据进行验证。 Required 验证器只是简单地检查相应域提交的数据是否是空。</p><ul><li>表单模板，我们刚刚创建的 LoginForm 类知道如何呈现为 HTML 表单字段，所以我们只需要集中精力在布局上。这里就是我们登录的模板(app/templates/login.html)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- extend from base layout --&gt;</span><br><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign In&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">    &#123;&#123;form.hidden_tag()&#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Please enter your Name:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.name(size=<span class="number">80</span>)&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Password:&lt;br&gt;</span><br><span class="line">        &#123;&#123; form.password &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me?&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>base.html 模板通过 extends 模板继承声明语句,form.hidden_tag() 模板参数将被替换为一个隐藏字段，用来是实现在配置中激活的 CSRF 保护。如果已经激活了 CSRF，这个字段需要出现在所有的表单中。</p><ul><li><p>表单视图，(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect</span><br><span class="line">    <span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm</span><br><span class="line">    <span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">    <span class="comment"># 这里省略了索引函数</span></span><br><span class="line"><span class="meta">    @app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">        form = LoginForm()</span><br></pre></td></tr></table></figure><p>我们已经导入 LoginForm 类，从这个类实例化一个对象，接着把它传入到模板中。这就是我们渲染表单所有要做的。</p></li></ul><h3 id="5-表单数据"><a href="#5-表单数据" class="headerlink" title="5. 表单数据"></a>5. 表单数据</h3><ul><li>接收表单数据，flask-wtf处理提交的数据，登录视图函数更新的版本，它验证并且存储表单数据 (app/views.py)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        flash(<span class="string">'Login requested for Name: '</span> + form.name.data)</span><br><span class="line">        flash(<span class="string">'passwd: '</span> + str(form.password.data))</span><br><span class="line">        flash(<span class="string">'remember_me: '</span> + str(form.remember_me.data))</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, </span><br><span class="line">    title = <span class="string">'Sign In'</span>,</span><br><span class="line">    form = form)</span><br></pre></td></tr></table></figure><p>当validate_on_submit 在表单提交请求中被调用，它将会收集所有的数据，对字段进行验证，如果所有的事情都通过的话，它将会返回 True，表示数据都是合法的。若有一个没通过验证，则返回false，接着表单会重新呈现给用户，这也将给用户一次机会去修改错误。当 validate_on_submit 返回 True，登录视图函数调用了两个新的函数，flash函数是一种快速的方式下呈现给用户的页面上显示一个消息。<br>*加强字段验证，当字段验证失败的时候， Flask-WTF 会向表单对象中添加描述性的错误信息。这些信息是可以在模板中使用的，因此我们只需要增加一些逻辑来获取它，这就是我们含有字段验证信息的登录模板(app/templates/login.html)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- extend base layout --&gt;</span><br><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Sign In&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span>&gt;</span><br><span class="line">    &#123;&#123;form.hidden_tag()&#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Please enter your OpenID:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.name(size=<span class="number">80</span>)&#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.name %&#125;</span><br><span class="line">        &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt;</span><br><span class="line">        &#123;% endfor %&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Password:&lt;br&gt;</span><br><span class="line">        &#123;&#123;form.pawword&#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.password %&#125;</span><br><span class="line">        &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt;</span><br><span class="line">        &#123;% endfor %&#125;&lt;br&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;4-flask表单初始化&quot;&gt;&lt;a href=&quot;#4-flask表单初始化&quot; class=&quot;headerlink&quot; title=&quot;4. flask表单初始化&quot;&gt;&lt;/a&gt;4. flask表单初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;表单配置&lt;br&gt;许多 Flask 扩展需要大量的配置，因此我们将要在 microblog/ 文件夹下创建一个配置文件以至于容易被编辑。这就是我们将要开始的(config.py)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CSRF_ENABLED = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SECRET_KEY = &lt;span class=&quot;string&quot;&gt;&#39;bawel&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CSRF_ENABLED 配置是为了激活跨站点请求伪造保护,SECRET_KEY 配置仅仅当 CSRF 激活的时候才需要，它是用来建立一个加密的令牌，用于验证一个表单。当你编写自己的应用程序的时候，请务必设置一个很难被猜测到的密钥。当有了配置文件，我们需要告诉 Flask 去读取以及使用它。我们可以在 Flask 应用程序对象被创建后去做，方式如下(app/&lt;strong&gt;init&lt;/strong&gt;.py)&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   app.config.from_object(&lt;span class=&quot;string&quot;&gt;&#39;config&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; app &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; views&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户登录表单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个登录表单，用于用户认证系统。在我们应用程序中支持的登录机制是标准的用户名/密码类型 我们同时在表单上提供一个remember me的选择框，以至于用户可以选择在他们的网页浏览器上种植 cookie ，当他们再次访问的时候，浏览器能够记住他们的登录，编写第一个表单(app/forms.py)&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>基于flask的microBlog开发笔记（一）</title>
    <link href="http://bwael.com/2017/01/09/microblog-develop-documentation-01/"/>
    <id>http://bwael.com/2017/01/09/microblog-develop-documentation-01/</id>
    <published>2017-01-09T14:11:26.000Z</published>
    <updated>2018-12-05T03:57:53.081Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址： <a href="https://coding.net/u/bwael/p/micblog/git" target="_blank" rel="noopener">https://coding.net/u/bwael/p/micblog/git</a></p><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><ul><li>在linux系统开发</li><li>开发语言python,使用框架flask</li><li>使用Mysql数据库,初期使用sqlite方便开发</li></ul><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><h3 id="1-flask的安装"><a href="#1-flask的安装" class="headerlink" title="1. flask的安装"></a>1. flask的安装</h3><ul><li><p>创建一个全新的实验环境，则安装python虚拟软件管理包virtualenv来创建python的<br>独立环境,先更新软件包,在安装pip和虚拟环境virtualenv：</p><p><code>$ sudo pacman -Syy</code></p><p><code>$ sudo pacman -S python-pip python-virtualenv</code></p></li><li><p>创建虚拟环境,先创建一个虚拟环境flask，在激活环境，</p><p><code>$ virtualenv flask</code></p><p><code>$ cd flask</code></p><p><code>$ source bin/activate</code></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install flask flask-login flask-openid flask-mail splalchemy </span><br><span class="line">flask-sqlalchemy sqlalchemy-migrate flask-whooshalchemy flask-wtf pytz </span><br><span class="line">flask-babel flup</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-体验flask"><a href="#2-体验flask" class="headerlink" title="2. 体验flask"></a>2. 体验flask</h3><ul><li>在home/bwael目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p micblog/app</span><br><span class="line">$ mkdir -p micblog/app/static</span><br><span class="line">$ mkdir -p micblog/app/templates</span><br></pre></td></tr></table></figure><p>tips:我们的应用程序包是放置在app文件夹中，子文件夹<br>static用来放置静态文件，子文件夹templates是存放模板文<br>件类的html文件。</p><ul><li><p>接下来进入到app文件夹中，并创建<em>init</em>.py和views.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> micblog/app</span><br><span class="line">$ touch __init__.py</span><br><span class="line">$ touch views.py</span><br></pre></td></tr></table></figure></li><li><p>对app包通过命令vi_init_.py进行简单的初始化，在<em>init</em>.py中写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure></li></ul><p>上面的代码简单的创建应用对象，接着从app中导入视图模块views文件内容，视图是响应来自网页浏览器的请求的处理器，在flask中视图以python函数形式表示。</p><ul><li>编写视图函数(app/views.py)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Hello!!"</span></span><br></pre></td></tr></table></figure></li></ul><p>完整的web应用程序最后一步建一个脚本rnu.py，用于启动应用程序的开发web服务器，将其置于micblog目录下。</p><ul><li>micblog/run.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">app.run(debug = <span class="keyword">True</span>,port=<span class="number">8888</span>)</span><br><span class="line">​`</span><br></pre></td></tr></table></figure><p>  启动运行后在客户端的浏览器中输入<a href="http://127.0.0.1:8888,在网页中会显示hello!字符串。" target="_blank" rel="noopener">http://127.0.0.1:8888,在网页中会显示hello!字符串。</a></p><p>###3. flask模板</p><ul><li><p>模板中的控制语句，在模板中添加一个if声明(app/templates/index.html)<br>​<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">     &lt;head&gt;</span><br><span class="line">       &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">       &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">       &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">       &lt;title&gt;Welcome to microblog&lt;/title&gt;</span><br><span class="line">       &#123;% endif %&#125;</span><br><span class="line">     &lt;/head&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;Hello, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">     &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>模板中的循环语句，在microblog应用程序中，登陆的用户在首页想要展示自己或者联系人列表中用户最近的文章，我们首先创建一些用户以及他们的文章来展示(app/views.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">   user = &#123; <span class="string">'nickname'</span>: <span class="string">'Miguel'</span> &#125; <span class="comment"># 用户名</span></span><br><span class="line">   posts = [ <span class="comment"># 提交内容</span></span><br><span class="line">       &#123; </span><br><span class="line">           <span class="string">'author'</span>: &#123; <span class="string">'nickname'</span>: <span class="string">'John'</span> &#125;, </span><br><span class="line">           <span class="string">'body'</span>: <span class="string">'Beautiful day in Portland!'</span> </span><br><span class="line">       &#125;,</span><br><span class="line">       &#123; </span><br><span class="line">           <span class="string">'author'</span>: &#123; <span class="string">'nickname'</span>: <span class="string">'Susan'</span> &#125;, </span><br><span class="line">           <span class="string">'body'</span>: <span class="string">'The Avengers movie was so cool!'</span> </span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,</span><br><span class="line">                          title = <span class="string">'Home'</span>,</span><br><span class="line">                          user = user,</span><br><span class="line">                          posts = posts)</span><br></pre></td></tr></table></figure><p>在模板中，列表中可能有许多元素，有多少篇文章被展示取决于视图函数，模板不会假设有多少文章，所以必须准备渲染视图传送的文章数量，使用for来做到这一点(app/templates/index.html)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">     &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">     &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">     &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">     &#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">     &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">     &#123;% endfor %&#125;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在模板继承中，允许我们把所有模板公共的部分移除出页面的布局，接着把它们放在一个基础模板中，所有使用它的模板可以导入该基础模板。定义一个基础模板，该模板包含导航栏以及标题(app/templates/base.html)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;title&gt;microblog&lt;/title&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;Microblog: &lt;a href="/index"&gt;Home&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在这个模板中使用block控制语句来定义派生模板可以插入的地方，块被赋予唯一的名字。接着就是修改index.html模板继承自base.html(app/templates/index.html)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts %&#125;</span><br><span class="line">&lt;div&gt;&lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址： &lt;a href=&quot;https://coding.net/u/bwael/p/micblog/git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://coding.net/u/bwael/p/micblog/git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-开发环境&quot;&gt;&lt;a href=&quot;#1-开发环境&quot; class=&quot;headerlink&quot; title=&quot;1. 开发环境&quot;&gt;&lt;/a&gt;1. 开发环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在linux系统开发&lt;/li&gt;
&lt;li&gt;开发语言python,使用框架flask&lt;/li&gt;
&lt;li&gt;使用Mysql数据库,初期使用sqlite方便开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-环境配置&quot;&gt;&lt;a href=&quot;#2-环境配置&quot; class=&quot;headerlink&quot; title=&quot;2. 环境配置&quot;&gt;&lt;/a&gt;2. 环境配置&lt;/h2&gt;&lt;h3 id=&quot;1-flask的安装&quot;&gt;&lt;a href=&quot;#1-flask的安装&quot; class=&quot;headerlink&quot; title=&quot;1. flask的安装&quot;&gt;&lt;/a&gt;1. flask的安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个全新的实验环境，则安装python虚拟软件管理包virtualenv来创建python的&lt;br&gt;独立环境,先更新软件包,在安装pip和虚拟环境virtualenv：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo pacman -Syy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo pacman -S python-pip python-virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建虚拟环境,先创建一个虚拟环境flask，在激活环境，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ virtualenv flask&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd flask&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ source bin/activate&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
      <category term="flask" scheme="http://bwael.com/tags/flask/"/>
    
      <category term="web" scheme="http://bwael.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记01</title>
    <link href="http://bwael.com/2016/09/03/C-Network-1/"/>
    <id>http://bwael.com/2016/09/03/C-Network-1/</id>
    <published>2016-09-03T02:46:01.000Z</published>
    <updated>2016-09-03T04:26:42.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>计算机网络是通过通信设施将地理上分散的具有自治功能的多个计算机系统互联起来，进行信息交换，实现资源共享、互操作和协同工作的系统。<br>简明的定义：自治的计算机的互联集合。</p><h3 id="OSI参考模型与TCP-IP参考模型"><a href="#OSI参考模型与TCP-IP参考模型" class="headerlink" title="OSI参考模型与TCP/IP参考模型"></a>OSI参考模型与TCP/IP参考模型</h3><h4 id="OSI七层网络模型"><a href="#OSI七层网络模型" class="headerlink" title="OSI七层网络模型"></a>OSI七层网络模型</h4><ol><li>应用层（Application</li><li>表示层（Presentation</li><li>会话层（Session</li><li>传输层（Transport    </li><li>网络层（Network</li><li>数据链路层（Data Link</li><li>物理层（Physical</li></ol><h4 id="TCP-IP四层概念模型"><a href="#TCP-IP四层概念模型" class="headerlink" title="TCP/IP四层概念模型"></a>TCP/IP四层概念模型</h4><ol><li>应用层（对应 应用层、表示层、会话层</li><li>传输层（对应 传输层</li><li>网络层（对应 网络层</li><li>网络接口层（对应 数据链路层、物理层</li></ol><h3 id="OSI模型描述计算机网络通信中数据传输的过程"><a href="#OSI模型描述计算机网络通信中数据传输的过程" class="headerlink" title="OSI模型描述计算机网络通信中数据传输的过程"></a>OSI模型描述计算机网络通信中数据传输的过程</h3><ol><li>封装：在发送方，数据从上到下逐层传递过程中，每层要加上适当的控制信息。</li><li>传输：到最底层，数据成为二进制比特流，再转换为电信号<strong>通过物理介质传输到接收方</strong>。</li><li>拆封：在接收方，数据从下到上，要逐层剥去发送方相应层加上的控制信息。</li></ol><h3 id="传输效率的计算"><a href="#传输效率的计算" class="headerlink" title="传输效率的计算"></a>传输效率的计算</h3><blockquote><p>长度为100字节的应用层数据交给运输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部18字节。试求数据的<strong>传输效率</strong>。<br>若应用层数据长度为1000字节，数据的传输效率是多少？</p></blockquote><p><strong>答</strong>：数据长度为100字节时<br>传输效率=100/（100+20+20+18）=63.3%</p><p>数据长度为1000字节时，<br>传输效率=1000/（1000+20+20+18）=94.5%</p><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><ul><li><p>（1）从网络结点分布范围来看，可分为局域网（Local Area Network，LAN）、广域网（Wide Area Network，WAN）和城域网（Metropolitan Area Network，MAN）。以及个人区域网（Personal Area Network，PAN）</p></li><li><p>（2）按交换方式可分为电路交换网络（Circurt Switching）、报文交换网络（Message Switching）和分组交换网络（Packet Switching）。 </p></li><li><p>（3）按网络拓扑结构可分为星型网络、树型网络、总线型网络、环型网络和网状网络（不规则型网络）。</p></li><li><p>（4）按传输介质可以分为有线网络和无线网络。</p></li></ul><h3 id="计算机网络相关性能指标"><a href="#计算机网络相关性能指标" class="headerlink" title="计算机网络相关性能指标"></a>计算机网络相关性能指标</h3><h4 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h4><p>每秒钟通过信道传输的信息量称为比特传输速率，记作rb。单位是比特/秒（b/s或bit/s），简称比特率。也可写为bps(bit per second)</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>原指某个信号具有的频带宽度。带宽也表示通信线路所能传送数据的能力。即在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。又是b/s。</p><h4 id="传播速率"><a href="#传播速率" class="headerlink" title="传播速率"></a>传播速率</h4><p>MDZZ</p><h4 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h4><p>发送数据帧所需要的时间。<br><strong>发送时延 = 数据帧长度（b）/ 发送速率（b/s）</strong></p><h4 id="发送时延-传输时延"><a href="#发送时延-传输时延" class="headerlink" title="发送时延==传输时延"></a>发送时延==传输时延</h4><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中传播一定距离需要花费的时间。<br><strong>传播时延 = 信道长度（m） / 电磁波在信道上的传输速率（m/s)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;计算机网络是通过通信设施将地理上分散的具有自治功能的多个计算机系统互联起来，进行信息交换，实现资源共享、互操作和协同工作的系统。&lt;br&gt;简明
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="http://bwael.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记08----文件操作</title>
    <link href="http://bwael.com/2016/06/04/pynote08/"/>
    <id>http://bwael.com/2016/06/04/pynote08/</id>
    <published>2016-06-04T08:18:52.000Z</published>
    <updated>2016-08-30T12:44:58.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>文本文件的读写主要通过open()所构建的文件对象来实现。</p><p><strong>基本格式</strong></p><p>f = open(文件名，模式)</p><p><strong>最常用的模式有：</strong></p><ol><li>“r”       # 只读</li><li>“w”     # 写入                                                               —-&gt;如果文件中已经有内容，会把内容抹掉，如果不存在该文件，会新建文件</li><li>“a”      #追加模式                                                       —–&gt;在已有的文字后添加文字</li><li>“b”      #二进制模式（还在其他模式中追加使用）—–&gt;一般在处理音频、图像等文件的时候使用</li><li>“+”      #读/写模式(可在其他模式中追加使用)        —–&gt;r+、w+ 可读可写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>, <span class="string">'w'</span>)       <span class="comment">#创建一个名为f的类文件对象，对test1.txt进行写操作</span></span><br><span class="line">f.write(<span class="string">"大家好，我是王尼玛"</span>)    <span class="comment">#像文件中写入字符串</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>)            <span class="comment">#如果不写模式，默认为读模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = f.readline()          <span class="comment">#一次读一行</span></span><br><span class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (line,end=<span class="string">""</span>)          <span class="comment">#不换行</span></span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家好，我是王尼玛</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"0123456789"</span>)</span><br><span class="line">f.seek(<span class="number">4</span>)                     <span class="comment">#跳到第4个字节</span></span><br><span class="line">f.write(<span class="string">"Hello"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">print(f.read())               <span class="comment">#把字符串全部输出</span></span><br><span class="line">f.seek(<span class="number">2</span>)                     <span class="comment">#跳回到第2个字符</span></span><br><span class="line">print(f.read(<span class="number">5</span>))              <span class="comment">#输出接下来的5个字节</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0123</span>Hello9</span><br><span class="line"><span class="number">23</span>Hel</span><br></pre></td></tr></table></figure><h3 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h3><p>1.<br>以上所讲的仅仅是Python最基本的文件读写功能。更加丰富的文件读写功能由Python的标准库提供。<br>2.<br>read() readline()以及readlines()用法<br>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。然而 .read() 生成文件内容最直接的字符串表示，但对于连续的面向行的处理，它却是不必要的，并且如果文件大于可用内存，则不可能实现这种处理。</p><p>.readline() 和 .readlines() 非常相似。它们都在类似于以下的结构中使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fh = open(<span class="string">'c:\\autoexec.bat'</span>)</span><br><span class="line"><span class="keyword">for</span>  line <span class="keyword">in</span>  fh.readlines():</span><br><span class="line">     <span class="keyword">print</span>（line）</span><br></pre></td></tr></table></figure></p><p>.readline() 和 .readlines() 之间的差异是后者一次读取整个文件，象 .read() 一样。.readlines() 自动将文件内容分析成一个行的列表，该列表可以由 Python 的for … in …结构进行处理。另一方面，.readline() 每次只读取一行，通常比 .readlines() 慢得多。仅当没有足够内存可以一次读取整个文件时，才应该使用 .readline()。（readlines()的输出格式[“I’ll write this message for you\n”, “hehe,that’s will be ok.\n”]）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;文本文件的读写主要通过open()所构建的文件对象来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;f = 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记07----面向对象（类与对象）</title>
    <link href="http://bwael.com/2016/06/02/pynote07/"/>
    <id>http://bwael.com/2016/06/02/pynote07/</id>
    <published>2016-06-02T11:38:22.000Z</published>
    <updated>2016-08-30T12:42:53.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。</p><p>类是对现实世界中一些事物的封装。在人类认知中，会根据属性相近把东西归类，并且给类别命名。比如说，鸟类的共同属性是有羽毛，通过产卵生育后代。而且，这些鸟还有共同的行为，如飞行、名叫。任何一只特别的鸟都在鸟类的原型基础上的。接下来以鸟为例来介绍类的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span>                                                 <span class="comment">#创建类--鸟</span></span><br><span class="line">    have_feather = <span class="keyword">True</span>                                     <span class="comment">#定义类的属性（have_feather、way_of_reproduction、song均是该类的属性）</span></span><br><span class="line">    way_of_reproduction  = <span class="string">"egg"</span></span><br><span class="line">    song=<span class="string">"叽叽喳喳"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span>                                         <span class="comment">#定义类的方法（self必不可少）</span></span><br><span class="line">        print(self.song)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"飞飞飞飞飞"</span>)</span><br><span class="line">mybird=Bird()                                               <span class="comment">#实例化类的对象，可以使用这个对象访问类中的方法和属性</span></span><br><span class="line">mybird.sing()                                               <span class="comment">#访问类中的方法（对象名.方法）</span></span><br><span class="line">print(<span class="string">"mybird通过"</span>+mybird.way_of_reproduction+<span class="string">"繁殖"</span>)       <span class="comment">#访问类中的属性（+号的作用是连接字符串）</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">叽叽喳喳</span><br><span class="line">mybird通过egg繁殖</span><br></pre></td></tr></table></figure><p>小小的总结一下，我们定义了一个类（class），就是鸟（Bird）。在该类中，我们定义了三个变量，一个是有羽毛（have_feather），一个是生殖方式（way_of_reproduction）,还有一个是叫声（叽叽喳喳），这几个变量就是类的属性（attribute）。我们还定义个两个函数，一个是鸣叫(sing(self))，另一个是移动(move(self)),这两个函数就是类的方法（method）。</p><p>类建好了之后，我将类实例化为一个叫mybird的对象，并利用这个对象对类的属性和方法进行访问。</p><h3 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h3><p>鸟可以继续细分为鸡、鸭、鹅…..这就是所谓的子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span><span class="params">(Bird)</span>:</span>                                           <span class="comment">#继承上例中的Bird</span></span><br><span class="line">    song=<span class="string">"喔喔喔喔喔！"</span>                                        <span class="comment">#重写父类中的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span>                                            <span class="comment">#重写父类中的方法</span></span><br><span class="line">        print(<span class="string">"这种移动方式已经废弃"</span>,end=<span class="string">"---&gt;"</span>)               <span class="comment">#end的作用是把字符串末尾的换行符替换为“---&gt;”</span></span><br><span class="line">        super().move()                                         <span class="comment">#调用父类中的方法(对象是没有super()的)</span></span><br><span class="line">        print(<span class="string">"跑跑跑跑跑"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myChicken=Chicken()</span><br><span class="line">myChicken.move()</span><br><span class="line">myChicken.sing()</span><br></pre></td></tr></table></figure></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self,expression)</span>:</span></span><br><span class="line">        self.value=eval(expression)                         <span class="comment">#计算字符串中的表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Talker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"结果为"</span>,self.value)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TalkCalculator</span><span class="params">(Calculator,Talker)</span>:</span>                    <span class="comment">#本类不做任何事情，但是同时继承两个子类，这种行为叫做多重继承</span></span><br><span class="line">    <span class="keyword">pass</span>                                                    <span class="comment">#pass是空语句，是为了保持程序结构的完整性。</span></span><br><span class="line"></span><br><span class="line">myCal=TalkCalculator()</span><br><span class="line">myCal.calculate(<span class="string">"4+2"</span>)</span><br><span class="line">myCal.talk()</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="1-多态、封装与继承"><a href="#1-多态、封装与继承" class="headerlink" title="1.多态、封装与继承"></a>1.多态、封装与继承</h4><p>多态：意味着可以对不同类的对象进行相同的操作。</p><p>封装：对外部世界隐藏类的细节。</p><p>继承：以普通的类为基础建立专门的类的对象。</p><h4 id="2-面向对象概念"><a href="#2-面向对象概念" class="headerlink" title="2.面向对象概念"></a>2.面向对象概念</h4><p>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p><p>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p><p>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</p><p>方法重载：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。</p><p>实例变量：定义在方法中的变量，只作用于当前实例的类。</p><p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</p><p>实例化：创建一个类的实例，类的具体对象。</p><p>方法：类中定义的函数。</p><p>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p><h4 id="3-子类如何调用父类中的方法"><a href="#3-子类如何调用父类中的方法" class="headerlink" title="3.子类如何调用父类中的方法"></a>3.子类如何调用父类中的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, arg)</span>:</span></span><br><span class="line"><span class="comment">#        A.method(self,arg)                 #1直接写类名调用</span></span><br><span class="line"><span class="comment">#        super(B, self).method(arg)         #2用 super(type, obj).method(arg)方法调用</span></span><br><span class="line">         super().method(arg)                <span class="comment">#3在类定义中调用本类的父类方法，可以直接super().method(arg)</span></span><br></pre></td></tr></table></figure><h4 id="4-方法中的self"><a href="#4-方法中的self" class="headerlink" title="4.方法中的self"></a>4.方法中的self</h4><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。这个特别的变量指对象本身，按照惯例它的名称是self。</p><h2 id="面向对象之续"><a href="#面向对象之续" class="headerlink" title="面向对象之续"></a>面向对象之续</h2><h3 id="特殊的方法"><a href="#特殊的方法" class="headerlink" title="特殊的方法"></a>特殊的方法</h3><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a><strong>init</strong>方法</h4><p><strong>init</strong>方法在类的一个对象被建立时，马上运行。你可以利用这个方法对对象进行初始化。<strong>init</strong>方法类似于C++、C#和Java中的 constructor 。（注意：init的两边各有两条下划线）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>                               <span class="comment">#在__init__中初始化name</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"大家好，我是人贱人爱的"</span>, self.name)</span><br><span class="line">p = Person(<span class="string">"王尼玛"</span>)</span><br><span class="line">p.sayHi()</span><br></pre></td></tr></table></figure></p><h4 id="del方法"><a href="#del方法" class="headerlink" title="del方法"></a><strong>del</strong>方法</h4><p><strong>del</strong>在对象消逝的时候被调用。对象消逝即对象不再被使用，它所占用的内存将返回给系统作它用。<strong>del</strong>方法与 destructor 的概念类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">'''Represents a person.'''</span>                       <span class="comment">#通过Person.__doc__查看</span></span><br><span class="line">    population = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">'''Initializes the person's data.'''</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'(Initializing %s)'</span> % self.name)      <span class="comment">#格式化输出字符串.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># When this person is created, he/she</span></span><br><span class="line">        <span class="comment"># adds to the population</span></span><br><span class="line">        Person.population += <span class="number">1</span>                       <span class="comment">#类的变量在引用的时候是 类名.类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''I am dying.'''</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'%s says bye.'</span> % self.name)</span><br><span class="line"></span><br><span class="line">        Person.population -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'I am the last one.'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'There are still %d people left.'</span> % Person.population)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span>                                 <span class="comment">#可通过Person.sayHi.__doc__查看</span></span><br><span class="line">        <span class="string">'''Greeting by the person.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Really, that's all it does.'''</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Hi, my name is %s.'</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Prints the current population.'''</span></span><br><span class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'I am the only person here.'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'We have %d persons here.'</span> % Person.population)</span><br><span class="line"></span><br><span class="line">swaroop = Person(<span class="string">'Swaroop'</span>)</span><br><span class="line">swaroop.sayHi()</span><br><span class="line">swaroop.howMany()</span><br><span class="line"></span><br><span class="line">kalam = Person(<span class="string">'Abdul Kalam'</span>)</span><br><span class="line">kalam.sayHi()</span><br><span class="line">kalam.howMany()</span><br><span class="line">print(kalam.name)                                    <span class="comment">#对象变量</span></span><br><span class="line"></span><br><span class="line">swaroop.sayHi()</span><br><span class="line">swaroop.howMany()</span><br><span class="line">print(swaroop.name)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(Initializing Swaroop)</span><br><span class="line">Hi, my name is Swaroop.</span><br><span class="line">I am the only person here.</span><br><span class="line">(Initializing Abdul Kalam)</span><br><span class="line">Hi, my name is Abdul Kalam.</span><br><span class="line">We have 2 persons here.</span><br><span class="line">Abdul Kalam</span><br><span class="line">Hi, my name is Swaroop.</span><br><span class="line">We have 2 persons here.</span><br><span class="line">Swaroop</span><br></pre></td></tr></table></figure></p><h3 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h3><p><strong>1.类成员的访问权限</strong></p><p>Python中所有的类成员都是公共的，所有的方法都是有效的。<br>只有一个例外：如果你使用的数据成员名称以双下划线前缀比如__privatevar，Python的名称管理体系会有效地把它作为私有变量。<br>还有这样就有一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。而其他的名称都将作为公共的，可以被其他类/对象使用。记住这只是一个惯例，并不是Python所要求的（与双下划线前缀不同）。</p><p><strong>2.类的变量与对象的变量</strong></p><p>类的变量：由一个类的所有对象（实例）共享使用。当某个对象对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。（ 类名.类变量）<br>对象的变量：由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不是共享的，在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。（对象名.变量）</p><p><strong>3.print的格式化输出</strong></p><p>支持参数格式化，与C语言的printf类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strHello = <span class="string">"the length of (%s) is %d"</span> %(<span class="string">'Hello World'</span>,len(<span class="string">'Hello World'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (strHello)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the length of (Hello World) <span class="keyword">is</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"你好我的名字是%s,我今年%d岁了！"</span> % (<span class="string">"王尼玛"</span>,<span class="number">2</span>))                    <span class="comment">#注意，字符串与后面变量之间没有逗号！</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好我的名字是王尼玛,我今年<span class="number">2</span>岁了！</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。&lt;/p&gt;
&lt;p&gt;类是对
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记06----模块</title>
    <link href="http://bwael.com/2016/06/01/pynote06/"/>
    <id>http://bwael.com/2016/06/01/pynote06/</id>
    <published>2016-05-31T23:58:33.000Z</published>
    <updated>2016-08-30T12:40:56.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？答案是使用模块。模块是一个包含了所有你定义的函数和变量以.py结尾的文件。</p><h3 id="定义并载入模块"><a href="#定义并载入模块" class="headerlink" title="定义并载入模块"></a>定义并载入模块</h3><p>首先来学习如何使用模块。<br>我在c:\test存放一个文件：Hello.py。存放的代码是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure></p><p>接着我们执行下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys                         <span class="comment">#import的作用是导入模块，这里我们导入了sys模块</span></span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)        <span class="comment">#这条语句的作用是告诉解释器从哪里寻找模块。   路径还可以这样写sys.path.append("c:/test")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Hello                       <span class="comment">#这时我们就可以导入自己的模块Hello(模块名为文件名)</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><p>这是可以在c:/test文件夹下看到多了一个新的文件夹<strong>pycache</strong>，在这个文件夹中出现了文件Hello.cpython-34.pyc。这个文件是与平台无关，且已经经过编译处理的。</p><h3 id="包含函数的模块"><a href="#包含函数的模块" class="headerlink" title="包含函数的模块"></a>包含函数的模块</h3><p>我在c:\test存放一个文件：sayHello.py。存放的代码是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>);</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"55555555"</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>我们执行下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)         <span class="comment">#如果被导入的模块与输入他的程序在同一个目录中，则不需要sys.path.append了</span></span><br><span class="line"><span class="keyword">import</span> sayHello</span><br><span class="line"></span><br><span class="line">sayHello.say()                      <span class="comment">#导入模块之后可以调用模块中的函数，但是需要以 模块名.函数  的格式sayHello.cry()</span></span><br></pre></td></tr></table></figure></p><p>得到 hello，另一种方式是直接导入模块里的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"c:\\test"</span>)</span><br><span class="line"><span class="keyword">from</span> sayHello <span class="keyword">import</span> say ,cry       <span class="comment">#直接导入模块中具体的函数，缺点是如果想使用模块中的其他函数，需要追加导入</span></span><br><span class="line"></span><br><span class="line">say()                               <span class="comment">#可以直接使用函数</span></span><br><span class="line">cry()</span><br></pre></td></tr></table></figure></p><h3 id="模块的属性"><a href="#模块的属性" class="headerlink" title="模块的属性"></a>模块的属性</h3><p><strong>name</strong>属性</p><ol><li>如果模块是<strong>被导入</strong>，<strong>name</strong>的值为模块名字(文件名)</li><li>如果模块是<strong>被直接执行</strong>，<strong>name</strong>的值为’<strong>main</strong>’</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:         <span class="comment">#每个Python模块都有它的__name__，如果它是'__main__'，则输出“你好”</span></span><br><span class="line">    print(<span class="string">"你好"</span>)</span><br></pre></td></tr></table></figure><p>输出你好</p><p><strong>以模块的形式被调用，则什么都不会输出</strong></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>当我们编写Python库模块的时候，我们往往运行一些测试语句。当这个程序作为库被import的时候，我们并不需要运行这些测试语句。一种解决方法是在import之前，将模块中的测试语句注释掉。而更优美的解决方法，就是使用<strong>name</strong>。</p><p>下面是一个简单的库程序TestLib.py。当直接运行TestLib.py时，<strong>name</strong>为”<strong>main</strong>“。如果被import的话，<strong>name</strong>为”TestLib”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lib_func</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lib_func_another</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b + <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = <span class="number">101</span></span><br><span class="line">    print(lib_func(test))</span><br></pre></td></tr></table></figure></p><h4 id="doc属性"><a href="#doc属性" class="headerlink" title="doc属性"></a><strong>doc</strong>属性</h4><p>介绍模块的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.__doc__</span><br><span class="line"><span class="string">'This module is always available.  It provides access to the\nmathematical functions defined by the C standard.'</span></span><br></pre></td></tr></table></figure><h3 id="模块包"><a href="#模块包" class="headerlink" title="模块包"></a>模块包</h3><p>可以将功能相似的模块放在同一个文件夹（比如说this_dir）中，构成一个模块包。通过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this_dir.module     <span class="comment">#引入this_dir文件夹中的module模块.</span></span><br></pre></td></tr></table></figure></p><p>该文件夹中必须包含一个<strong>init</strong>.py的文件，提醒Python，该文件夹为一个模块包。<strong>init</strong>.py可以是一个空文件。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>在编译器中可以通过dir()函数来查看模块中的属性和函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(math)</span><br><span class="line">[<span class="string">'__doc__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan'</span>, <span class="string">'atan2'</span>, <span class="string">'atanh'</span>, <span class="string">'ceil'</span>, <span class="string">'copysign'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'degrees'</span>, <span class="string">'e'</span>, <span class="string">'erf'</span>, <span class="string">'erfc'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'fabs'</span>, <span class="string">'factorial'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'frexp'</span>, <span class="string">'fsum'</span>, <span class="string">'gamma'</span>, <span class="string">'hypot'</span>, <span class="string">'isfinite'</span>, <span class="string">'isinf'</span>, <span class="string">'isnan'</span>, <span class="string">'ldexp'</span>, <span class="string">'lgamma'</span>, <span class="string">'log'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log2'</span>, <span class="string">'modf'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'radians'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>, <span class="string">'trunc'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？答案是使用模块。模块是一个包含了所有你定义的函数和变量以.py结尾的文件。&lt;/p
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记05----函数</title>
    <link href="http://bwael.com/2016/05/01/pynote05/"/>
    <id>http://bwael.com/2016/05/01/pynote05/</id>
    <published>2016-05-01T01:48:33.000Z</published>
    <updated>2016-07-06T02:16:37.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><p>函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对圆括号。圆括号之中可以包括一些变量名，该行以冒号结尾。接下来是一块语句，它们是函数体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span>                  <span class="comment">#无参函数的定义，且没有返回值。函数将自动返回None。None是Python中的一个特别的数据类型，用来表示什么都没有，相当于C中的NULL。  </span></span><br><span class="line">    print(<span class="string">"你好我是王尼玛"</span>)   <span class="comment">#注意缩进  </span></span><br><span class="line">sayHi()                       <span class="comment">#函数调用</span></span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>  </span><br><span class="line">你好我是王尼玛</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareSum</span><span class="params">(a,b)</span>:</span>            <span class="comment">#带形参的函数定义（a,b即为形参）  </span></span><br><span class="line">    c = a**<span class="number">2</span> + b**<span class="number">2</span>            <span class="comment">#a**2表示a的平方  </span></span><br><span class="line">    <span class="keyword">return</span> c                   <span class="comment">#将c的值返回，与java不同的是，Python可以返回多个值，且以元组的形式返回  </span></span><br><span class="line">print(squareSum(<span class="number">3</span>,<span class="number">2</span>))          <span class="comment">#函数调用，将数值3，2带入函数</span></span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></p><h4 id="带默认形参的函数"><a href="#带默认形参的函数" class="headerlink" title="带默认形参的函数"></a>带默认形参的函数</h4><p>我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。比如“def say(message, times = 1):”是正确的而“def say(times=1,message):”是错误的！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(message, times = <span class="number">1</span>)</span>:</span>  </span><br><span class="line">    <span class="keyword">print</span> ((message+<span class="string">" "</span>) * times)         <span class="comment">#字符串可以通过+号连接  </span></span><br><span class="line">  </span><br><span class="line">say(<span class="string">'Hello'</span>)  </span><br><span class="line">say(<span class="string">'World'</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello   </span><br><span class="line">World World World</span><br></pre></td></tr></table></figure></p><h4 id="关键参数赋值"><a href="#关键参数赋值" class="headerlink" title="关键参数赋值"></a>关键参数赋值</h4><p>再调用函数的时候，我们可以直接通过形参名给形参赋值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b=<span class="number">2</span>, c=<span class="number">3</span>)</span>:</span>  </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"a、b、c的值分别为"</span>,a,b,c)      </span><br><span class="line">  </span><br><span class="line">func(<span class="number">1</span>,<span class="number">3</span>)  </span><br><span class="line">func(<span class="number">1</span>, c=<span class="number">24</span>)  </span><br><span class="line">func(c=<span class="number">50</span>, a=<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a、b、c的值分别为 <span class="number">1</span> <span class="number">3</span> <span class="number">3</span>  </span><br><span class="line">a、b、c的值分别为 <span class="number">1</span> <span class="number">2</span> <span class="number">24</span>  </span><br><span class="line">a、b、c的值分别为 <span class="number">100</span> <span class="number">2</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><h4 id="文档字符串❤"><a href="#文档字符串❤" class="headerlink" title="文档字符串❤"></a>文档字符串❤</h4><p>在函数的第一个逻辑行的字符串是这个函数的 文档字符串 。注意，DocStrings也适用于模块和类（虽然还没学到那…..委屈）。文档字符串主要用于给函数示意。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="string">""" 这个函数的作用是王尼玛勾搭妹子问候语"""</span>    <span class="comment">#只能通过三引号的行出，用井号不行  </span></span><br><span class="line">    <span class="string">"""本条语句也是不能作为函数字符串的！"""</span>  </span><br><span class="line">    print(<span class="string">"你好我是王尼玛"</span>)  </span><br><span class="line">sayHi()  </span><br><span class="line">  </span><br><span class="line">print(sayHi.__doc__)                               <span class="comment">#函数名后不需要括号，doc两边的是双下划线  </span></span><br><span class="line">help(sayHi)                                        <span class="comment">#内置的help函数其实就是读取的doc</span></span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你好我是王尼玛  </span><br><span class="line"> 这个函数的作用是王尼玛勾搭妹子问候语  </span><br><span class="line">Help on function sayHi <span class="keyword">in</span> module __main__:  </span><br><span class="line">  </span><br><span class="line">sayHi()  </span><br><span class="line">    这个函数的作用是王尼玛勾搭妹子问候语</span><br></pre></td></tr></table></figure></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><pre><code>定义在函数内部的变量叫做局部变量，不管局部变量的值在函数内部如何变化，都不会影响到函数外的同名变量。即变量名称对于函数来说是局部 的。这称为变量的作用域 。所有变量的作用域是它们被定义时所在的块。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeNum</span><span class="params">(a)</span>:</span>                               <span class="comment">#整数变量传递给函数，函数对它进行操作，但原整数变量a不发生变化。  </span></span><br><span class="line">    a = a + <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">return</span> a  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数返回值为"</span>,changeNum(a))  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"a的值为"</span>,a)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数返回值为 <span class="number">2</span>  </span><br><span class="line">a的值为 <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="4-使用global语句"><a href="#4-使用global语句" class="headerlink" title="4.使用global语句"></a>4.使用global语句</h3><p>如果你想要在函数外为一个定义在函数内的变量赋值，那么你就得通过global语句告诉Python这个变量名不是局部的，而是全局的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="keyword">global</span> x  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"函数中x的值为"</span>,x)  </span><br><span class="line">    x = <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">return</span> x  </span><br><span class="line">  </span><br><span class="line">x = <span class="number">50</span>                                              <span class="comment">#在函数外为一个定义在函数内的变量赋值  </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'x的值为'</span>, x)  </span><br><span class="line">print(<span class="string">"函数返回值为"</span>,func())</span><br></pre></td></tr></table></figure></p><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x的值为 <span class="number">50</span>  </span><br><span class="line">函数中x的值为 <span class="number">50</span>  </span><br><span class="line">函数返回值为 <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><p>lambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span>  </span><br><span class="line"><span class="keyword">print</span> (f(<span class="number">4</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#Python中使用lambda的话，写成这样   </span></span><br><span class="line">g = <span class="keyword">lambda</span> x : x**<span class="number">2</span>  </span><br><span class="line"><span class="keyword">print</span> (g(<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><p>lambda生成一个函数对象。该函数参数为x,，返回值为x的平方。函数对象赋给g。g的调用与正常函数无异。</p><h3 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h3><p>函数可以作为一个对象，进行参数传递。函数名(比如func)即该对象。比如说:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span>  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(fx, a)</span>:</span>                           <span class="comment">#将函数作为参数传递  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d的平方为'</span> % a,end=<span class="string">""</span>)  </span><br><span class="line">    <span class="keyword">print</span> (fx(a))  </span><br><span class="line">  </span><br><span class="line">test(f, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>上面的程序可以改写为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(fx, a)</span>:</span>                             </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d的平方为'</span> % a,end=<span class="string">""</span>)  </span><br><span class="line">    <span class="keyword">print</span> (fx(a))  </span><br><span class="line">  </span><br><span class="line">test(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h3><p>map函数的定义：</p><p>map(function, sequence[, sequence, …]) -&gt; list<br>通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。map()将每次从两个表中分别取出一个元素，带入lambda所定义的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))))</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])))</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure></p><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><p>filter函数的第一个参数也是一个函数对象。它也是将作为参数的函数对象作用于多个元素。如果函数对象返回的是True，则该次的元素被储存于返回的表中。filter通过读入的函数来筛选数据。同样，在Python 3.X中，filter返回的不是表，而是循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">100</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (list(filter(func,[<span class="number">10</span>,<span class="number">56</span>,<span class="number">101</span>,<span class="number">500</span>])))</span><br></pre></td></tr></table></figure></p><h3 id="小提示："><a href="#小提示：" class="headerlink" title="小提示："></a><strong>小提示：</strong></h3><ol><li><p>指针传递使函数可以改变函数外的值！</p><p> 对于基本数据类型的变量，变量传递给函数后，函数会在内存中复制一个新的变量，从而不影响原来的变量。（我们称此为值传递）</p><p> 但是对于列表来说，列表传递给函数的是一个指针，指针指向序列在内存中的位置，在函数中对表的操作将在原有内存中进行，从而影响原有变量。 （我们称此为指针传递）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeList</span><span class="params">(b)</span>:</span>                              <span class="comment">#我们将一个表传递给函数，函数进行操作，原来的表b发生变化。  </span></span><br><span class="line">   b[<span class="number">0</span>] = b[<span class="number">0</span>] + <span class="number">1</span>  </span><br><span class="line">   <span class="keyword">return</span> b  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数返回值为"</span>,changeList(b))  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"b的值为"</span>,b)</span><br></pre></td></tr></table></figure></li></ol><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数返回值为 [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line">b的值为 [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>Python可以返回多个值，以元组的形式返回</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idSave</span><span class="params">()</span>:</span>  </span><br><span class="line">   a=input(<span class="string">"姓名为："</span>)  </span><br><span class="line">   b=input(<span class="string">"年龄为："</span>)  </span><br><span class="line">   c=input(<span class="string">"性别为："</span>)  </span><br><span class="line">   <span class="keyword">return</span> a,b,c  </span><br><span class="line">  </span><br><span class="line">print(idSave())</span><br></pre></td></tr></table></figure></li></ol><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名为：王尼玛  </span><br><span class="line">年龄为：<span class="number">12</span>  </span><br><span class="line">性别为：女  </span><br><span class="line">(<span class="string">'王尼玛'</span>, <span class="string">'12'</span>, <span class="string">'女'</span>)</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>带有默认值的形参</p><p> 我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数的定义和调用&quot;&gt;&lt;a href=&quot;#函数的定义和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义和调用&quot;&gt;&lt;/a&gt;函数的定义和调用&lt;/h2&gt;&lt;p&gt;函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对圆括号。圆括号之中
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记04----控制语句</title>
    <link href="http://bwael.com/2016/04/22/pynote04/"/>
    <id>http://bwael.com/2016/04/22/pynote04/</id>
    <published>2016-04-22T01:33:24.000Z</published>
    <updated>2016-07-06T01:46:56.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h3><p>if主要用于条件判断。</p><h4 id="1-1-if结构"><a href="#1-1-if结构" class="headerlink" title="1.1 if结构"></a>1.1 if结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>  </span><br><span class="line">x = <span class="number">1</span>  </span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0</span>:                        <span class="comment">#注意后面的冒号必不可少！  </span></span><br><span class="line">    x = x+<span class="number">1</span>                      <span class="comment">#必须输入四个空格的缩进表示隶属关系！  </span></span><br><span class="line"><span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><h4 id="1-2-if-elif-else-结构"><a href="#1-2-if-elif-else-结构" class="headerlink" title="1.2 if-elif-else 结构"></a>1.2 if-elif-else 结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre name="code" class="python"&gt;a = input("a:")                  #这条语句的作用是在屏幕显示“a:”,并等待用户输值赋给a。  </span><br><span class="line">b = input(<span class="string">"b:"</span>)  </span><br><span class="line"><span class="keyword">if</span>(a &gt; b):  </span><br><span class="line">    <span class="keyword">print</span> (a, <span class="string">" 大于 "</span>, b)  </span><br><span class="line">    print(<span class="string">"显示1"</span>)  </span><br><span class="line"><span class="keyword">elif</span>(a==b):                      <span class="comment">#elif类似java中的else if，但要注意在末尾的冒号！  </span></span><br><span class="line">    print(a,<span class="string">"等于"</span>,b)  </span><br><span class="line">    print(<span class="string">"显示2"</span>)  </span><br><span class="line"><span class="keyword">else</span>:                            <span class="comment">#注意末尾的冒号！  </span></span><br><span class="line">    print(a,<span class="string">"小于"</span>,b)  </span><br><span class="line">    print(<span class="string">"显示3"</span>)  </span><br><span class="line">print(<span class="string">"显示4"</span>)</span><br></pre></td></tr></table></figure><p>这里有三个块，分别属于if, elif, else引领。Python检测条件，如果发现if的条件为假，那么跳过后面紧跟的块，检测下一个elif的条件； 如果还是假，那么执行else块。通过上面的结构将程序分出三个分支。程序根据条件，只执行三个分支中的一个。</p><h4 id="1-3-if的嵌套使用"><a href="#1-3-if的嵌套使用" class="headerlink" title="1.3 if的嵌套使用"></a>1.3 if的嵌套使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">"a:"</span>)  </span><br><span class="line">b = input(<span class="string">"b:"</span>)  </span><br><span class="line">c = input(<span class="string">"c:"</span>)  </span><br><span class="line"><span class="keyword">if</span>(a &gt; b):  </span><br><span class="line">    <span class="keyword">print</span> (a,<span class="string">"大于"</span>,b)  </span><br><span class="line">    <span class="keyword">if</span>(a&gt;c):                    <span class="comment">#注意这里的的if需要缩进，因为该if隶属于if（a&gt;b）  </span></span><br><span class="line">        print(a,<span class="string">"大于"</span>,c)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        print(a,<span class="string">"小于"</span>,c)       <span class="comment">#注意这里的if应该与if(a&gt;c)缩进相同</span></span><br></pre></td></tr></table></figure><h3 id="2-while"><a href="#2-while" class="headerlink" title="2.while"></a>2.while</h3><p>给出一个while循环终止条件。  下例循环打印1到100<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>  </span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">100</span>:  </span><br><span class="line">    a+=<span class="number">1</span>                     <span class="comment">#Python没有i++的写法  </span></span><br><span class="line">    print(a）  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="3-for"><a href="#3-for" class="headerlink" title="3.for"></a>3.for</h3><p>for循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student2=[<span class="string">"王尼玛"</span>,<span class="string">"男"</span>,<span class="number">22</span>,[<span class="string">"脑袋大"</span>,<span class="string">"脖子短"</span>,<span class="string">"屁股圆"</span>]]  </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> student2:                                                   </span><br><span class="line"><span class="comment">#循环次数为列表student2中元素的个数。  注意末尾的引号  </span></span><br><span class="line">    print(a)                                                         </span><br><span class="line">   <span class="comment">#循环结构同样需要缩进  因为迭代（也就是循环）某范围的数字非常常见，所以有个内建的范围函数提供使用——range()</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">10</span>))                                                      <span class="comment">#建立一个从0到9的列表(range()生成的是iterator对象。list()的作用是转换成列表)  </span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>我们可以这样使用range()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):                                               <span class="comment">#对while中的事例进行改造，打印1到100的数字  </span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">1</span>,<span class="number">100</span>,<span class="number">3</span>))                                                <span class="comment">#生成从1到100间的数，步长为3  </span></span><br><span class="line"><span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">34</span>, <span class="number">37</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">46</span>, <span class="number">49</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">67</span>, <span class="number">70</span>, <span class="number">73</span>, <span class="number">76</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">91</span>, <span class="number">94</span>, <span class="number">97</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">99</span>,<span class="number">1</span>,<span class="number">-3</span>))                                                 <span class="comment">#1到100间的数字，逆向排列  </span></span><br><span class="line">[<span class="number">99</span>, <span class="number">96</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">84</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">60</span>, <span class="number">57</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">39</span>, <span class="number">36</span>, <span class="number">33</span>, <span class="number">30</span>, <span class="number">27</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>轻量级循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]                                            <span class="comment">#生成一个简单的  </span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p><strong>enumerate()函数</strong></p><p>利用enumerate()函数，可以在每次循环中同时得到下标和元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">'abcdefghijk'</span>  </span><br><span class="line"><span class="keyword">for</span> (index,char) <span class="keyword">in</span> enumerate(S):  </span><br><span class="line">    print(index)  </span><br><span class="line">    print(char)  </span><br><span class="line">zip()</span><br></pre></td></tr></table></figure></p><p>如果你多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ta = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">tb = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]  </span><br><span class="line">tc = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]  </span><br><span class="line"><span class="keyword">for</span> (a,b,c) <span class="keyword">in</span> zip(ta,tb,tc):  </span><br><span class="line">    print(a,b,c)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">9</span> a  </span><br><span class="line"><span class="number">2</span> <span class="number">8</span> b  </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> c</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"lucy"</span>,<span class="string">"lily"</span>,<span class="string">"tom"</span>]  </span><br><span class="line">b=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]  </span><br><span class="line">print(list(zip(a,b)))</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'lucy'</span>, <span class="number">11</span>), (<span class="string">'lily'</span>, <span class="number">12</span>), (<span class="string">'tom'</span>, <span class="number">13</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="4-中断循环"><a href="#4-中断循环" class="headerlink" title="4.中断循环"></a>4.中断循环</h3><p>break——跳出循环<br>continue——跳出本次命令的之行，继续下一次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nameList=[<span class="string">"王二小"</span>,<span class="string">"王小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>,<span class="string">"寒梅梅"</span>,<span class="string">"王尼玛"</span>,<span class="string">"李磊"</span>]  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:  </span><br><span class="line">    <span class="keyword">if</span> name==<span class="string">"王尼玛"</span>:  </span><br><span class="line">        print(<span class="string">"凶手找到啦！"</span>)  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>输出为王尼玛<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nameList=[<span class="string">"王二小"</span>,<span class="string">"王小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>,<span class="string">"寒梅梅"</span>,<span class="string">"王尼玛"</span>,<span class="string">"李磊"</span>]  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:  </span><br><span class="line">    <span class="keyword">if</span> name==<span class="string">"王尼玛"</span>:  </span><br><span class="line">        print(<span class="string">"凶手找到啦！"</span>)  </span><br><span class="line">        <span class="keyword">continue</span>  </span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure></p><p>输出为李磊</p><h3 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h3><ul><li>1.Python的缩进<pre><code>空白在Python中是重要的。事实上行首的空白是重要的。它称为缩进。在逻辑行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。 这意味着同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。我们将在后面的章节中看到有关块的用处的例子。 你需要记住的一样东西是错误的缩进会引发错误。</code></pre></li><li><p>2.if格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if  &lt;条件1&gt;:</span><br><span class="line">    statement</span><br><span class="line">elif &lt;条件2&gt;:</span><br><span class="line">    statement</span><br><span class="line">elif &lt;条件3&gt;：</span><br><span class="line">    statement</span><br><span class="line">else:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure></li><li><p>3.while格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while&lt;条件&gt;:</span><br><span class="line">statement</span><br><span class="line">else:</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>4.for格式</p><p>  <code>for 变量 in &lt;对象集合&gt;：</code></p></li><li><p>5.Python与其他语言的不同</p><p>  <code>Python的while可以写else！</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-if&quot;&gt;&lt;a href=&quot;#1-if&quot; class=&quot;headerlink&quot; title=&quot;1.if&quot;&gt;&lt;/a&gt;1.if&lt;/h3&gt;&lt;p&gt;if主要用于条件判断。&lt;/p&gt;
&lt;h4 id=&quot;1-1-if结构&quot;&gt;&lt;a href=&quot;#1-1-if结构&quot; class=&quot;h
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://bwael.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://bwael.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://bwael.com/tags/python/"/>
    
  </entry>
  
</feed>
