<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网易笔试（内推）- 20200808 - Java后端开发]]></title>
    <url>%2F2020%2F08%2F10%2FTest-Netease-20200808%2F</url>
    <content type="text"><![CDATA[笔试一共四道编程题，共100min:imp:。 鄙人全军覆没~:innocent: 下面是大佬的题解~ 1. 素数的个数给出一个包含n个正整数的数组a，把a[i]拆分为若干个和为a[i]的素数，求拆分后最多能有多少个素数。 1234567891011121314第一行数据为n，表示数组长度，第二行为n个元素。输入:31 1 1输出:0不可拆分 输入:41 3 5 7输出：61为0个，3为1个，5为（2,3），7为（2,2,3） 根据规律可得：nums[i]/2就是该元素可以分出的素数个数。发现自己真的想多了，原来是在找规律。 1234567891011121314151617import java.util.Scanner;class Solution &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int len = sc.nextInt(); int[] nums = new int[len]; long result = 0; for (int i = 0; i &lt; nums.length; i++) &#123; nums[i] = sc.nextInt(); //规律：nums[i]/2就是nums[i]可以分出的素数个数 result += nums[i] / 2; &#125; System.out.println(result); &#125;&#125; 2. 字典序最小的排列没做，题目让我看蒙了:disappointed:。 给出一个长度为m的序列T，求一个长度为n且字典序最小的排列S，要求不改变原序列中元素的相对位置。 123456第一行输入两个正整数n和m第二行输入m个数，表示序列5 32 1 5输出2 1 3 4 5 合并数组 + 双指针。先通过HashSet取出缺失的元素，组成nums2数组。需要result数组的注意第一个元素，nums1和nums2的第一个元素，谁小，先存谁。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import java.util.HashSet;import java.util.Scanner;public class Solution&#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int len = sc.nextInt(); int len1 = sc.nextInt(); int[] nums1 = new int[len1]; HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;(); for(int i=0;i&lt;nums1.length;i++)&#123; nums1[i] = sc.nextInt(); set.add(nums1[i]); &#125; //nums2，长度为len-len1，存放互补的元素 int[] nums2 = new int[len-len1]; int index = 0; for(int i=1;i&lt;=len;i++)&#123; if(!set.contains(i))&#123; nums2[index++] = i; &#125; &#125; /*双指针判断 i指针用于控制nums1移动 j指针用于控制nums2移动 */ int i = 0; int j = 0; int[] result = new int[len]; int Resultindex = 0; //谁的第一个小谁就先存 if(nums1[0] &lt; nums2[0])&#123; result[Resultindex++] = nums1[0]; i=1; &#125;else&#123; result[Resultindex++] = nums2[0]; j=1; &#125; while(i &lt; nums1.length &amp;&amp; j &lt; nums2.length)&#123; //谁小存谁 if(nums1[i] &lt; nums2[j])&#123; result[Resultindex++] = nums1[i++]; &#125;else&#123; result[Resultindex++] = nums2[j++]; &#125; &#125; //补充存入最后一个数 while(i == nums1.length &amp;&amp; j &lt; nums2.length)&#123; //如果nums1完但nums2未完，存入nums2 result[Resultindex++] = nums2[j++]; &#125; while(i &lt; nums1.length &amp;&amp; j == nums2.length)&#123; //如果nums2完但nums1未完，存入nums1 result[Resultindex++] = nums1[i++]; &#125; for(int k=0;k&lt;result.length-1;k++)&#123; System.out.print(result[k] + " "); &#125; System.out.print(result[result.length-1]); &#125;&#125; 3. 丢弃最少物品好题好题！ 给出n个物品，每个物品都有自己的价值，每个物品只有一件，这些物品需要分给两个人，要求分配完之后，两个人的物品价值相同。分配完成之后，会丢弃剩下的物品，求最少要丢弃多少物品。 1234567输入输入第一行为总的测试数据个数，第二行为物品个数n，第三行为n个物品的价值。1530 60 5 15 30输出20 丢弃5和15，把60分配给第一个人，2个30分配给第二个人。 根据大佬的思路：dfs回溯 + 分与不分，实在是没想到dfs还有这种用法，之前只会用dfs计算组合，这次算是学到了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.Scanner;public class Solution&#123; public static int result = Integer.MAX_VALUE; public static int sum = 0; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int group = sc.nextInt(); //以后多组读入可以采用这种方式,学到了 while(group-- &gt; 0)&#123; int len = sc.nextInt(); int[] nums = new int[len]; for(int i=0;i&lt;nums.length;i++)&#123; nums[i] = sc.nextInt(); sum += nums[i]; &#125; //index从0开始，第一个人拥有的为result1，第二个人用于的为result2。都初始为0 dfs(nums,0,0,0); System.out.println(result); &#125; &#125; private static void dfs(int[] nums, int index, int result1, int result2) &#123; //递归出口 if(index == nums.length)&#123; //当result1 == result2时 if(result1 == result2)&#123; result = Math.min(result,sum - 2*result1); &#125; return; &#125; //分为3中情况， /* 1. 谁都不给 2. 给第一个：result1 + nums[index] 3. 给第二个：result2 + nums[index] */ dfs(nums,index+1,result1,result2); dfs(nums,index+1,result1+nums[index],result2); dfs(nums,index+1,result1,result2+nums[index]); &#125;&#125; 4. 运送货物第四题看了一眼，emmm，是我惹不起的…]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer 17.打印从 1 到最大的 n 位数]]></title>
    <url>%2F2020%2F08%2F10%2Foffer-17%2F</url>
    <content type="text"><![CDATA[剑指Offer 17.打印从 1 到最大的 n 位数 剑指 Offer 17. 打印从1到最大的n位数 - LeetCode 2020-8-10 16:20:50 题目描述输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数即 999。 解题思路在测试环境中可能使用简单方法就可以通过测试用例。这里实际上考察大数的处理。 由于 n 可能会非常大，因此不能直接用 int 表示数字，而是用 char 数组进行存储。 只要求输出int类型： 123456789class Solution &#123; public int[] printNumbers(int n) &#123; int end = (int)Math.pow(10, n) - 1; int[] res = new int[end]; for(int i = 0; i &lt; end; i++) res[i] = i + 1; return res; &#125;&#125; 123456789101112131415161718192021222324252627class Solution &#123; int[] res; int nine = 0, count = 0, start, n; char[] num, loop = &#123;'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'&#125;; public int[] printNumbers(int n) &#123; this.n = n; res = new int[(int)Math.pow(10, n) - 1]; num = new char[n]; start = n - 1; dfs(0);// 开启全排列递归 return res; &#125; void dfs(int x) &#123; if(x == n) &#123; String s = String.valueOf(num).substring(start); if(!s.equals("0")) res[count++] = Integer.parseInt(s); if(n - start == nine) start--; return; &#125; for(char i : loop) &#123; if(i == '9') nine++; num[x] = i; dfs(x + 1); &#125; nine--; &#125;&#125; 大数打印： 1234567891011121314151617181920212223242526272829class Solution &#123; StringBuilder res; int nine = 0, count = 0, start, n; char[] num, loop = &#123;'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'&#125;; public String printNumbers(int n) &#123; this.n = n; res = new StringBuilder(); // 数字字符串集 num = new char[n]; // 定义长度为 n 的字符列表 start = n - 1; dfs(0); // 开启全排列递归 res.deleteCharAt(res.length() - 1); // 删除最后多余的逗号 return res.toString(); // 转化为字符串并返回 &#125; void dfs(int x) &#123; if(x == n) &#123; // 终止条件：已固定完所有位 String s = String.valueOf(num).substring(start); if(!s.equals("0")) res.append(s + ","); // 拼接 num 并添加至 res 尾部，使用逗号隔开 if(n - start == nine) start--; return; &#125; for(char i : loop) &#123; // 遍历 ‘0‘ - ’9‘ if(i == '9') nine++; num[x] = i; // 固定第 x 位为 i dfs(x + 1); // 开启固定第 x + 1 位 &#125; nine--; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 字符串(一) - LeetCode-242、409]]></title>
    <url>%2F2020%2F08%2F07%2Fleetcode-String-01-242-409%2F</url>
    <content type="text"><![CDATA[1. 字符串循环移位包含编程之美 3.1 12s1 = AABCD, s2 = CDAAReturn : true 给定两个字符串 s1 和 s2，要求判定 s2 是否能够被 s1 做循环移位得到的字符串包含。 s1 进行循环移位的结果是 s1s1 的子字符串，因此只要判断 s2 是否是 s1s1 的子字符串即可。 2. 字符串循环移位编程之美 2.17 12s = "abcd123" k = 3Return "123abcd" 将字符串向右循环移动 k 位。 将 abcd123 中的 abcd 和 123 单独翻转，得到 dcba321，然后对整个字符串进行翻转，得到 123abcd。 3. 字符串中单词的翻转程序员代码面试指南 12s = "I am a student"Return "student a am I" 将每个单词翻转，然后将整个字符串翻转。 242. 两个字符串包含的字符是否完全相同242.Valid Anagram (Easy) Leetcode / 力扣 2020-7-18 16:17:33 题目描述12s = "anagram", t = "nagaram", return true.s = "rat", t = "car", return false. 可以用 HashMap 来映射字符与出现次数，然后比较两个字符串出现的字符数量是否相同。 由于本题的字符串只包含 26 个小写字符，因此可以使用长度为 26 的整型数组对字符串出现的字符进行统计，不再使用 HashMap。 解题思路1234567891011121314151617class Solution &#123; public boolean isAnagram(String s, String t) &#123; int[] cnts = new int[26]; for(char c : s.toCharArray())&#123; cnts[c - 'a'] ++; &#125; for(char c : t.toCharArray())&#123; cnts[c - 'a'] --; &#125; for(int cnt : cnts)&#123; if(cnt != 0)&#123; return false; &#125; &#125; return true; &#125;&#125; 1234567891011//直接排序法public boolean isAnagram(String s, String t) &#123; if (s.length() != t.length()) &#123; return false; &#125; char[] str1 = s.toCharArray(); char[] str2 = t.toCharArray(); Arrays.sort(str1); Arrays.sort(str2); return Arrays.equals(str1, str2);&#125; 409. 最长回文串 - 计算一组字符集合可以组成的回文字符串的最大长度409.Longest Palindrome (Easy) Leetcode / 力扣 2020-8-7 21:35:31 题目描述给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。 注意:假设字符串的长度不会超过 1010。 12345示例 1:输入: "abccccdd"输出: 7解释: 我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。 解题思路12345678910111213141516class Solution &#123; public int longestPalindrome(String s) &#123; int[] cnts = new int[256]; for(char c : s.toCharArray())&#123; cnts[c]++; &#125; int palindrome = 0; for (int cnt : cnts) &#123; palindrome += (cnt / 2) * 2; &#125; if (palindrome &lt; s.length()) &#123; palindrome++; // 这个条件下 s 中一定有单个未使用的字符存在，可以把这个字符放到回文的最中间 &#125; return palindrome; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 739.数组中元素与下一个比它大的元素之间的距离(每日温度)]]></title>
    <url>%2F2020%2F08%2F06%2Fleetcode-739%2F</url>
    <content type="text"><![CDATA[739.数组中元素与下一个比它大的元素之间的距离(每日温度) 739.Daily Temperatures (Medium) Leetcode / 力扣 2020-8-6 21:27:37 题目描述12Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Or 12345请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 解题思路在遍历数组时用栈把数组中的数存起来，如果当前遍历的数比栈顶元素来的大，说明栈顶元素的下一个比它大的数就是当前元素。 123456789101112131415class Solution &#123; public int[] dailyTemperatures(int[] T) &#123; int n = T.length; int[] dist = new int[n]; Stack&lt;Integer&gt; indexs = new Stack&lt;Integer&gt;(); for(int i = 0; i &lt; n; i++)&#123; while(!indexs.isEmpty() &amp;&amp; T[i] &gt; T[indexs.peek()])&#123; int preIndex = indexs.pop(); dist[preIndex] = i - preIndex; &#125; indexs.add(i); &#125; return dist; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>栈和队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 链表(一) - LeetCode-160、206、21、83]]></title>
    <url>%2F2020%2F08%2F04%2Fleetcode-LinkedList-01-160-206-21-83%2F</url>
    <content type="text"><![CDATA[160. 找到两个链表的交点160.Intersection of Two Linked Lists (Easy) Leetcode / 力扣 2020-7-12 22:03:18 题目描述找到两个单链表相交的起始节点。。 例如以下示例中 A 和 B 两个链表相交于 c1： 12345A: a1 → a2 ↘ c1 → c2 → c3 ↗B: b1 → b2 → b3 但是不会出现以下相交的情况，因为每个节点只有一个 next 指针，也就只能有一个后继节点，而以下示例中节点 c 有两个后继节点。 12345A: a1 → a2 d1 → d2 ↘ ↗ c ↗ ↘B: b1 → b2 → b3 e1 → e2 要求时间复杂度为 O(N)，空间复杂度为 O(1)。如果不存在交点则返回 null。 解题思路设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。 当访问 A 链表的指针访问到链表尾部时，令它从链表 B 的头部开始访问链表 B；同样地，当访问 B 链表的指针访问到链表尾部时，令它从链表 A 的头部开始访问链表 A。这样就能控制访问 A 和 B 两个链表的指针能同时访问到交点。 如果不存在交点，那么 a + b = b + a，以下实现代码中 l1 和 l2 会同时为 null，从而退出循环。 1234567891011121314151617181920212223/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123; ListNode l1 = headA; ListNode l2 = headB; // 循环a+b次就可找出重复节点，即相交节点。X型相交不存在，每个节点只有一个 next 指针。 while(l1 != l2)&#123; l1 = (l1 == null) ? headB : l1.next; l2 = (l2 == null) ? headA : l2.next; &#125; return l2; &#125;&#125; 206.反转链表206.Reverse Linked List (Easy) Leetcode / 力扣 2020-8-3 22:13:31 题目描述反转一个单链表。 123456示例:输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL进阶:你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 解题思路递归 12345678910public ListNode reverseList(ListNode head) &#123; if (head == null || head.next == null) &#123; return head; &#125; ListNode next = head.next; ListNode newHead = reverseList(next); next.next = head; head.next = null; return newHead;&#125; 头插法 12345678910public ListNode reverseList(ListNode head) &#123; ListNode newHead = new ListNode(-1); while (head != null) &#123; ListNode next = head.next; head.next = newHead.next; newHead.next = head; head = next; &#125; return newHead.next;&#125; 21. 合并两个有序的链表21.Merge Two Sorted Lists (Easy) Leetcode / 力扣 2020-8-4 14:38:30 题目描述将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 1234示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 解题思路123456789101112131415161718192021222324252627282930313233/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; //迭代法 //在返回节点之前保持对节点的不变引用。 ListNode prehead = new ListNode(-1); ListNode prev = prehead; while (l1 != null &amp;&amp; l2 != null) &#123; if (l1.val &lt;= l2.val) &#123; prev.next = l1; l1 = l1.next; &#125; else &#123; prev.next = l2; l2 = l2.next; &#125; prev = prev.next; &#125; //在这一点上，l1和l2中的一个可以是非空的，所以连接 //合并列表末尾的非空列表。 prev.next = l1 == null ? l2 : l1; return prehead.next; &#125;&#125; 123456789101112//递归public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; if (l1 == null) return l2; if (l2 == null) return l1; if (l1.val &lt; l2.val) &#123; l1.next = mergeTwoLists(l1.next, l2); return l1; &#125; else &#123; l2.next = mergeTwoLists(l1, l2.next); return l2; &#125;&#125; 83. 从有序链表中删除重复节点83.Remove Duplicates from Sorted List (Easy) Leetcode / 力扣 2020-8-4 15:02:21 题目描述123Given 1-&gt;1-&gt;2, return 1-&gt;2. Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3. 解题思路123456789class Solution &#123; public ListNode deleteDuplicates(ListNode head) &#123; if(head == null || head.next == null)&#123; return head; &#125; head.next = deleteDuplicates(head.next); return head.val == head.next.val ? head.next:head; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0-1背包问题和LeetCode 416.分割等和子集]]></title>
    <url>%2F2020%2F07%2F28%2Fleetcode-416%2F</url>
    <content type="text"><![CDATA[※ 0-1背包有一个容量为 N 的背包，要用这个背包装下物品的价值最大，这些物品有两个属性：体积 w 和价值 v。 定义一个二维数组 dp 存储最大价值，其中 $dp[i][j] $表示前 i 件物品体积不超过 j 的情况下能达到的最大价值。设第 i 件物品体积为 w，价值为 v，根据第 i 件物品是否添加到背包中，可以分两种情况讨论： 第 i 件物品没添加到背包，总体积不超过 j 的前 i 件物品的最大价值，就是总体积不超过 j 的前 i-1 件物品的最大价值，$dp[i][j] = dp[i-1][j]$。 第 i 件物品添加到背包中，$dp[i][j] = dp[i-1][j-w] + v$。 第 i 件物品可添加也可以不添加，取决于哪种情况下最大价值更大。因此，0-1 背包的状态转移方程为： 123456789101112131415161718// W 为背包总体积// N 为物品数量// weights 数组存储 N 个物品的重量// values 数组存储 N 个物品的价值public int knapsack(int W, int N, int[] weights, int[] values) &#123; int[][] dp = new int[N + 1][W + 1]; for (int i = 1; i &lt;= N; i++) &#123; int w = weights[i - 1], v = values[i - 1]; for (int j = 1; j &lt;= W; j++) &#123; if (j &gt;= w) &#123; dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - w] + v); &#125; else &#123; dp[i][j] = dp[i - 1][j]; &#125; &#125; &#125; return dp[N][W];&#125; 空间优化 在程序实现时可以对 0-1 背包做优化。观察状态转移方程可以知道，前 i 件物品的状态仅与前 i-1 件物品的状态有关，因此可以将 dp 定义为一维数组，其中 $dp[j]$ 既可以表示 $dp[i-1][j]$ 也可以表示$ dp[i][j]$。此时， 因为 $dp[j-w] $表示 $dp[i-1][j-w]$，因此不能先求 $dp[i][j-w]$，防止将 $dp[i-1][j-w] $覆盖。也就是说要先计算 $dp[i][j] $再计算 $dp[i][j-w]$，在程序实现时需要按倒序来循环求解。 123456789101112public int knapsack(int W, int N, int[] weights, int[] values) &#123; int[] dp = new int[W + 1]; for (int i = 1; i &lt;= N; i++) &#123; int w = weights[i - 1], v = values[i - 1]; for (int j = W; j &gt;= 1; j--) &#123; if (j &gt;= w) &#123; dp[j] = Math.max(dp[j], dp[j - w] + v); &#125; &#125; &#125; return dp[W];&#125; 无法使用贪心算法的解释 0-1 背包问题无法使用贪心算法来求解，也就是说不能按照先添加性价比最高的物品来达到最优，这是因为这种方式可能造成背包空间的浪费，从而无法达到最优。考虑下面的物品和一个容量为 5 的背包，如果先添加物品 0 再添加物品 1，那么只能存放的价值为 16，浪费了大小为 2 的空间。最优的方式是存放物品 1 和物品 2，价值为 22. id w v v/w 0 1 6 6 1 2 10 5 2 3 12 4 变种 完全背包：物品数量为无限个 多重背包：物品数量有限制 多维费用背包：物品不仅有重量，还有体积，同时考虑这两种限制 其它：物品之间相互约束或者依赖 416. 分割等和子集416.Partition Equal Subset Sum (Medium) Leetcode / 力扣 2020-7-28 15:46:15 题目描述给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200 1234示例 1:输入: [1, 5, 11, 5]输出: true解释: 数组可以分割成 [1, 5, 5] 和 [11]. 解题思路12345678910111213141516171819202122232425class Solution &#123; public boolean canPartition(int[] nums) &#123; int sum = calcArraySum(nums); if(sum%2 != 0)&#123; return false; &#125; int N = sum / 2; boolean[] dp = new boolean[N + 1]; dp[0] = true; for(int num : nums)&#123; for(int j = N; j &gt;= num; j--)&#123; dp[j] = dp[j] || dp[j - num]; &#125; &#125; return dp[N]; &#125; private int calcArraySum(int[] nums)&#123; int sum = 0; for(int num : nums)&#123; sum += num; &#125; return sum; &#125;&#125; 为了防止True正序遍历被覆盖，所以倒着来。 上面这种写法节省了一定空间。完整的状态转移过程具体可以看下图，$dp[i][j] = dp[i-1][j]$ or $dp[i-1][j - nums[i]]$。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer 14.剪绳子（LeetCode 343.整数拆分）]]></title>
    <url>%2F2020%2F07%2F27%2Foffer-14%2F</url>
    <content type="text"><![CDATA[剑指Offer 14.剪绳子（LeetCode 343.整数拆分） 343.整数拆分 - LeetCode (Medium) 题目描述把一根绳子剪成多段，并且使得每段的长度乘积最大。 12345n = 2return 1 (2 = 1 + 1)n = 10return 36 (10 = 3 + 3 + 4) 解题思路贪心 尽可能多剪长度为 3 的绳子，并且不允许有长度为 1 的绳子出现。如果出现了，就从已经切好长度为 3 的绳子中拿出一段与长度为 1 的绳子重新组合，把它们切成两段长度为 2 的绳子。 证明：当 n &gt;= 5 时，3(n - 3) - n = 2n - 9 &gt; 0，且 2(n - 2) - n = n - 4 &gt; 0。因此在 n &gt;= 5 的情况下，将绳子剪成一段为 2 或者 3，得到的乘积会更大。又因为 3(n - 3) - 2(n - 2) = n - 5 &gt;= 0，所以剪成一段长度为 3 比长度为 2 得到的乘积更大。 12345678910111213public int integerBreak(int n) &#123; if (n &lt; 2) return 0; if (n == 2) return 1; if (n == 3) return 2; int timesOf3 = n / 3; if (n - timesOf3 * 3 == 1) timesOf3--; int timesOf2 = (n - timesOf3 * 3) / 2; return (int) (Math.pow(3, timesOf3)) * (int) (Math.pow(2, timesOf2));&#125; 动态规划 123456789public int integerBreak(int n) &#123; int[] dp = new int[n + 1]; dp[1] = 1; for (int i = 2; i &lt;= n; i++) for (int j = 1; j &lt; i; j++) //记录求解的历史 dp[i] = Math.max(dp[i], Math.max(j * (i - j), dp[j] * (i - j))); return dp[n];&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 95.不同的二叉搜索树 II]]></title>
    <url>%2F2020%2F07%2F26%2Fleetcode-95%2F</url>
    <content type="text"><![CDATA[95. 不同的二叉搜索树 II 95.Unique Binary Search Trees II (Medium) Leetcode / 力扣 2020-7-26 10:17:45 题目描述给定一个数字 n，要求生成所有值为 1…n 的二叉搜索树。 1234567891011121314151617Input: 3Output:[ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3]]Explanation:The above output corresponds to the 5 unique BST's shown below: 1 3 3 2 1 \ / / / \ \ 3 2 1 1 3 2 / / \ \ 2 1 2 3 解题思路12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode() &#123;&#125; * TreeNode(int val) &#123; this.val = val; &#125; * TreeNode(int val, TreeNode left, TreeNode right) &#123; * this.val = val; * this.left = left; * this.right = right; * &#125; * &#125; */class Solution &#123; public List&lt;TreeNode&gt; generateTrees(int n) &#123; if(n &lt; 1) return new LinkedList&lt;TreeNode&gt;(); return generateSubTrees(1, n); &#125; private List&lt;TreeNode&gt; generateSubTrees(int s, int e)&#123; List&lt;TreeNode&gt; ret = new LinkedList&lt;TreeNode&gt;(); if(s &gt; e)&#123; ret.add(null); return ret; &#125; // 枚举可行根节点 for (int i = s; i &lt;= e; ++i) &#123; // 获得所有可行的左子树集合 List&lt;TreeNode&gt; leftSubtrees = generateSubTrees(s, i - 1); // 获得所有可行的右子树集合 List&lt;TreeNode&gt; rightSubtrees = generateSubTrees(i + 1, e); // 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上 for (TreeNode left : leftSubtrees) &#123; for (TreeNode right : rightSubtrees) &#123; TreeNode root = new TreeNode(i); root.left = left; root.right = right; ret.add(root); &#125; &#125; &#125; return ret; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 435.无重叠的区间个数]]></title>
    <url>%2F2020%2F07%2F24%2Fleetcode-435-Non-overlapping-Intervals%2F</url>
    <content type="text"><![CDATA[435.无重叠的区间个数 435.Non-overlapping Intervals (Medium) Leetcode / 力扣 2020-7-24 11:00:19 题目描述给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。可以认为区间的终点总是大于它的起点。区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。 123输入: [ [1,2], [2,3], [3,4], [1,3] ]输出: 1解释: 移除 [1,3] 后，剩下的区间没有重叠。 解题思路先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。 在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。 按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。 123456789101112131415161718192021class Solution &#123; public int eraseOverlapIntervals(int[][] intervals) &#123; if(intervals.length == 0) return 0; Arrays.sort(intervals, new Comparator&lt;int[]&gt;() &#123; @Override public int compare(int[] o1, int[] o2) &#123; return o1[1] - o2[1]; &#125; &#125;); int cnt = 1; int end = intervals[0][1]; for(int i = 0; i &lt; intervals.length; i++)&#123; if(intervals[i][0] &lt; end)&#123; continue; &#125; end = intervals[i][1]; cnt++; &#125; return intervals.length - cnt; &#125;&#125; Arrays.sort( )用lambda表达式可写为，执行效率低： 1Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[1]));]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 535.TinyURL 的加密与解密]]></title>
    <url>%2F2020%2F03%2F25%2Fleetcode-535%2F</url>
    <content type="text"><![CDATA[哈希表使用 O(N) 空间复杂度存储数据，并且以 O(1) 时间复杂度求解问题。 Java 中的 HashSet 用于存储一个集合，可以查找元素是否在集合中。如果元素有穷，并且范围不大，那么可以用一个布尔数组来存储一个元素是否存在。例如对于只有小写字符的元素，就可以用一个长度为 26 的布尔数组来存储一个字符集合，使得空间复杂度降低为 O(1)。 Java 中的 HashMap 主要用于映射关系，从而把两个元素联系起来。HashMap 也可以用来对元素进行计数统计，此时键为元素，值为计数。和 HashSet 类似，如果元素有穷并且范围不大，可以用整型数组来进行统计。在对一个内容进行压缩或者其它转换时，利用 HashMap 可以把原始内容和转换后的内容联系起来。例如在一个简化 url 的系统中 Leetcdoe : 535. Encode and Decode TinyURL (Medium) 535.TinyURL 的加密与解密 535.Encode and Decode TinyURL (Medium) LeetCode - TinyURL 的加密与解密 题目描述TinyURL是一种URL简化服务， 比如：当你输入一个URL https://leetcode.com/problems/design-tinyurl 时，它将返回一个简化的URL http://tinyurl.com/4e9iAk. 要求：设计一个 TinyURL 的加密 encode 和解密 decode 的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。 解题思路解法很多，但一般不作为编程题出现。 1234567891011121314//代码简洁之道public class Codec &#123; // Encodes a URL to a shortened URL. public String encode(String longUrl) &#123; return longUrl; &#125; // Decodes a shortened URL to its original URL. public String decode(String shortUrl) &#123; return shortUrl; &#125;&#125;// Your Codec object will be instantiated and called as such:// Codec codec = new Codec();// codec.decode(codec.encode(url)); 简单计数法 为了加密 URL，我们使用计数器 (i) ，每遇到一个新的 URL 都加一。我们将 URL 与它的次数 i 放在哈希表 HashMap 中，这样我们在稍后的解密中可以轻易地获得原本的 URL。 可以加密解密的 URL 数目受限于 int 所能表示的范围。 如果超过 int 个 URL 需要被加密，那么超过范围的整数会覆盖之前存储的 URL，导致算法失效。 URL 的长度不一定比输入的 longURL 短。它只与加密的 URL 被加密的顺序有关。 这个方法的问题是预测下一个会产生的加密 URL 非常容易，因为产生几个 URL 后很容易推测出生成的模式。 12345678910111213public class Codec &#123; Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;(); int i = 0; public String encode(String longUrl) &#123; map.put(i, longUrl); return "http://tinyurl.com/" + i++; &#125; public String decode(String shortUrl) &#123; return map.get(Integer.parseInt(shortUrl.replace("http://tinyurl.com/", ""))); &#125;&#125; 随机固定长度加密（通用解法） 在这种方法中，使用数字和字母表集合来为 URL 生成加密结果。这种方法中，加密后的长度固定是 6 位。如果产生出来的加密结果与之前产生的结果一样，就换一个新的加密结果。 可加密的 URL 数目非常大，几乎是$(10+26*2)^6$级别。 加密 URL 的长度固定是 6，这相比于能加密的字符串数目是极大的缩减优化。 这个方法的表现非常好，因为几乎不可能产生相同加密结果。 我们也可以通过增加加密字符串的长度来增加加密结果的数目。因此，在加密字符串的长度和可加密的字符串数目之间我们需要做一个权衡。 根据加密 URL 预测加密结果几乎是不可能的，因为使用了随机数。 1234567891011121314151617181920212223242526public class Codec &#123; String alphabet = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;(); Random rand = new Random(); String key = getRand(); public String getRand() &#123; StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; 6; i++) &#123; sb.append(alphabet.charAt(rand.nextInt(62))); &#125; return sb.toString(); &#125; public String encode(String longUrl) &#123; while (map.containsKey(key)) &#123; key = getRand(); &#125; map.put(key, longUrl); return "http://tinyurl.com/" + key; &#125; public String decode(String shortUrl) &#123; return map.get(shortUrl.replace("http://tinyurl.com/", "")); &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 51.N皇后]]></title>
    <url>%2F2018%2F08%2F20%2Fleetcode-51%2F</url>
    <content type="text"><![CDATA[51. N皇后 51.N-Queens (Hard) Leetcode / 力扣 题目描述 在 n*n 的矩阵中摆放 n 个皇后，并且每个皇后不能在同一行，同一列，同一对角线上，求所有的 n 皇后的解。 解题思路这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。 当 N = 8 时，就是八皇后问题，数学大佬高斯穷尽一生都没有数清楚八皇后问题到底有几种可能的放置方法，但是我们的算法只需要一秒就可以算出来所有可能的结果。 不过真的不怪高斯。这个问题的复杂度确实非常高，看看我们的决策树，虽然有 isValid 函数剪枝，但是最坏时间复杂度仍然是 O(N^(N+1))，而且无法优化。如果 N = 10 的时候，计算就已经很耗时了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution &#123; private List&lt;List&lt;String&gt;&gt; res; private static List&lt;String&gt; charToString(char[][] array) &#123; List&lt;String&gt; result = new LinkedList&lt;&gt;(); for (char[] chars : array) &#123; result.add(String.valueOf(chars)); &#125; return result; &#125; /* 输入棋盘边长 n，返回所有合法的放置 */ public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) &#123; if (n &lt;= 0) return null; res = new LinkedList&lt;&gt;(); // '.' 表示空，'Q' 表示皇后，初始化空棋盘 char[][] board = new char[n][n]; for (char[] chars : board)&#123; Arrays.fill(chars, '.'); &#125; backtrack(board, 0); return res; &#125; /** * 路径：board中小于row的那些行都已经成功放置了皇后 * 可选择列表: 第row行的所有列都是放置Q的选择 * 结束条件: row超过board的最后一行 */ private void backtrack(char[][] board, int row) &#123; // 结束条件，构造输出 if (row == board.length) &#123; res.add(charToString(board)); return; &#125; int n = board[row].length; for (int col = 0; col &lt; n; col++) &#123; // 排除不合法选择 if (!isValid(board, row, col)) continue; // 做选择 board[row][col] = 'Q'; // 进入下一行决策 backtrack(board, row + 1); // 撤销选择 board[row][col] = '.'; &#125; &#125; /* 是否可以在 board[row][col] 放置皇后？ */ private boolean isValid(char[][] board, int row, int col) &#123; int rows = board.length; // check is valid in col列 for (char[] chars : board) if (chars[col] == 'Q') return false; // check is valide upright右上方 for (int i = row - 1, j = col + 1; i &gt;= 0 &amp;&amp; j &lt; rows; i--, j++) &#123; if (board[i][j] == 'Q') return false; &#125; // check is valide upleft左上方 for (int i = row - 1, j = col - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) &#123; if (board[i][j] == 'Q') return false; &#125; return true; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>回溯搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1143.最长公共子序列]]></title>
    <url>%2F2017%2F08%2F28%2Fleetcode-1143%2F</url>
    <content type="text"><![CDATA[※ 最长公共子序列 对于两个子序列 S1 和 S2，找出它们最长的公共子序列。 定义一个二维数组 dp 用来存储最长公共子序列的长度，其中$ dp[i][j] $表示 S1 的前 i 个字符与 S2 的前 j 个字符最长公共子序列的长度。考虑 $S1_i $与$ S2_j $值是否相等，分为两种情况： 当 $S1_i==S2_j $时，那么就能在 S1 的前 i-1 个字符与 S2 的前 j-1 个字符最长公共子序列的基础上再加上$ S1_i $这个值，最长公共子序列长度加 1，即 $dp[i][j] = dp[i-1][j-1] + 1$。 当 $S1_i != S2_j $时，此时最长公共子序列为 S1 的前 i-1 个字符和 S2 的前 j 个字符最长公共子序列，或者 S1 的前 i 个字符和 S2 的前 j-1 个字符最长公共子序列，取它们的最大者，即 $dp[i][j] = max({ dp[i-1][j], dp[i][j-1] })$。 综上，最长公共子序列的状态转移方程为： 对于长度为 N 的序列 S1 和长度为 M 的序列 S2，$dp[N][M] $就是序列 S1 和序列 S2 的最长公共子序列长度。 与最长递增子序列相比，最长公共子序列有以下不同点： 针对的是两个序列，求它们的最长公共子序列。 在最长递增子序列中，$dp[i]$ 表示以 $S_i $为结尾的最长递增子序列长度，子序列必须包含 $S_i$ ；在最长公共子序列中，$dp[i][j] $表示 S1 中前 i 个字符与 S2 中前 j 个字符的最长公共子序列长度，不一定包含 $S1_i $和 $S2_j$。 在求最终解时，最长公共子序列中 $dp[N][M] $就是最终解，而最长递增子序列中 $dp[N] $不是最终解，因为以 $S_N$ 为结尾的最长递增子序列不一定是整个序列最长递增子序列，需要遍历一遍 dp 数组找到最大者。 1143. 最长公共子序列 1143.Longest Common Subsequence Leetcode / 力扣 题目描述给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。 若这两个字符串没有公共子序列，则返回 0。 12345示例 1:输入：text1 = "abcde", text2 = "ace" 输出：3 解释：最长公共子序列是 "ace"，它的长度为 3。 解题思路同上，记住状态转移方程就可以。 1234567891011121314151617class Solution &#123; public int longestCommonSubsequence(String text1, String text2) &#123; int n1 = text1.length(), n2 = text2.length(); int[][] dp = new int[n1 + 1][n2 + 1]; for(int i = 1; i &lt;= n1; i++)&#123; for(int j = 1; j &lt;= n2; j++)&#123; if(text1.charAt(i - 1) == text2.charAt(j - 1))&#123; dp[i][j] = dp[i - 1][j - 1] + 1; &#125;else&#123; dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); &#125; &#125; &#125; return dp[n1][n2]; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 455.分配饼干]]></title>
    <url>%2F2017%2F08%2F24%2Fleetcode-455%2F</url>
    <content type="text"><![CDATA[455.分配饼干 Assign Cookies (Easy) LeetCode 分发饼干 题目描述12Input: grid[1,3], size[1,2,4]Output: 2Copy to clipboardErrorCopied 题目描述：每个孩子都有一个满足度 grid，每个饼干都有一个大小 size，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。 解题思路 给一个孩子的饼干应当尽量小并且又能满足该孩子，这样大饼干才能拿来给满足度比较大的孩子。 因为满足度最小的孩子最容易得到满足，所以先满足满足度最小的孩子。 在以上的解法中，我们只在每次分配时饼干时选择一种看起来是当前最优的分配方法，但无法保证这种局部最优的分配方法最后能得到全局最优解。我们假设能得到全局最优解，并使用反证法进行证明，即假设存在一种比我们使用的贪心策略更优的最优策略。如果不存在这种最优策略，表示贪心策略就是最优策略，得到的解也就是全局最优解。 证明：假设在某次选择中，贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。假设存在一种最优策略，可以给该孩子分配第 n 个饼干，并且 m &lt; n。我们可以发现，经过这一轮分配，贪心策略分配后剩下的饼干一定有一个比最优策略来得大。因此在后续的分配中，贪心策略一定能满足更多的孩子。也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。 1234567891011121314151617class Solution &#123; public int findContentChildren(int[] g, int[] s) &#123; if(g == null || s == null) return 0; //贪心方法，先排序 Arrays.sort(g); Arrays.sort(s); int gi = 0, si = 0; while(gi &lt; g.length &amp;&amp; si &lt; s.length)&#123; if(g[gi] &lt;= s[si])&#123; gi++; &#125; si++; &#125; return gi; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 241.给表达式加括号]]></title>
    <url>%2F2017%2F07%2F26%2Fleetcode-241%2F</url>
    <content type="text"><![CDATA[241.给表达式加括号 Different Ways to Add Parentheses (Medium) Leetcode / 力扣 题目描述123456Input: "2-1-1".((2-1)-1) = 0(2-(1-1)) = 2Output : [0, 2] 解题思路123456789101112131415161718192021222324252627282930313233343536class Solution &#123; public List&lt;Integer&gt; diffWaysToCompute(String input) &#123; List&lt;Integer&gt; ways = new ArrayList&lt;&gt;(); /* 递归：以某个字符作为分隔符断开字符串，递归遍历左右两边 做法类似构造二叉树，也是分割开来左右遍历，然后合并 */ for(int i = 0; i &lt; input.length(); i++)&#123; char c = input.charAt(i); if(c == '+' || c == '-' || c == '*')&#123; List&lt;Integer&gt; left = diffWaysToCompute(input.substring(0, i)); List&lt;Integer&gt; right = diffWaysToCompute(input.substring(i + 1)); for (int l : left) &#123; for (int r : right) &#123; switch (c) &#123; case '+': ways.add(l + r); break; case '-': ways.add(l - r); break; case '*': ways.add(l * r); break; &#125; &#125; &#125; &#125; &#125; //纯数字 if (ways.size() == 0) &#123; ways.add(Integer.valueOf(input)); &#125; return ways; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>LeetCode</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[debian系Cron定时任务]]></title>
    <url>%2F2017%2F03%2F01%2Fdebian-cron%2F</url>
    <content type="text"><![CDATA[Install1apt-get install cron Create a scheduled task 键入 crontab -e 编辑 crontab 服务文件 用 crontab -u username -l 命令,查看该用户下的crontab服务是否创建成功 用 ps -ax | grep cron 查看服务是否已经运行 初始化 cron 进程，使用 systemctl 进行管理的发行版同理 启动 /etc/init.d/cron start 关闭 /etc/init.d/cron stop 重启 /etc/init.d/cron restart Configuration1. 编辑配置文件 crontab是通过读取一个crontab文件来工作，这是一个普通的文本文件，里面列出了要执行的任务。每行都含有要指定的任务的命令、参数与选项，以及要执行任务的时间。（cron 软件在后台运行并且经常检查 /etc/crontab 文件。cron 软件也检查 /var/cron/tabs 目录，搜索新的 crontab 文件。这些 crontab 文件存储一些 cron 在特定时间执行任务的信息。） crontab的基本格式： 1* * * * * command 几个星号分别为：分 时 日 月 周，最后是要执行的命令。 分：0~59 时：0~23 日：1~31 月：1~12 周：0～6（0表示星期天） 除了数字还有几个个特殊的符号就是* / - ： * 代表所有的取值范围内的数字 / 代表每的意思 */5 表示每5个单位 - 代表从某个数字到某个数字 , 分开几个离散的数字 配置文件的一些例子： 0 3 * /root/test.sh 每天凌晨3点执行test.sh文件 * 23-7/1 * /root/lnmp restart 晚上11点到早上7点之间，每隔一小时重启lnmp套件 /30 * /usr/sbin/ntpdate 每半小时同步一下时间 0 23 6 /lnmp restart 每星期六的11 : 00 pm重启重启lnmp套件。 /1 * echo “i am running.”&gt;&gt;/tmp/running.txt 每隔1分钟向/tmp/running.txt写一个”i am running.”字符串。 2. 直接用crontab命令编辑cron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明： crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数 crontab -l //列出某个用户cron服务的详细内容 crontab -r //删除每个用户的cron服务 crontab -e //编辑某个用户的cron服务 比如说root查看自己的cron设置： crontab -u root -l 再例如，root想删除fred的cron设置： crontab -u fred -r 在编辑cron服务时，编辑的内容有一些格式和约定，输入： crontab -u root -e]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于flask的microBlog开发笔记（五）]]></title>
    <url>%2F2017%2F02%2F13%2Fmicroblog-develop-documentation-05%2F</url>
    <content type="text"><![CDATA[5.用户首页和发布博客我们已经完成了登录系统，则可以使用昵称和邮件登录，接下来要完成用户个人界面信息，在此之前先将数据库清空:123456789&gt;&gt;&gt; users = User.query.all()&gt;&gt;&gt; for u in users:... db.session.delete(u)...&gt;&gt;&gt; posts = Post.query.all()&gt;&gt;&gt; for p in posts:... db.session.delete(p)...&gt;&gt;&gt; db.session.commit() 我们将创建用户信息页，显示用户信息以及最近的 blog。作为其中一部分，我们将会学习到显示用户头像。接着，我们将要用户 web 表单用来编辑用户信。 1.用户信息首页创建一个用户信息不需要引入新的概念,只要创建一个新的视图函数以及与它配套的 HTML 模版。添加用户信息类，并定义用户信息字段修改（forms.py）文件1234class AboutMeForm(Form): describe = TextAreaField('about me', validators=[ Required(), Length(max=140)]) submit = SubmitField('YES!') 添加用户新信息的视图函数(app/views.py) 1234567891011121314151617from forms import LoginForm, SignUpForm, AboutMeForm@app.route('/user/&lt;int:user_id&gt;', methods=["POST", "GET"])@login_requireddef users(user_id): form = AboutMeForm() user = User.query.filter(User.id == user_id).first() if not user: flash("The user is not exist.") redirect("/index") blogs = user.posts.all() return render_template( "user.html", form=form, user=user, blogs=blogs) 用于这个视图函数的装饰器与之前的有些不同，在这个例子中，我们有一个参数在里面，用 &lt;int: user_id&gt; 来表示。这将转化为一个同名的参数添加到视图函数。比如当客户端以URL /user/1 请求的时候，视图函数将收到一个 user_id = 1 参数从而而被调用。视图函数的实现没有让人惊喜的。首先，我们使用接收到参数 user_id 试着从数据库载入用户。如果没有找到用户的话，我们将会抛出错误信息，重定向到主页，我们还添加了@login_required装饰器，如果没有登陆的用户，向通过URL直接访问该页面，那么我们会直接在页面上报错，阻止其访问。若找到用户，将其传入到 render_template 调用，并且传入user.posts.all()找出的该用户的blogs；若如果没有找到用户，模板会显示小小的提示The user is not exist！，并跳转到主页。 用户信息页,创建文件app/templates/user.html1234567891011121314151617&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;p&gt;Name: &#123;&#123; user.nickname &#125;&#125;&lt;/p&gt;&lt;p&gt;Email: &#123;&#123; user.email &#125;&#125;&lt;/p&gt;&lt;hr&gt;&#123;% if blogs | length %&#125; &#123;% for blog in blogs %&#125; &lt;p&gt;&#123;&#123; blog.body &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;&lt;/p&gt; &lt;hr /&gt; &#123;% endfor %&#125;&#123;% else %&#125; &lt;p style="color:blue;"&gt;the guy is so lazy.....&lt;/p&gt;&#123;% endif %&#125;&#123;% endblock %&#125; 用户信息页现在已经完成了，但是缺少对它的链接。为了让用户很容易地检查他的或者她的信息，我们直接把用户信息页的链接放在导航栏中修改文件( app/templates/base.html)12345678910&lt;div&gt;Microblog: &lt;a href="&#123;&#123; url_for('index') &#125;&#125;"&gt;Home&lt;/a&gt; &#123;% if not current_user.is_authenticated() %&#125; | &lt;a href="&#123;&#123; url_for('login') &#125;&#125;"&gt;Log in&lt;/a&gt; or &lt;a href="&#123;&#123; url_for('sign_up') &#125;&#125;"&gt;Sign up&lt;/a&gt; &#123;% else %&#125; | &lt;a href="&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"&gt;Profile&lt;/a&gt; | &lt;a href="&#123;&#123; url_for('logout') &#125;&#125;"&gt;Logout&lt;/a&gt; &#123;% endif %&#125;&lt;/div&gt; 2.发布博客首先在forms.py文件中添加博客内容的字段：123class PublishBlogForm(Form): body = TextAreaField('blog content', validators=[Required()]) submit = SubmitField('Submit') 而且要在app/views.py中加入如下函数1234567891011121314151617181920212223242526272829303132from string import stripimport datetimefrom forms import LoginForm, SignUpForm, AboutMeForm, PublishBlogForm@app.route('/publish/&lt;int:user_id&gt;', methods=["POST", "GET"])@login_requireddef publish(user_id): form = PublishBlogForm() posts = Post() if form.validate_on_submit(): blog_body = request.form.get("body") if not len(strip(blog_body)): flash("The content is necessray!") return redirect(url_for("publish", user_id=user_id)) posts.body = blog_body posts.timestamp = datetime.datetime.now() posts.user_id = user_id try: db.session.add(posts) db.session.commit() except: flash("Database error!") return redirect(url_for("publish", user_id=user_id)) flash("Publish Successful!") return redirect(url_for("publish", user_id=user_id)) return render_template( "publish.html", form=form) 接收当前用户的user_id用于填充Post表的user_id字段，以便在用户主页显示该用户所属的blogs。为了防止blog内容为空，除了在forms.py里添加validator的限制外，我们还要在后台再一次对输入数据的验证，strip(blog_body)就是为了防止用户只输入空格的情况，它会将字符串两边的空格去掉，如果内容仅仅为空格的话，那么长度肯定是为0的，一旦这种事情发生了，就立即报错，并刷新当前页面。 将数据库的对应的字段赋值完毕之后，使用db.session.add(posts)，db.session.commint()将值写入数据库中，因为操作数据库的时候可能会出现一些意想不到的问题，所以我们应该用try….except….来处理这些问题，提高适用性(app/publish.html)123456789&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;form action="&#123;&#123; url_for("publish", user_id=current_user.id) &#125;&#125;" method="POST" name="publish"&gt; &#123;&#123; form.hidden_tag() &#125;&#125;&lt;p&gt;&#123;&#123; form.body &#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;&lt;/form&gt;&#123;% endblock %&#125; 3.子模版已经实现了用户信息页，它能够显示用户的 blog。首页也应该显示任何一个用户这个时候的 blog 。这样就需要有两个页需要显示用户的 blog，即要制作一个渲染 blog 的子模板，我们在使用它的模板中包含这个子模板(/app/templates/post.html)12345&lt;table&gt; &lt;tr valign="top"&gt; &lt;td&gt;&lt;img src="&#123;&#123;post.author.avatar(50)&#125;&#125;"&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;&#123;&#123;post.author.nickname&#125;&#125; says:&lt;/i&gt;&lt;br&gt;&#123;&#123;post.body&#125;&#125;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 接着我们使用include命令在我们的用户模板中调用这个子模板(app/templates/user.html)1234567891011121314&#123;% extends "base.html" %&#125;&#123;% block content %&#125; &lt;table&gt; &lt;tr valign="top"&gt; &lt;td&gt;&lt;h1&gt;User: &#123;&#123; user.nickname &#125;&#125;&lt;/h1&gt;&lt;/td&gt; &lt;td&gt;&lt;h1&gt;User: &#123;&#123; user.email &#125;&#125;&lt;/h1&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;hr&gt;&#123;% for post in posts %&#125; &#123;% include 'post.html' %&#125;&#123;% endfor %&#125;&#123;% endblock % 4.用户自我介绍用户自我说明可以显示在用户信息页上，因此用户会写一些自我介绍，并将它们显示在用户资料页上。也可以追踪每个用户访问页面的最后一次的时间，将把它显示在用户信息页上。为了增加这些，就必须开始修改数据库。更具体地说，就是必须在User 类上增加两个字段(app/models.py)12345678class User(db.Model): id = db.Column(db.Integer, primary_key=True) nickname = db.Column(db.String(15), index=True, unique=True) email = db.Column(db.String(128), index=True, unique=True) role = db.Column(db.SmallInteger, default=ROLE_USER) posts = db.relationship('Post', backref='author', lazy='dynamic') about_me = db.Column(db.String(140)) last_seen = db.Column(db.DateTime) 前面已经写过数据库的迁移,因此为了增加这两个新字段到数据库，需要运行升级脚本，若没有迁移的支持，也可以手动地编辑数据库，最差的方式就是删除表再重新创建。接着，修改用户信息页模板来展示这些字段(app/templates/user.html)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;p&gt;Name: &#123;&#123; user.nickname &#125;&#125;&lt;/p&gt;&lt;p&gt;Email: &#123;&#123; user.email &#125;&#125;&lt;/p&gt;&#123;% if user.about_me %&#125;&lt;p onclick="about_me()"&gt;about me: &#123;&#123; user.about_me &#125;&#125;&lt;/p&gt;&#123;% else %&#125;&lt;p style="color:#4499EE;" onclick="about_me()"&gt;about me: I'm a person. ---- this info from the system.&lt;/p&gt;&#123;% endif %&#125;&lt;div id="aboutMe" style="display:none;"&gt; &lt;form action="&#123;&#123; url_for('about_me', user_id=current_user.id) &#125;&#125;" method="POST"&gt; &#123;&#123; form.hidden_tag() &#125;&#125; &#123;&#123; form.describe &#125;&#125; &#123;&#123; form.submit &#125;&#125; &lt;/form&gt;&lt;/div&gt;&lt;p style="color:#4c4c4c;"&gt;last log: &#123;&#123; user.last_seen.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;&lt;/p&gt;&lt;a href="&#123;&#123; url_for('publish', user_id=user.id) &#125;&#125;"&gt;Want to publish blogs?&lt;/a&gt;&lt;hr /&gt;&#123;% if blogs | length %&#125; &#123;% for blog in blogs %&#125; &lt;p&gt;&#123;&#123; blog.body &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; blog.timestamp.strftime("%a, %d %b %Y %H:%M:%S") &#125;&#125;&lt;/p&gt; &lt;hr /&gt; &#123;% endfor %&#125;&#123;% else %&#125; &lt;p style="color:blue;"&gt;the guy is so lazy.....&lt;/p&gt;&#123;% endif %&#125;&#123;% endblock %&#125;&#123;% block js %&#125;&lt;script&gt;function about_me() &#123; target = document.getElementById("aboutMe"); if (target.style.display == "block") &#123; target.style.display = "none"; &#125; else &#123; target.style.display = "block"; &#125;&#125;&lt;/script&gt;&#123;% endblock %&#125; 在user.html中多出了一段js代码，这段js代码作用是点击about me的时候，弹出一个编辑框以便我们修改自己的个人描述，当然要在base.html中添加一个block：12345678910111213141516171819202122232425262728293031323334&lt;html&gt; &lt;head&gt; &#123;% if title %&#125; &lt;title&gt;&#123;&#123;title&#125;&#125; - microblog&lt;/title&gt; &#123;% else %&#125; &lt;title&gt;microblog&lt;/title&gt; &#123;% endif %&#125; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Microblog: &lt;a href="&#123;&#123; url_for('index') &#125;&#125;"&gt;Home&lt;/a&gt; &#123;% if not current_user.is_authenticated() %&#125; | &lt;a href="&#123;&#123; url_for('login') &#125;&#125;"&gt;Log in&lt;/a&gt; or &lt;a href="&#123;&#123; url_for('sign_up') &#125;&#125;"&gt;Sign up&lt;/a&gt; &#123;% else %&#125; | &lt;a href="&#123;&#123; url_for('users', user_id = current_user.id) &#125;&#125;"&gt;Profile&lt;/a&gt; | &lt;a href="&#123;&#123; url_for('logout') &#125;&#125;"&gt;Logout&lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;hr /&gt; &#123;% with messages = get_flashed_messages() %&#125; &#123;% if messages %&#125; &lt;ul&gt; &#123;% for message in messages %&#125; &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &#123;% endif %&#125; &#123;% endwith %&#125; &#123;% block content %&#125;&#123;% endblock %&#125; &lt;/body&gt; &#123;% block js %&#125;&#123;% endblock %&#125;&lt;/html&gt; 最后，当要输入新的个人信息时，击yes后，能将够刷新当前页面并且显示新的个人描述，则修改views.py:1234567891011121314151617@app.route('/user/about-me/&lt;int:user_id&gt;', methods=["POST", "GET"])@login_requireddef about_me(user_id): user = User.query.filter(User.id == user_id).first() if request.method == "POST": content = request.form.get("describe") if len(content) and len(content) &lt;= 140: user.about_me = content try: db.session.add(user) db.session.commit() except: flash("Database error!") return redirect(url_for("users", user_id=user_id)) else: flash("Sorry, May be your data have some error.") return redirect(url_for("users", user_id=user_id)) 这里和原来写的不太一样，原来的表单提交都是在当前页面进行处理的，当点击yes后，会通过post的方式将数据发送到/user/about-me/2页面上去处理，所以使用request.method == “POST”进行判定之后，获取表单数据，当然也要判断content的长度，并进行相应的处理，最后跳转回用户主页面。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于flask的microBlog开发笔记（四）]]></title>
    <url>%2F2017%2F02%2F11%2Fmicroblog-develop-documentation-04%2F</url>
    <content type="text"><![CDATA[4.用户登录1.配置 对于登录系统，使用到扩展：Flask-Login。配置情况如下(app/init.py)1234567891011121314151617181920#-*- coding:utf-8 -*-from flask import Flaskfrom flask.ext.sqlalchemy import SQLAlchemyfrom flask.ext.login import LoginManager# 初始化flask应用app = Flask(__name__)app.config.from_object('config')# 初始化数据库db = SQLAlchemy(app)# 初始化flask-Loginlm = LoginManager()lm.setup_app(app)from app import views, models 2.重构用户模型Flask-Login 扩展需要在我们的 User 类中实现一些特定的方法，但是类如何去实现这些方法却没有什么要求，让我们为 Flask-Login 实现的 User 类(app/models.py) 12345678910111213141516171819202122232425262728293031class User(db.Model): id = db.Column(db.Integer, primary_key=True) nickname = db.Column(db.String(15), index=True, unique=True) email = db.Column(db.String(128), index=True, unique=True) role = db.Column(db.SmallInteger, default=ROLE_USER) posts = db.relationship('Post', backref='author', lazy='dynamic') def is_authenticated(self): return True def is_active(self): return True def is_anonymous(self): return False def get_id(self): return unicode(self.id) @classmethod def login_check(cls, user_name): user = cls.query.filter(db.or_( User.nickname == user_name, User.email == user_name)).first() if not user: return None return user def __repr__(self): return '&lt;User %r&gt;' % (self.nickname) is_authenticated 方法有一个具有迷惑性的名称。一般而言，这个方法应该只返回 True，除非表示用户的对象因为某些原因不允许被认证；is_active 方法应该返回 True，除非是用户是无效的，比如因为他们的账号被禁止；is_anonymous 方法应该返回 True，除非是伪造的用户不允许登录系统；get_id 方法应该返回一个用户唯一的标识符，以 unicode 格式返回我们使用数据库生成的唯一的id。 3.user_loader 回调我们已经准备好用 Flask-Login 扩展来开始实现登录系统。首先，我们必须编写一个函数用于从数据库加载用户，这个函数将会被 Flask-Login 使用(app/views.py) 123@lm.user_loaderdef load_user(user_id): return User.query.get(int(user_id)) Flask-Login 中的用户的id永远是 unicode 字符串，因此在我们把id 发送给 Flask-SQLAlchemy 之前，需要把id转成整型是必须的，否则会报错。 4.登陆视图函数(app/views.py)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#-*- coding:utf-8 -*-import datetimefrom flask import render_template, flash, redirect, session, url_for, request, g from flask.ext.login import login_user, logout_user, current_user, login_required from models import User, Post, ROLE_USER, ROLE_ADMINfrom app import app, db, lm@lm.user_loaderdef load_user(user_id): return User.query.get(int(user_id))... # 这里省略的是我们的index函数@app.route('/login', methods=['GET', 'POST'])def login(): # 验证用户是否被验证 if current_user.is_authenticated(): return redirect('index') # 注册验证 form = LoginForm() if form.validate_on_submit(): user = User.login_check(request.form.get('user_name')) if user: login_user(user) user.last_seen = datetime.datetime.now() try: db.session.add(user) db.session.commit() except: flash("The Database error!") return redirect('/login') flash('Your name: ' + request.form.get('user_name')) flash('remember me? ' + str(request.form.get('remember_me'))) return redirect(url_for("users", user_id=current_user.id)) else: flash('Login failed, Your name is not exist!') return redirect('/login') return render_template( "login.html", title="Sign In", form=form) 整个流程就是，验证用户，验证用户是否已经注册，如果注册则从数据库中加载用户并转到用户页面。如果要让这些都起作用的话，Flask-Login 需要知道哪个视图允许用户登录。我们在应用程序模块初始化中配置(app/init.py)12lm = LoginManager()lm.setup_app(app) 5.首页视图前面我们的 index 视图函数使用了伪造的对象，因为那时候我们并没有用户或者 blog。现在我们有用户了，让我们使用它。12345678910111213141516171819202122@app.route('/')@app.route('/index')def index(): user = 'Man' posts = [ &#123; 'author': &#123;'nickname': 'John'&#125;, 'body': 'Beautiful day in Portland!' &#125;, &#123; 'author': &#123;'nickname': 'Susan'&#125;, 'body': 'The Avengers movie was so cool!' &#125; ] return render_template( "index.html", title="Home", user=user, posts=posts) 6.登录我们已经实现了登录，现在增加登陆的功能，即对登录视图函数进行修改（app/views.py） 12345@app.route('/logout')@login_requireddef logout(): logout_user() return redirect(url_for('index')) 其中login_required是为了验证用户必须是登陆的前提，才会有登出。 7.注册 再注册前，我们需要修改app/forms.py文件以绑定数据库 12345678910111213141516171819# -*- coding:utf-8 -*-from flask_wtf import Formfrom wtforms import TextField, BooleanField, SubmitField, TextAreaFieldfrom wtforms.validators import Required, Email, Lengthclass LoginForm(Form): user_name = TextField('user name', validators=[ Required(), Length(max=15)]) remember_me = BooleanField('remember me', default=False) submit = SubmitField('Log in')class SignUpForm(Form): user_name = TextField('user name', validators=[ Required(), Length(max=15)]) user_email = TextField('user email', validators=[ Email(), Required(), Length(max=128)]) submit = SubmitField('Sign up') 在这里添加了类SignUpForm，用户的用户名和邮件的注册提交 接着，实现用户注册视图(app/views.py)12345678910111213141516171819202122232425262728293031323334from forms import LoginForm， SignUpForm@app.route('/sign-up', methods=['GET', 'POST'])def sign_up(): form = SignUpForm() user = User() if form.validate_on_submit(): user_name = request.form.get('user_name') user_email = request.form.get('user_email') register_check = User.query.filter(db.or_( User.nickname == user_name, User.email == user_email)).first() if register_check: flash("error: The user's name or email already exists!") return redirect('/sign-up') if len(user_name) and len(user_email): user.nickname = user_name user.email = user_email user.role = ROLE_USER try: db.session.add(user) db.session.commit() except: flash("The Database error!") return redirect('/sign-up') flash("Sign up successful!") return redirect('/index') return render_template( "sign_up.html", form=form) 在提交注册信息的时候验证数据库中是否已经注册该用户信息，如果没有注册则在数据库中提交该信息，并显示注册成功，转到首页。 在修改主页index.html 123456789101112131415&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&#123;% if not current_user.is_authenticated() %&#125;&lt;h1&gt;Hi, Guys!&lt;/h1&gt;&#123;% else %&#125;&lt;h1&gt;Welcome back, &#123;&#123; current_user.nickname &#125;&#125;!&lt;/h1&gt;&#123;% endif %&#125;&#123;% for post in posts %&#125; &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125;&#123;% endblock %&#125; 修改登录模版（login.html） 12345678910111213141516&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;h1&gt;Sign Up&lt;/h1&gt;&lt;form action="/login" method="post" name="login"&gt; &#123;&#123; form.hidden_tag() &#125;&#125; &lt;p&gt;Please enter your name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt; &#123;% for error in form.errors.user_name %&#125; &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;p&gt;记住我？ &#123;&#123; form.remember_me &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;&lt;/form&gt;&#123;% endblock %&#125; 当现在如果运行程序的话，肯定会说用户名不存在，因为还需要建立一个注册模版（sign_up.html）1234567891011121314151617181920&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;form action="/sign-up", method="POST" name="sign_up"&gt; &#123;&#123; form.hidden_tag() &#125;&#125; &lt;p&gt;Nick name: &#123;&#123; form.user_name &#125;&#125;&lt;/p&gt; &#123;% for error in form.errors.user_name %&#125; &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;p&gt;E-mail: &#123;&#123; form.user_email &#125;&#125;&lt;/p&gt; &#123;% for error in form.errors.user_email %&#125; &lt;p style="color:red;"&gt;[-] &#123;&#123; error &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;/p&gt;&lt;/form&gt;&#123;% endblock %&#125; 但是还没有在模版中添加登出和注册的链接。将要把这个链接放在基础层中的导航栏里(app/templates/base.html)123456789101112131415161718192021222324252627282930313233&lt;html&gt; &lt;head&gt; &#123;% if title %&#125; &lt;title&gt;&#123;&#123;title&#125;&#125; - microblog&lt;/title&gt; &#123;% else %&#125; &lt;title&gt;microblog&lt;/title&gt; &#123;% endif %&#125; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Microblog: &lt;a href="&#123;&#123; url_for('index') &#125;&#125;"&gt;Home&lt;/a&gt; &#123;% if not current_user.is_authenticated() %&#125; | &lt;a href="&#123;&#123; url_for('login') &#125;&#125;"&gt;Log in&lt;/a&gt; or &lt;a href="&#123;&#123; url_for('sign_up') &#125;&#125;"&gt;Sign up&lt;/a&gt; &#123;% else %&#125; | &lt;a href="&#123;&#123; url_for('logout') &#125;&#125;"&gt;Logout&lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;hr /&gt; &#123;% with messages = get_flashed_messages() %&#125; &#123;% if messages %&#125; &lt;ul&gt; &#123;% for message in messages %&#125; &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &#123;% endif %&#125; &#123;% endwith %&#125; &#123;% block content %&#125;&#123;% endblock %&#125; &lt;/body&gt; &#123;% block js %&#125;&#123;% endblock %&#125;&lt;/html&gt;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于flask的microBlog开发笔记（三）]]></title>
    <url>%2F2017%2F02%2F11%2Fmicroblog-develop-documentation-03%2F</url>
    <content type="text"><![CDATA[3.数据库1.flask中的数据库 数据库迁移，使用 SQLAlchemy-migrate 来跟踪数据库的更新。这只是在开始建立数据库的时候比较花费工作时间，以后就再不用人工进行数据的迁移了。 12$ source flask/bin/activate$ pip install SQLAlchemy-migrate 数据库配置，针对我们小型的应用，我们将采用 sqlite 数据库，sqlite 数据库是小型应用的最方便的选择，每一个数据库都是存储在单个文件里，这里对config.py进行再次配置。 12345import osbasedir = os.path.abspath(os.path.dirname(__file__))sqlalchemy_database_url = 'sqlite:///' + os.path.join(basedir, 'app.db')sqlalchemy_migrate_repo = os.path.join(basedir, 'db_repository') sqlalchemy_database_url是 Flask-aqlalchemy 扩展需要的，存储我们数据库文件的路径,sqlalchemy_migrate_repo 是文件夹,存储数据库文件。对init.py文件更新。 12345678from flask import Flaskfrom flask.ext.sqlalchemy import SQLAlchemyapp = Flask(__name__)app.config.from_object('config')db = SQLAlchemy(app)from app import views, models 创建了一个 db 对象，这是我们的数据库，接着导入一个新的模块，叫做 models。 数据库模型(app/models.py) 12345678910111213#-*- coding:utf-8 -*-from app import dbROLE_USER = 0ROLE_ADMIN = 1class User(db.Model):id = db.Column(db.Integer, primary_key = True)nickname = db.Column(db.String(64), index = True, unique = True)email = db.Column(db.String(120), index = True, unique = True)role = db.Column(db.SmallInteger, default = ROLE_USER)def __repr__(self): return '&lt;User %r&gt;' % (self.nickname) 创建的 User 类包含一些字段，这些字段被定义成类的变量,repr 方法告诉 Python 如何打印这个类的对象。 创建数据库，创建数据库脚本文件(db_create.py) 12345678910111213141516#-*- coding:utf-8 -*-from migrate.versioning import apifrom config import SQLALCHEMY_DATABASE_URIfrom config import SQLALCHEMY_MIGRATE_REPOfrom app import dbimport os.pathdb.create_all()# 当数据库不存在的时候创建新的数据库if not os.path.exists(SQLALCHEMY_MIGRATE_REPO): api.create(SQLALCHEMY_MIGRATE_REPO, 'database repository') api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)# 否则直接更新else: api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, api.version(SQLALCHEMY_MIGRATE_REPO)) 运行这个脚本文件，python db_create.py，运行完后在app下会发现新的app.db文件，这是一个空的sqlite数据库，创建后就支持迁移，还有一个db_repository文件，这是SQLAlchemy-migrate 存储它的数据文件的地方。 2.第一次迁移这是我们第一次迁移，我们将从一个空数据库迁移到一个能存储用户的数据库上，用db_migrate.py实现12345678910111213141516171819202122#-*- coding:utf-8 -*-import impfrom migrate.versioning import apifrom app import dbfrom config import SQLALCHEMY_DATABASE_URIfrom config import SQLALCHEMY_MIGRATE_REPOmigration = SQLALCHEMY_MIGRATE_REPO + '/versions/%03d_migration.py' % (api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) + 1)tmp_module = imp.new_module('old_model')old_model = api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)exec old_model in tmp_module.__dict__# 将数据库与更新后的模型结构之间的不同内容存入到迁移脚本中script = api.make_update_script_for_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, tmp_module.meta, db.metadata)# 将迁移脚本写入迁移仓库中open(migration, "wt").write(script)api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)print 'New migration saved as ' + migrationprint 'Current database version: ' + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)) SQLAlchemy-migrate 迁移的方式就是比较数据库(app.db)与我们模型的结构(app/models.py),两者间的不同将会被记录成一个迁移脚本存放在迁移仓库中。 数据库的升级db_upgrade.py和回退db_downgrade.py 123456from migrate.versioning import apifrom config import SQLALCHEMY_DATABASE_URIfrom config import SQLALCHEMY_MIGRATE_REPOapi.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)print 'Current database version: ' + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)) 如果有数据库迁移的支持，当你准备发布新版的时候，你只需要录制一个新的迁移，拷贝迁移脚本到生产服务器上接着运行脚本，所有事情就完成了，数据库升级也只需要一点 Python 脚本。1234567from migrate.versioning import apifrom config import SQLALCHEMY_DATABASE_URIfrom config import SQLALCHEMY_MIGRATE_REPOv = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)api.downgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, v - 1)print 'Current database version: ' + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)) 这个脚本会回退数据库一个版本，可以运行多次来回退多个版本。 数据库关系 连接用户和他们写的 blog。方式就是通过在 posts 增加一个字段，这个字段包含了编写 blog 的用户的 id。这个 id 称为一个外键，users 表中的 id 与 posts 表中的 user_id，这种关系称为一对多，一个用户编写多篇 blog。对模板进行修改，(app/models.py)1234567891011121314151617181920212223from app import dbROLE_USER = 0ROLE_ADMIN = 1class User(db.Model): id = db.Column(db.Integer, primary_key = True) nickname = db.Column(db.String(64), unique = True) email = db.Column(db.String(120), unique = True) role = db.Column(db.SmallInteger, default = ROLE_USER) posts = db.relationship('Post', backref = 'author', lazy = 'dynamic') def __repr__(self): return '&lt;User %r&gt;' % (self.nickname)class Post(db.Model): id = db.Column(db.Integer, primary_key = True) body = db.Column(db.String(140)) timestamp = db.Column(db.DateTime) user_id = db.Column(db.Integer, db.ForeignKey('user.id')) def __repr__(self): return '&lt;Post %r&gt;' % (self.body) 添加了一个 Post 类，这是用来表示用户编写的 blog。在 Post 类中的 user_id 字段初始化成外键，因此让 Flask-SQLAlchemy 知道这个字段是连接到用户上。 3.数据库操作 首先创建一个新用户名为john1234567$ python# 进入交互式界面&gt;&gt;&gt; from app import db&gt;&gt;&gt; from app.models import User, Post, ROLE_USER, ROLE_ADMIN&gt;&gt;&gt; u1 = User(nickname='john', email='john@email.com', role=ROLE_USER)&gt;&gt;&gt; db.session.add(u1)&gt;&gt;&gt; db.session.commit() 在会话的上下文中完成对数据库的更改。多个的更改可以在一个会话中累积，当所有的更改已经提交，你可以发出一个db.session.commit()，这能原子地写入更改。如果在会话中出现错误的时候， db.session.rollback() 可以使得数据库回到会话开始的状态；若没有 commit 也没有 rollback 发生，系统默认情况下会回滚会话。会话保证数据库将永远保持一致的状态。 添加另一个用户susan 123&gt;&gt;&gt; u2 = User(nickname='susan', email='susan@email.com', role=ROLE_USER)&gt;&gt;&gt; db.session.add(u2)&gt;&gt;&gt; db.session.commit() 查询用户 123456789&gt;&gt;&gt; users = User.query.all()&gt;&gt;&gt; print users [&lt;User u'john'&gt;, &lt;User u'susan'&gt;]&gt;&gt;&gt; for u in users: ... print u.id,u.nickname ... 1 john 2 susan&gt;&gt;&gt; 提交一篇 blog 12345&gt;&gt;&gt; import datetime&gt;&gt;&gt; u = User.query.get(1)&gt;&gt;&gt; p = Post(body='my first post!', timestamp=datetime.datetime.utcnow(), author=u)&gt;&gt;&gt; db.session.add(p)&gt;&gt;&gt; db.session.commit() 设置我们的 timestamp 为UTC 时区，所有存储在数据库的时间戳都会是 UTC，世界上不同地方的用户因此需要有个统一的时间单位。 1234567891011121314151617&gt;&gt;&gt; u = User.query.get(1)&gt;&gt;&gt; print u &lt;User u'john'&gt;&gt;&gt;&gt; posts = u.posts.all()&gt;&gt;&gt; print posts [&lt;Post u'my first post!'&gt;]# 获得john的个人信息和所有博客内容&gt;&gt;&gt; for p in posts:... print p.id,p.author.nickname,p.body... 1 john my first post!&gt;&gt;&gt; u = User.query.get(2)&gt;&gt;&gt; print u &lt;User u'susan'&gt;&gt;&gt;&gt; print u.posts.all()]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于flask的microBlog开发笔记（二）]]></title>
    <url>%2F2017%2F02%2F10%2Fmicroblog-develop-documentation-02%2F</url>
    <content type="text"><![CDATA[4. flask表单初始化 表单配置许多 Flask 扩展需要大量的配置，因此我们将要在 microblog/ 文件夹下创建一个配置文件以至于容易被编辑。这就是我们将要开始的(config.py) 12CSRF_ENABLED = TrueSECRET_KEY = 'bawel' CSRF_ENABLED 配置是为了激活跨站点请求伪造保护,SECRET_KEY 配置仅仅当 CSRF 激活的时候才需要，它是用来建立一个加密的令牌，用于验证一个表单。当你编写自己的应用程序的时候，请务必设置一个很难被猜测到的密钥。当有了配置文件，我们需要告诉 Flask 去读取以及使用它。我们可以在 Flask 应用程序对象被创建后去做，方式如下(app/init.py)123456from flask import Flask app = Flask(__name__) app.config.from_object('config') from app import views 用户登录表单 创建一个登录表单，用于用户认证系统。在我们应用程序中支持的登录机制是标准的用户名/密码类型 我们同时在表单上提供一个remember me的选择框，以至于用户可以选择在他们的网页浏览器上种植 cookie ，当他们再次访问的时候，浏览器能够记住他们的登录，编写第一个表单(app/forms.py) 12345678from flask_wtf import Formfrom wtforms import TextField, BooleanField, PasswordFieldfrom wtforms.validators import Requiredclass LoginForm(Form): name = TextField('Name', validators=[Required()]) password = PasswordField('password', validators=[Required()]) remember_me = BooleanField('Remember_me', default=False) 我们导入 Form 类，接着导入两个我们需要的字段类，TextField 和 BooleanField。Required 是一个验证器，一个函数，它能够作用于一个域，用于对用户提交的数据进行验证。 Required 验证器只是简单地检查相应域提交的数据是否是空。 表单模板，我们刚刚创建的 LoginForm 类知道如何呈现为 HTML 表单字段，所以我们只需要集中精力在布局上。这里就是我们登录的模板(app/templates/login.html)123456789101112131415161718&lt;!-- extend from base layout --&gt;&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;h1&gt;Sign In&lt;/h1&gt;&lt;form action="" method="post" name="login"&gt; &#123;&#123;form.hidden_tag()&#125;&#125; &lt;p&gt; Please enter your Name:&lt;br&gt; &#123;&#123;form.name(size=80)&#125;&#125;&lt;br&gt; &lt;/p&gt; &lt;p&gt; Password:&lt;br&gt; &#123;&#123; form.password &#125;&#125; &lt;/p&gt; &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me?&lt;/p&gt; &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;&lt;/form&gt;&#123;% endblock %&#125; base.html 模板通过 extends 模板继承声明语句,form.hidden_tag() 模板参数将被替换为一个隐藏字段，用来是实现在配置中激活的 CSRF 保护。如果已经激活了 CSRF，这个字段需要出现在所有的表单中。 表单视图，(app/views.py) 1234567from flask import render_template, flash, redirect from forms import LoginForm from app import app # 这里省略了索引函数 @app.route('/login', methods = ['GET', 'POST']) def login(): form = LoginForm() 我们已经导入 LoginForm 类，从这个类实例化一个对象，接着把它传入到模板中。这就是我们渲染表单所有要做的。 5. 表单数据 接收表单数据，flask-wtf处理提交的数据，登录视图函数更新的版本，它验证并且存储表单数据 (app/views.py) 1234567891011@app.route('/login', methods = ['GET', 'POST']) def login(): form = LoginForm() if form.validate_on_submit(): flash('Login requested for Name: ' + form.name.data) flash('passwd: ' + str(form.password.data)) flash('remember_me: ' + str(form.remember_me.data)) return redirect('/index') return render_template('login.html', title = 'Sign In', form = form) 当validate_on_submit 在表单提交请求中被调用，它将会收集所有的数据，对字段进行验证，如果所有的事情都通过的话，它将会返回 True，表示数据都是合法的。若有一个没通过验证，则返回false，接着表单会重新呈现给用户，这也将给用户一次机会去修改错误。当 validate_on_submit 返回 True，登录视图函数调用了两个新的函数，flash函数是一种快速的方式下呈现给用户的页面上显示一个消息。*加强字段验证，当字段验证失败的时候， Flask-WTF 会向表单对象中添加描述性的错误信息。这些信息是可以在模板中使用的，因此我们只需要增加一些逻辑来获取它，这就是我们含有字段验证信息的登录模板(app/templates/login.html)123456789101112131415161718192021222324&lt;!-- extend base layout --&gt;&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;h1&gt;Sign In&lt;/h1&gt;&lt;form action="" method="post" name="login"&gt; &#123;&#123;form.hidden_tag()&#125;&#125; &lt;p&gt; Please enter your OpenID:&lt;br&gt; &#123;&#123;form.name(size=80)&#125;&#125;&lt;br&gt; &#123;% for error in form.errors.name %&#125; &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt; &#123;% endfor %&#125;&lt;br&gt; &lt;/p&gt; &lt;p&gt; Password:&lt;br&gt; &#123;&#123;form.pawword&#125;&#125;&lt;br&gt; &#123;% for error in form.errors.password %&#125; &lt;span style="color: red;"&gt;[&#123;&#123; error &#125;&#125;]&lt;/span&gt; &#123;% endfor %&#125;&lt;br&gt; &lt;/p&gt; &lt;p&gt;&#123;&#123;form.remember_me&#125;&#125; Remember Me&lt;/p&gt; &lt;p&gt;&lt;input type="submit" value="Sign In"&gt;&lt;/p&gt;&lt;/form&gt;&#123;% endblock %&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于flask的microBlog开发笔记（一）]]></title>
    <url>%2F2017%2F01%2F09%2Fmicroblog-develop-documentation-01%2F</url>
    <content type="text"><![CDATA[项目地址： https://coding.net/u/bwael/p/micblog/git 1. 开发环境 在linux系统开发 开发语言python,使用框架flask 使用Mysql数据库,初期使用sqlite方便开发 2. 环境配置1. flask的安装 创建一个全新的实验环境，则安装python虚拟软件管理包virtualenv来创建python的独立环境,先更新软件包,在安装pip和虚拟环境virtualenv： $ sudo pacman -Syy $ sudo pacman -S python-pip python-virtualenv 创建虚拟环境,先创建一个虚拟环境flask，在激活环境， $ virtualenv flask $ cd flask $ source bin/activate 123 $ pip install flask flask-login flask-openid flask-mail splalchemy flask-sqlalchemy sqlalchemy-migrate flask-whooshalchemy flask-wtf pytz flask-babel flup 2. 体验flask 在home/bwael目录下 123$ mkdir -p micblog/app$ mkdir -p micblog/app/static $ mkdir -p micblog/app/templates tips:我们的应用程序包是放置在app文件夹中，子文件夹static用来放置静态文件，子文件夹templates是存放模板文件类的html文件。 接下来进入到app文件夹中，并创建init.py和views.py 123$ cd micblog/app$ touch __init__.py$ touch views.py 对app包通过命令vi_init_.py进行简单的初始化，在init.py中写 123from flask import Flaskapp = Flask(__name__)from app import views 上面的代码简单的创建应用对象，接着从app中导入视图模块views文件内容，视图是响应来自网页浏览器的请求的处理器，在flask中视图以python函数形式表示。 编写视图函数(app/views.py)12345from app import app@app.route('/')@app.route('/index')def index(): return "Hello!!" 完整的web应用程序最后一步建一个脚本rnu.py，用于启动应用程序的开发web服务器，将其置于micblog目录下。 micblog/run.py 123 from app import app app.run(debug = True,port=8888)​` 启动运行后在客户端的浏览器中输入http://127.0.0.1:8888,在网页中会显示hello!字符串。 ###3. flask模板 模板中的控制语句，在模板中添加一个if声明(app/templates/index.html)​123456789101112&lt;html&gt; &lt;head&gt; &#123;% if title %&#125; &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt; &#123;% else %&#125; &lt;title&gt;Welcome to microblog&lt;/title&gt; &#123;% endif %&#125; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; 模板中的循环语句，在microblog应用程序中，登陆的用户在首页想要展示自己或者联系人列表中用户最近的文章，我们首先创建一些用户以及他们的文章来展示(app/views.py) 12345678910111213141516def index(): user = &#123; 'nickname': 'Miguel' &#125; # 用户名 posts = [ # 提交内容 &#123; 'author': &#123; 'nickname': 'John' &#125;, 'body': 'Beautiful day in Portland!' &#125;, &#123; 'author': &#123; 'nickname': 'Susan' &#125;, 'body': 'The Avengers movie was so cool!' &#125; ] return render_template("index.html", title = 'Home', user = user, posts = posts) 在模板中，列表中可能有许多元素，有多少篇文章被展示取决于视图函数，模板不会假设有多少文章，所以必须准备渲染视图传送的文章数量，使用for来做到这一点(app/templates/index.html) 123456789101112131415&lt;html&gt; &lt;head&gt; &#123;% if title %&#125; &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt; &#123;% else %&#125; &lt;title&gt;microblog&lt;/title&gt; &#123;% endif %&#125; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt; &#123;% for post in posts %&#125; &lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt; &#123;% endfor %&#125; &lt;/body&gt; &lt;/html&gt; 在模板继承中，允许我们把所有模板公共的部分移除出页面的布局，接着把它们放在一个基础模板中，所有使用它的模板可以导入该基础模板。定义一个基础模板，该模板包含导航栏以及标题(app/templates/base.html) 1234567891011121314&lt;html&gt; &lt;head&gt; &#123;% if title %&#125; &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog&lt;/title&gt; &#123;% else %&#125; &lt;title&gt;microblog&lt;/title&gt; &#123;% endif %&#125; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Microblog: &lt;a href="/index"&gt;Home&lt;/a&gt;&lt;/div&gt; &lt;hr&gt; &#123;% block content %&#125;&#123;% endblock %&#125; &lt;/body&gt;&lt;/html&gt; 在这个模板中使用block控制语句来定义派生模板可以插入的地方，块被赋予唯一的名字。接着就是修改index.html模板继承自base.html(app/templates/index.html) 1234567&#123;% extends "base.html" %&#125;&#123;% block content %&#125;&lt;h1&gt;Hi, &#123;&#123; user.nickname &#125;&#125;!&lt;/h1&gt;&#123;% for post in posts %&#125;&lt;div&gt;&lt;p&gt;&#123;&#123; post.author.nickname &#125;&#125; says: &lt;b&gt;&#123;&#123; post.body &#125;&#125;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125;&#123;% endblock %&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络笔记01]]></title>
    <url>%2F2016%2F09%2F03%2FC-Network-1%2F</url>
    <content type="text"><![CDATA[概念计算机网络是通过通信设施将地理上分散的具有自治功能的多个计算机系统互联起来，进行信息交换，实现资源共享、互操作和协同工作的系统。简明的定义：自治的计算机的互联集合。 OSI参考模型与TCP/IP参考模型OSI七层网络模型 应用层（Application 表示层（Presentation 会话层（Session 传输层（Transport 网络层（Network 数据链路层（Data Link 物理层（Physical TCP/IP四层概念模型 应用层（对应 应用层、表示层、会话层 传输层（对应 传输层 网络层（对应 网络层 网络接口层（对应 数据链路层、物理层 OSI模型描述计算机网络通信中数据传输的过程 封装：在发送方，数据从上到下逐层传递过程中，每层要加上适当的控制信息。 传输：到最底层，数据成为二进制比特流，再转换为电信号通过物理介质传输到接收方。 拆封：在接收方，数据从下到上，要逐层剥去发送方相应层加上的控制信息。 传输效率的计算 长度为100字节的应用层数据交给运输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部18字节。试求数据的传输效率。若应用层数据长度为1000字节，数据的传输效率是多少？ 答：数据长度为100字节时传输效率=100/（100+20+20+18）=63.3% 数据长度为1000字节时，传输效率=1000/（1000+20+20+18）=94.5% 计算机网络的分类 （1）从网络结点分布范围来看，可分为局域网（Local Area Network，LAN）、广域网（Wide Area Network，WAN）和城域网（Metropolitan Area Network，MAN）。以及个人区域网（Personal Area Network，PAN） （2）按交换方式可分为电路交换网络（Circurt Switching）、报文交换网络（Message Switching）和分组交换网络（Packet Switching）。 （3）按网络拓扑结构可分为星型网络、树型网络、总线型网络、环型网络和网状网络（不规则型网络）。 （4）按传输介质可以分为有线网络和无线网络。 计算机网络相关性能指标传输速率每秒钟通过信道传输的信息量称为比特传输速率，记作rb。单位是比特/秒（b/s或bit/s），简称比特率。也可写为bps(bit per second) 带宽原指某个信号具有的频带宽度。带宽也表示通信线路所能传送数据的能力。即在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。又是b/s。 传播速率MDZZ 传输时延发送数据帧所需要的时间。发送时延 = 数据帧长度（b）/ 发送速率（b/s） 发送时延==传输时延传播时延电磁波在信道中传播一定距离需要花费的时间。传播时延 = 信道长度（m） / 电磁波在信道上的传输速率（m/s)]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记08----文件操作]]></title>
    <url>%2F2016%2F06%2F04%2Fpynote08%2F</url>
    <content type="text"><![CDATA[简介文本文件的读写主要通过open()所构建的文件对象来实现。 基本格式 f = open(文件名，模式) 最常用的模式有： “r” # 只读 “w” # 写入 —-&gt;如果文件中已经有内容，会把内容抹掉，如果不存在该文件，会新建文件 “a” #追加模式 —–&gt;在已有的文字后添加文字 “b” #二进制模式（还在其他模式中追加使用）—–&gt;一般在处理音频、图像等文件的时候使用 “+” #读/写模式(可在其他模式中追加使用) —–&gt;r+、w+ 可读可写 1234567891011121314f = open('test1.txt', 'w') #创建一个名为f的类文件对象，对test1.txt进行写操作f.write("大家好，我是王尼玛") #像文件中写入字符串f.close()f = open('test1.txt') #如果不写模式，默认为读模式while True: line = f.readline() #一次读一行 if len(line) == 0: break print (line,end="") #不换行f.close() 输出 1大家好，我是王尼玛 123456789101112f=open("test.txt","w")f.write("0123456789")f.seek(4) #跳到第4个字节f.write("Hello")f.close()f=open("test.txt","r")print(f.read()) #把字符串全部输出f.seek(2) #跳回到第2个字符print(f.read(5)) #输出接下来的5个字节f.close() 输出 120123Hello923Hel Tips：1.以上所讲的仅仅是Python最基本的文件读写功能。更加丰富的文件读写功能由Python的标准库提供。2.read() readline()以及readlines()用法read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。然而 .read() 生成文件内容最直接的字符串表示，但对于连续的面向行的处理，它却是不必要的，并且如果文件大于可用内存，则不可能实现这种处理。 .readline() 和 .readlines() 非常相似。它们都在类似于以下的结构中使用：123fh = open('c:\\autoexec.bat')for line in fh.readlines(): print（line） .readline() 和 .readlines() 之间的差异是后者一次读取整个文件，象 .read() 一样。.readlines() 自动将文件内容分析成一个行的列表，该列表可以由 Python 的for … in …结构进行处理。另一方面，.readline() 每次只读取一行，通常比 .readlines() 慢得多。仅当没有足够内存可以一次读取整个文件时，才应该使用 .readline()。（readlines()的输出格式[“I’ll write this message for you\n”, “hehe,that’s will be ok.\n”]）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记07----面向对象（类与对象）]]></title>
    <url>%2F2016%2F06%2F02%2Fpynote07%2F</url>
    <content type="text"><![CDATA[简介虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。 类是对现实世界中一些事物的封装。在人类认知中，会根据属性相近把东西归类，并且给类别命名。比如说，鸟类的共同属性是有羽毛，通过产卵生育后代。而且，这些鸟还有共同的行为，如飞行、名叫。任何一只特别的鸟都在鸟类的原型基础上的。接下来以鸟为例来介绍类的用法。 123456789101112class Bird: #创建类--鸟 have_feather = True #定义类的属性（have_feather、way_of_reproduction、song均是该类的属性） way_of_reproduction = "egg" song="叽叽喳喳" def sing(self): #定义类的方法（self必不可少） print(self.song) def move(self): print("飞飞飞飞飞")mybird=Bird() #实例化类的对象，可以使用这个对象访问类中的方法和属性mybird.sing() #访问类中的方法（对象名.方法）print("mybird通过"+mybird.way_of_reproduction+"繁殖") #访问类中的属性（+号的作用是连接字符串） 输出结果为： 123叽叽喳喳mybird通过egg繁殖 小小的总结一下，我们定义了一个类（class），就是鸟（Bird）。在该类中，我们定义了三个变量，一个是有羽毛（have_feather），一个是生殖方式（way_of_reproduction）,还有一个是叫声（叽叽喳喳），这几个变量就是类的属性（attribute）。我们还定义个两个函数，一个是鸣叫(sing(self))，另一个是移动(move(self)),这两个函数就是类的方法（method）。 类建好了之后，我将类实例化为一个叫mybird的对象，并利用这个对象对类的属性和方法进行访问。 子类鸟可以继续细分为鸡、鸭、鹅…..这就是所谓的子类。123456789101112class Chicken(Bird): #继承上例中的Bird song="喔喔喔喔喔！" #重写父类中的属性 def move(self): #重写父类中的方法 print("这种移动方式已经废弃",end="---&gt;") #end的作用是把字符串末尾的换行符替换为“---&gt;” super().move() #调用父类中的方法(对象是没有super()的) print("跑跑跑跑跑")myChicken=Chicken()myChicken.move()myChicken.sing() 多重继承12345678910111213class Calculator: def calculate(self,expression): self.value=eval(expression) #计算字符串中的表达式class Talker: def talk(self): print("结果为",self.value)class TalkCalculator(Calculator,Talker): #本类不做任何事情，但是同时继承两个子类，这种行为叫做多重继承 pass #pass是空语句，是为了保持程序结构的完整性。myCal=TalkCalculator()myCal.calculate("4+2")myCal.talk() Tips1.多态、封装与继承多态：意味着可以对不同类的对象进行相同的操作。 封装：对外部世界隐藏类的细节。 继承：以普通的类为基础建立专门的类的对象。 2.面向对象概念类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。 方法重载：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。 实例变量：定义在方法中的变量，只作用于当前实例的类。 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。 实例化：创建一个类的实例，类的具体对象。 方法：类中定义的函数。 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。 3.子类如何调用父类中的方法123456class B(A):def method(self, arg):# A.method(self,arg) #1直接写类名调用# super(B, self).method(arg) #2用 super(type, obj).method(arg)方法调用 super().method(arg) #3在类定义中调用本类的父类方法，可以直接super().method(arg) 4.方法中的self类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。这个特别的变量指对象本身，按照惯例它的名称是self。 面向对象之续特殊的方法init方法init方法在类的一个对象被建立时，马上运行。你可以利用这个方法对对象进行初始化。init方法类似于C++、C#和Java中的 constructor 。（注意：init的两边各有两条下划线）12345678class Person: def __init__(self, name): #在__init__中初始化name self.name = name def sayHi(self): print ("大家好，我是人贱人爱的", self.name)p = Person("王尼玛")p.sayHi() del方法del在对象消逝的时候被调用。对象消逝即对象不再被使用，它所占用的内存将返回给系统作它用。del方法与 destructor 的概念类似。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Person: '''Represents a person.''' #通过Person.__doc__查看 population = 0 def __init__(self, name): '''Initializes the person's data.''' self.name = name print ('(Initializing %s)' % self.name) #格式化输出字符串. # When this person is created, he/she # adds to the population Person.population += 1 #类的变量在引用的时候是 类名.类变量 def __del__(self): '''I am dying.''' print ('%s says bye.' % self.name) Person.population -= 1 if Person.population == 0: print ('I am the last one.') else: print ('There are still %d people left.' % Person.population) def sayHi(self): #可通过Person.sayHi.__doc__查看 '''Greeting by the person. Really, that's all it does.''' print ('Hi, my name is %s.' % self.name) def howMany(self): '''Prints the current population.''' if Person.population == 1: print ('I am the only person here.') else: print ('We have %d persons here.' % Person.population)swaroop = Person('Swaroop')swaroop.sayHi()swaroop.howMany()kalam = Person('Abdul Kalam')kalam.sayHi()kalam.howMany()print(kalam.name) #对象变量swaroop.sayHi()swaroop.howMany()print(swaroop.name) 输出：1234567891011(Initializing Swaroop)Hi, my name is Swaroop.I am the only person here.(Initializing Abdul Kalam)Hi, my name is Abdul Kalam.We have 2 persons here.Abdul KalamHi, my name is Swaroop.We have 2 persons here.Swaroop 小提示1.类成员的访问权限 Python中所有的类成员都是公共的，所有的方法都是有效的。只有一个例外：如果你使用的数据成员名称以双下划线前缀比如__privatevar，Python的名称管理体系会有效地把它作为私有变量。还有这样就有一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。而其他的名称都将作为公共的，可以被其他类/对象使用。记住这只是一个惯例，并不是Python所要求的（与双下划线前缀不同）。 2.类的变量与对象的变量 类的变量：由一个类的所有对象（实例）共享使用。当某个对象对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。（ 类名.类变量）对象的变量：由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不是共享的，在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。（对象名.变量） 3.print的格式化输出 支持参数格式化，与C语言的printf类似。123&gt;&gt;&gt; strHello = "the length of (%s) is %d" %('Hello World',len('Hello World'))&gt;&gt;&gt; print (strHello) 输出1the length of (Hello World) is 11 12&gt;&gt;&gt; print("你好我的名字是%s,我今年%d岁了！" % ("王尼玛",2)) #注意，字符串与后面变量之间没有逗号！ 输出1你好我的名字是王尼玛,我今年2岁了！]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记06----模块]]></title>
    <url>%2F2016%2F06%2F01%2Fpynote06%2F</url>
    <content type="text"><![CDATA[简介如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？答案是使用模块。模块是一个包含了所有你定义的函数和变量以.py结尾的文件。 定义并载入模块首先来学习如何使用模块。我在c:\test存放一个文件：Hello.py。存放的代码是：1print("Hello") 接着我们执行下面代码1234import sys #import的作用是导入模块，这里我们导入了sys模块sys.path.append("c:\\test") #这条语句的作用是告诉解释器从哪里寻找模块。 路径还可以这样写sys.path.append("c:/test")import Hello #这时我们就可以导入自己的模块Hello(模块名为文件名) 输出结果1Hello 这是可以在c:/test文件夹下看到多了一个新的文件夹pycache，在这个文件夹中出现了文件Hello.cpython-34.pyc。这个文件是与平台无关，且已经经过编译处理的。 包含函数的模块我在c:\test存放一个文件：sayHello.py。存放的代码是：12345def say(): print("hello");def cry() print("55555555") 我们执行下面的代码：123456import syssys.path.append("c:\\test") #如果被导入的模块与输入他的程序在同一个目录中，则不需要sys.path.append了import sayHellosayHello.say() #导入模块之后可以调用模块中的函数，但是需要以 模块名.函数 的格式sayHello.cry() 得到 hello，另一种方式是直接导入模块里的函数123456import syssys.path.append("c:\\test")from sayHello import say ,cry #直接导入模块中具体的函数，缺点是如果想使用模块中的其他函数，需要追加导入say() #可以直接使用函数cry() 模块的属性name属性 如果模块是被导入，name的值为模块名字(文件名) 如果模块是被直接执行，name的值为’main’ 12345def say(): print("hello");if __name__ == '__main__': #每个Python模块都有它的__name__，如果它是'__main__'，则输出“你好” print("你好") 输出你好 以模块的形式被调用，则什么都不会输出 应用当我们编写Python库模块的时候，我们往往运行一些测试语句。当这个程序作为库被import的时候，我们并不需要运行这些测试语句。一种解决方法是在import之前，将模块中的测试语句注释掉。而更优美的解决方法，就是使用name。 下面是一个简单的库程序TestLib.py。当直接运行TestLib.py时，name为”main“。如果被import的话，name为”TestLib”。12345678910def lib_func(a): return a + 10def lib_func_another(b): return b + 20if __name__ == '__main__': test = 101 print(lib_func(test)) doc属性介绍模块的功能 123&gt;&gt;&gt; math.__doc__'This module is always available. It provides access to the\nmathematical functions defined by the C standard.' 模块包可以将功能相似的模块放在同一个文件夹（比如说this_dir）中，构成一个模块包。通过1import this_dir.module #引入this_dir文件夹中的module模块. 该文件夹中必须包含一个init.py的文件，提醒Python，该文件夹为一个模块包。init.py可以是一个空文件。 Tips在编译器中可以通过dir()函数来查看模块中的属性和函数。 1234&gt;&gt;&gt; import math&gt;&gt;&gt; dir(math)['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记05----函数]]></title>
    <url>%2F2016%2F05%2F01%2Fpynote05%2F</url>
    <content type="text"><![CDATA[函数的定义和调用函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对圆括号。圆括号之中可以包括一些变量名，该行以冒号结尾。接下来是一块语句，它们是函数体。 123def sayHi(): #无参函数的定义，且没有返回值。函数将自动返回None。None是Python中的一个特别的数据类型，用来表示什么都没有，相当于C中的NULL。 print("你好我是王尼玛") #注意缩进 sayHi() #函数调用 输出为：12&gt;&gt;&gt; 你好我是王尼玛 1234def squareSum(a,b): #带形参的函数定义（a,b即为形参） c = a**2 + b**2 #a**2表示a的平方 return c #将c的值返回，与java不同的是，Python可以返回多个值，且以元组的形式返回 print(squareSum(3,2)) #函数调用，将数值3，2带入函数 输出为：113 带默认形参的函数我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。比如“def say(message, times = 1):”是正确的而“def say(times=1,message):”是错误的！12345def say(message, times = 1): print ((message+" ") * times) #字符串可以通过+号连接 say('Hello') say('World', 3) 输出结果12Hello World World World 关键参数赋值再调用函数的时候，我们可以直接通过形参名给形参赋值123456def func(a, b=2, c=3): print ("a、b、c的值分别为",a,b,c) func(1,3) func(1, c=24) func(c=50, a=100) 输出123a、b、c的值分别为 1 3 3 a、b、c的值分别为 1 2 24 a、b、c的值分别为 100 2 50 文档字符串❤在函数的第一个逻辑行的字符串是这个函数的 文档字符串 。注意，DocStrings也适用于模块和类（虽然还没学到那…..委屈）。文档字符串主要用于给函数示意。12345678def sayHi(): """ 这个函数的作用是王尼玛勾搭妹子问候语""" #只能通过三引号的行出，用井号不行 """本条语句也是不能作为函数字符串的！""" print("你好我是王尼玛") sayHi() print(sayHi.__doc__) #函数名后不需要括号，doc两边的是双下划线 help(sayHi) #内置的help函数其实就是读取的doc 输出123456你好我是王尼玛 这个函数的作用是王尼玛勾搭妹子问候语 Help on function sayHi in module __main__: sayHi() 这个函数的作用是王尼玛勾搭妹子问候语 局部变量定义在函数内部的变量叫做局部变量，不管局部变量的值在函数内部如何变化，都不会影响到函数外的同名变量。即变量名称对于函数来说是局部 的。这称为变量的作用域 。所有变量的作用域是它们被定义时所在的块。 12345678a = 1 def changeNum(a): #整数变量传递给函数，函数对它进行操作，但原整数变量a不发生变化。 a = a + 1 return a print ("函数返回值为",changeNum(a)) print ("a的值为",a) 输出结果：12函数返回值为 2 a的值为 1 4.使用global语句如果你想要在函数外为一个定义在函数内的变量赋值，那么你就得通过global语句告诉Python这个变量名不是局部的，而是全局的。12345678910def func(): global x print ("函数中x的值为",x) x = 2 return x x = 50 #在函数外为一个定义在函数内的变量赋值 print ('x的值为', x) print("函数返回值为",func()) 输出结果 123x的值为 50 函数中x的值为 50 函数返回值为 2 lambda函数lambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：1234567def f(x): return x**2 print (f(4)) #Python中使用lambda的话，写成这样 g = lambda x : x**2 print (g(4)) lambda生成一个函数对象。该函数参数为x,，返回值为x的平方。函数对象赋给g。g的调用与正常函数无异。 函数作为参数传递函数可以作为一个对象，进行参数传递。函数名(比如func)即该对象。比如说:12345678def f(x): return x**2 def test(fx, a): #将函数作为参数传递 print ('%d的平方为' % a,end="") print (fx(a)) test(f, 4) 上面的程序可以改写为12345def test(fx, a): print ('%d的平方为' % a,end="") print (fx(a)) test(lambda x:x**2, 4) map()函数map函数的定义： map(function, sequence[, sequence, …]) -&gt; list通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。map()将每次从两个表中分别取出一个元素，带入lambda所定义的函数。1print(list(map(lambda x: x ** 2, (1, 2, 3, 4, 5)))) 输出1[1, 4, 9, 16, 25] 1print(list(map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]))) 输出1[3, 7, 11, 15, 19] filter()函数filter函数的第一个参数也是一个函数对象。它也是将作为参数的函数对象作用于多个元素。如果函数对象返回的是True，则该次的元素被储存于返回的表中。filter通过读入的函数来筛选数据。同样，在Python 3.X中，filter返回的不是表，而是循环对象。1234567def func(a): if a &gt; 100: return True else: return False print (list(filter(func,[10,56,101,500]))) 小提示： 指针传递使函数可以改变函数外的值！ 对于基本数据类型的变量，变量传递给函数后，函数会在内存中复制一个新的变量，从而不影响原来的变量。（我们称此为值传递） 但是对于列表来说，列表传递给函数的是一个指针，指针指向序列在内存中的位置，在函数中对表的操作将在原有内存中进行，从而影响原有变量。 （我们称此为指针传递） 12345678b = [1,2,3] def changeList(b): #我们将一个表传递给函数，函数进行操作，原来的表b发生变化。 b[0] = b[0] + 1 return b print ("函数返回值为",changeList(b)) print ("b的值为",b) 输出结果：12函数返回值为 [2, 2, 3] b的值为 [2, 2, 3] Python可以返回多个值，以元组的形式返回 1234567def idSave(): a=input("姓名为：") b=input("年龄为：") c=input("性别为：") return a,b,c print(idSave()) 输出结果：1234姓名为：王尼玛 年龄为：12 性别为：女 ('王尼玛', '12', '女') 带有默认值的形参 我们可在定义形参的时候直接给参数加一个默认值。值得注意的是带有默认值的形参要放在右边。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记04----控制语句]]></title>
    <url>%2F2016%2F04%2F22%2Fpynote04%2F</url>
    <content type="text"><![CDATA[1.ifif主要用于条件判断。 1.1 if结构12345i = 1 x = 1 if i &gt; 0: #注意后面的冒号必不可少！ x = x+1 #必须输入四个空格的缩进表示隶属关系！ print x 1.2 if-elif-else 结构123456789101112&lt;pre name="code" class="python"&gt;a = input("a:") #这条语句的作用是在屏幕显示“a:”,并等待用户输值赋给a。 b = input("b:") if(a &gt; b): print (a, " 大于 ", b) print("显示1") elif(a==b): #elif类似java中的else if，但要注意在末尾的冒号！ print(a,"等于",b) print("显示2") else: #注意末尾的冒号！ print(a,"小于",b) print("显示3") print("显示4") 这里有三个块，分别属于if, elif, else引领。Python检测条件，如果发现if的条件为假，那么跳过后面紧跟的块，检测下一个elif的条件； 如果还是假，那么执行else块。通过上面的结构将程序分出三个分支。程序根据条件，只执行三个分支中的一个。 1.3 if的嵌套使用123456789a = input("a:") b = input("b:") c = input("c:") if(a &gt; b): print (a,"大于",b) if(a&gt;c): #注意这里的的if需要缩进，因为该if隶属于if（a&gt;b） print(a,"大于",c) else: print(a,"小于",c) #注意这里的if应该与if(a&gt;c)缩进相同 2.while给出一个while循环终止条件。 下例循环打印1到100123456a=0 while a&lt;100: a+=1 #Python没有i++的写法 print(a） else: print("循环结束") 3.forfor循环需要预先设定好循环的次数(n)，然后执行隶属于for的语句n次。12345student2=["王尼玛","男",22,["脑袋大","脖子短","屁股圆"]] for a in student2: #循环次数为列表student2中元素的个数。 注意末尾的引号 print(a) #循环结构同样需要缩进 因为迭代（也就是循环）某范围的数字非常常见，所以有个内建的范围函数提供使用——range() 12list(range(10)) #建立一个从0到9的列表(range()生成的是iterator对象。list()的作用是转换成列表) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 我们可以这样使用range()函数 12for a in range(1,101): #对while中的事例进行改造，打印1到100的数字 print(a) 12list(range(1,100,3)) #生成从1到100间的数，步长为3 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97] 12list(range(99,1,-3)) #1到100间的数字，逆向排列 [99, 96, 93, 90, 87, 84, 81, 78, 75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3] 轻量级循环 12[x*x for x in range(10)] #生成一个简单的 0, 1, 4, 9, 16, 25, 36, 49, 64, 81] enumerate()函数 利用enumerate()函数，可以在每次循环中同时得到下标和元素：12345S = 'abcdefghijk' for (index,char) in enumerate(S): print(index) print(char) zip() 如果你多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现：12345ta = [1,2,3] tb = [9,8,7] tc = ['a','b','c'] for (a,b,c) in zip(ta,tb,tc): print(a,b,c) 输出1231 9 a 2 8 b 3 7 c 123a=["lucy","lily","tom"] b=[11,12,13] print(list(zip(a,b))) 输出1[('lucy', 11), ('lily', 12), ('tom', 13)] 4.中断循环break——跳出循环continue——跳出本次命令的之行，继续下一次循环 123456nameList=["王二小","王小明","小红","小刚","寒梅梅","王尼玛","李磊"] for name in nameList: if name=="王尼玛": print("凶手找到啦！") break print(name) 输出为王尼玛123456nameList=["王二小","王小明","小红","小刚","寒梅梅","王尼玛","李磊"] for name in nameList: if name=="王尼玛": print("凶手找到啦！") continue print(name) 输出为李磊 5.注意 1.Python的缩进空白在Python中是重要的。事实上行首的空白是重要的。它称为缩进。在逻辑行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。 这意味着同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。我们将在后面的章节中看到有关块的用处的例子。 你需要记住的一样东西是错误的缩进会引发错误。 2.if格式 12345678if &lt;条件1&gt;: statementelif &lt;条件2&gt;: statementelif &lt;条件3&gt;： statementelse: statement 3.while格式 1234while&lt;条件&gt;: statementelse: statement 4.for格式 for 变量 in &lt;对象集合&gt;： 5.Python与其他语言的不同 Python的while可以写else！]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 64 Bit Installation Guide Acer C720, HP Chromebook 14, Toshiba CB-30, and Dell Chromebook 11]]></title>
    <url>%2F2016%2F04%2F19%2Fwindows-for-chromebook%2F</url>
    <content type="text"><![CDATA[Acer C740, Acer C910, Acer CB5-571, Toshiba Chromebook 2 and Dell Chromebook 13, see here:Click Flash Custom Coreboot BIOSWarning: this BIOS is only for the Acer C720, C720P, HP Chromebook 14, Toshiba CB-30, and Dell Chromebook 11. Please remove the write protect screw before flashing the BIOS. Please check your CPU before flashing the BIOS. Easy Flashing Script:cd ~; curl -L -O https://goo.gl/1hFfO3; sudo bash 1hFfO3 Select the “Install/Update custom coreboot firmware” option. Create USB InstallerUse rufus to create the Windows 10 64 bit USB installer. Select MBR for legacy BIOS and create the USB drive. You will need a USB keyboard/mouse for installation Install Chipset, Audio, WiFi, and Bluetooth DriversAudio Driver: Link Chipset Driver: Use the latest from Windows Update! WiFi Driver: Use the latest from Windows Update! Bluetooth Driver: Use the latest from Windows Update! Run the setup files for the audio and chipset drivers. For WiFi and Bluetooth, use Device Manager to update the driver. Turn on testsigningOpen Command Prompt as administrator, and type in “bcdedit /set testsigning on”. Then reboot. Keyboard DriverDownload: Link Open Device Manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_GGL&amp;DEV_0303” or “ACPI\GGL0303”. Under the driver tab, click “Update Driver” and browse to the croskeyboard3 driver. Then install. Trackpad Driver (Cypress Trackpad)Download: Link Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_CYAP&amp;DEV_0000” or “ACPI\CYAP0000”. Under the driver tab, click “Update Driver” and browse to the crostrackpad3 driver. Then install. Trackpad Driver (Elan Trackpad)Download: Link Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_ELAN&amp;DEV_0000” or “ACPI\ELAN0000”. Under the driver tab, click “Update Driver” and browse to the crostrackpad3 driver. Then install. Visual Studio 2015 Redistributable:Download: Link Trackpad Driver Helper Utilities (Cypress and Elan Trackpads)Download: Link Place the trackpad driver utility in the Windows startup folder (Start &gt; Run &gt; shell:startup) and run it after installing the driver. Touch Screen Driver (Acer C720P users only)Download: Link Open Device manager and search for an unknown device that has a Hardware ID of either “ACPI\VEN_ATML&amp;DEV_0001” or “ACPI\ATML0001”. Under the driver tab, click “Update Driver” and browse to the crostouchscreen2 driver. Then install. Graphics DriverGrab the latest Graphics Driver from Windows Update! Embedded Controller Driver + Utility (Optional)Download: Link Visual Studio 2013 Redistributable: Download If you like running Windows on your chromebook, please donate if you are able to do so. I have made these drivers and the BIOS available free of charge and am relying on donations to be able to get Windows running on more chromebooks (Pixel 2, Dell Chromebook 13).For support, please see https://reddit.com/r/chrultrabookPlease donate here. from : reddit.com chrultrabook]]></content>
      <categories>
        <category>折腾笔记</category>
      </categories>
      <tags>
        <tag>折腾笔记</tag>
        <tag>Linux</tag>
        <tag>Chromebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Professional English Key Words Chapter-1]]></title>
    <url>%2F2016%2F04%2F12%2FProE-key-terms-chapter-one%2F</url>
    <content type="text"><![CDATA[application softwareAlso referred to as apps. Software that can perform useful work, such as word processing, cost estimating, or accounting tasks. The user primarily interacts with application software. Blu-rayA type of high-definition disc with a capacity of 25 to 50 gigabytes. cloud computingData stored at a server on the Internet and available anywhere the Internet can be accessed. communication deviceComputer systems that communicate with other computer systems using modems. For example, it modifies computer output into a form that can be transmitted across standard telephone lines. compact disc (CD)Widely used optical disc format. It holds 650 MB (megabytes) to 1 GB (gigabyte) of data on one side of the CD. computer competencyBecoming proficient in computer-related skills. connectivityCapability of the microcomputer to use information from the world beyond one’s desk. Data and information can be sent over telephone or cable lines and through the air so that computers can talk to each other and share information. dataRaw, unprocessed facts that are input to a computer system that will give compiled information when the computer processes those facts. Data is also defined as facts or observations about people, places, things, and events. database fileFile containing highly structured and organized data created by database management programs. desktop computerComputer small enough to fit on top of or along the side of a desk and yet too big to carry around. device driverEvery device that is connected to the computer has a special program associated with it called a device driver that allows communication between the operating system and the device. DVD (digital versatile disc or digital video disc)Similar to CD-ROMs except that more data can be packed into the same amount of space. DVD drives can store a typical capacity of 4.7 GB on one side. document fileFile created by a word processor to save documents such as letters, research papers, and memos. end userPerson who uses microcomputers or has access to larger computers. flash memory cardA solid-state storage device widely used in notebook computers. Flash memory also is used in a variety of specialized input devices to capture and transfer data to desktop computers. general-purpose applicationApplication used for doing common tasks, such as browsers and word processors, spreadsheets, databases, management systems, and presentation graphics. Also known as productivity applications. handheld computerSee personal digital assistant (PDA). hard diskEnclosed disk drive containing one or more metallic disks. Hard disks use magnetic charges to record data and have large storage capacities and fast retrieval times. hardwareEquipment that includes a keyboard, monitor, printer, the computer itself, and other devices that are controlled by software programming. informationData that has been processed by a computer system. information systemCollection of hardware, software, people, data, and procedures that work together to provide information essential to running an organization. information technology (IT)Computer and communication technologies, such as communication links to the Internet, that provide help and understanding to the end user. input devicePiece of equipment that translates data into a form a computer can process. The most common input devices are the keyboard and the mouse. InternetA huge computer network available to everyone with a microcomputer and a means to connect to it. It is the actual physical network made up of wires, cables, and satellites as opposed to the Web, which is the multimedia interface to resources available on the Internet. keyboardInput device that looks like a typewriter keyboard but has additional keys. laptop computerSee notebook computer and notebook system unit. mainframe computerThis computer can process several million program instructions per second. Sizeable organizations rely on these room-size systems to handle large programs and a great deal of data. memoryMemory is contained on chips connected to the system board and is a holding area for data instructions and information (processed data waiting to be output to secondary storage). RAM, ROM, and CMOS are three types of memory chips. microcomputerSmall, low-cost computer designed for individual users. These include desktop, notebook, and personal digital assistant computers. microprocessorThe central processing unit (CPU) of a microcomputer controls and manipulates data to produce information. The microprocessor is contained on a single integrated circuit chip and is the brains of the system. midrange computerAlso known as a minicomputer. mobile app (application)Add-on features for a variety of mobile devices, including smartphones, netbooks, and tablets. modemShort for modulator-demodulator. It is a communication device that translates the electronic signals from a computer into electronic signals that can travel over telephone lines. monitorOutput device like a television screen that displays data processed by the computer. mouseDevice that typically rolls on the desktop and directs the cursor on the display screen. networkThe arrangement in which various communications channels are connected through two or more computers. The largest network in the world is the Internet. notebook computerPortable computer, also known as a laptop computer, weighing between 4 and 10 pounds. operating system (OS)Software that interacts between application software and the computer, handling such details as running programs, storing and processing data, and coordinating all computer resources, including attached peripheral devices. It is the most important program on the computer. Windows 7, Windows Vista, and Mac OS X are examples of operating systems. optical discStorage device that can hold over 17 gigabytes of data, which is an equivalent of several million typewritten pages. Lasers are used to record and read data on the disc. The two basic types of optical discs are compact discs (CDs) and digital versatile or video discs (DVDs). output deviceEquipment that translates processed information from the central processing unit into a form that can be understood by humans. The most common output devices are monitors and printers. peopleEnd users who use computers to make themselves more productive. personal digital assistant (PDA)A device that typically combines pen input, writing recognition, personal organizational tools, and communication capabilities in a very small package. Also called handheld PC and palm computer. presentation fileA file created by presentation graphics programs to save presentation materials. For example, a file might contain audience handouts, speaker notes, and electronic slides. printerDevice that produces printed paper output. proceduresRules or guidelines to follow when using hardware, software, and data. programInstructions for the computer to follow to process data. See software. random-access memory (RAM)Volatile, temporary storage that holds the program and data the CPU is presently processing. It is called temporary storage because its contents will be lost if electrical power to the computer is disrupted or the computer is turned off. secondary storagePermanent storage used to preserve programs and data that can be retained after the computer is turned off. These devices include floppy disks, hard disks, magnetic tape, CDs, DVDs, and more. serverA host computer with a connection to the Internet that stores document files used to display web pages. Depending on the resources shared, it may be called a file server, printer server, communication server, web server, or database server. smartphoneA type of cell phone that offers a variety of advanced functionality, including Internet and e-mail. softwareComputer program consisting of step-by-step instructions, directing the computer on each task it will perform. solid-state drive (SSD)Designed to be connected inside a microcomputer system the same way an internal hard disk would be, but contains solid-state memory instead of magnetic disks to store data. solid-state storageA secondary storage device that has no moving parts. Data is stored and retrieved electronically directly from these devices, much as they would be from conventional computer memory. specialized applicationPrograms that are narrowly focused on specific disciplines and occupations. Some of the best known are multimedia, Web authoring, graphics, virtual reality, and artificial intelligence. supercomputerFastest calculating device ever invented, processing billions of program instructions per second. Used by very large organizations like NASA. system software“Background” software that enables the application software to interact with the computer. System software consists of the operating system, utilities, device drivers, and language translators. It works with application software to handle the majority of technical details. system unitPart of a microcomputer that contains the CPU. Also known as the system cabinet or chassis, it is the container that houses most of the electronic components that make up the computer system. tabletA type of microcomputer that contains a thin system unit, most of which is the monitor. The best-known tablets are Apple’s iPad, Motorola’s Zoom, and HP’s Slate. tablet computerA type of notebook computer that accepts handwritten data, using a stylus or pen, that is converted to standard text and can be processed by a word processor program. USB driveThe size of a key chain, these hard drives connect to a computer’s USB port enabling a transfer of files; has a capacity of up to 64GB. utilityPerforms specific tasks related to managing computer resources or files. Norton Utility for virus control and system maintenance is a good example of a utility. Also known as service programs. virusHidden instructions that migrate through networks and operating systems and become embedded in different programs. They may be designed to destroy data or simply to display messages. webIntroduced in 1992 and prior to the web, the Internet was all text. The Web made it possible to provide a multimedia interface that includes graphics, animations, sound, and video. wireless revolutionA revolution that is expected to dramatically affect the way we communicate and use computer technology. worksheet fileCreated by electronic spreadsheets to analyze things like budgets and to predict sales.]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Computing Essential</tag>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arch Linux安装到U盘上de安装教程]]></title>
    <url>%2F2016%2F04%2F03%2Finstall-archlinux-on-usb-storage-device%2F</url>
    <content type="text"><![CDATA[如果只是想单纯的安装Arch Linux请移步Arch Linux安装教程完善的中文Wiki) Arch Linux简介Arch Linux(或称Arch)是一种以轻量简洁为设计理念的Linux发行版。Arch Linux 将简洁定义为：避免任何不必要的添加、修改和复杂增加。它提供的软件都来自原始开发者(上游)，仅进行和发行版(下游)相关的最小修改。Arch向GNU/Linux用户提供了许多新特性，包括systemd初始化系统、现代的文件系统（Ext2/3/4、Reiser、XFS、JFS、BTRFS）、LVM2/EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核（目前是4.4）。 速度不错的国内镜像 基本系统安装关于分区本想使用GPT分区表，查了一些资料，为了使这个U盘在 BIOS 和 UEFI 电脑上都能用，需要创建一个BIOS boot分区，2M大小足够，位置尽量靠前。 多系统的话还要创建一个200M的 EFI System Partition(ESP)分区。但是有大神说GPT中的NTFS分区在Win7下不认（感觉Win8、Win10应该可以） 想用这个分区作为常规U盘使用就不行了，只好再回到MBR分区表。如果是移动硬盘用 GPT 应该没有问题。 所以仍然使用MBR分区，所以就要用fdisk或者cfdisk了，不能使用支持GPT的gdisk和cgdisk，4k对齐也是自动完成。为了在安装过程中能更好认清我的分区，我先在Windows下用DiskGenius进行了分区，只可惜不支持ext4，之后再格式化一下就好。16G的U盘分区规划如下： 第一个分区 5G的ntfs分区，为了这个U盘还能进行一些拷拷文件的工作（非必须，看具体情况来吧) 第二个分区 100M的分区 /boot； 第三个分区 6G的分区，作为ArchLinux根分区； 第四个分区 4G的分区，作为 /home； 先刻录一个U盘启动盘吧开始用ultraISO刻了几次都无法启动（原因是ultraISO不分青红皂白的写了syslinux引导进去），看来Arch真的是与众不同，于是用了烧录树莓派的Win32 Disk Image，成功。同理，在Linux下用dd命令应该也是可以的。启动，进入Arch Linux安装界面，选择合适的版本，直接就进root了！这时可以插上你要安装的U盘。 分区启动U盘是 /dev/sdb，目标U盘就成了 /dev/sdc。下面是在Linux显示的分区，并不是我的优盘，网上找来的,仅供参考：1234567891011121314# fdisk /dev/sdcDisk /dev/sdc: 8022 MB, 8022982656 bytes, 15669888 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x00000000Device Boot Start End Blocks Id System/dev/sdc1 2048 1804287 901120 7 HPFS/NTFS/exFAT/dev/sdc2 * 1804288 2009087 102400 83 Linux/dev/sdc3 2009088 10405887 4198400 83 Linux/dev/sdc4 10405888 15669887 2632000 83 Linux 在root下直接重新格式化为ext41234# mkfs.ntfs -f /dev/sdc1 -L f004-c# mkfs.ext4 -b 4096 -m 0 -i 16384 -O &apos;^has_journal&apos; /dev/sdc2 -L f004-boot# mkfs.ext4 -b 4096 -m 1 -i 16384 -O &apos;^has_journal&apos; /dev/sdc3 -L f004-a# mkfs.ext4 -b 4096 -m 0 -i 16384 -O &apos;^has_journal&apos; /dev/sdc4 -L f004-b -b 4096 是每个存储块的大小。 -m 1 是指定 root 保留空间为 1%，home 区就不留了。 -i 16384 是指定多少字节的数据设置一个 inode 节点， 增加它的值会减少 inode 的总数，占用的空间会少一些， 相应的能够存储的文件数量也减少了，这个稍微注意一下就好，一般都够用。 -O ‘^has_journal’ 是关掉文件系统日志，有点小危险。 挂载分区12345# mount /dev/sdc3 /mnt //没有根什么也挂不上啊# mkdir /mnt/boot# mount /dev/sdc2 /mnt/boot# mkdir /mnt/home# mount /dev/sdc4 /mnt/home 用df -h检查一下123456//显示# ext4Filesystem Size Used Avail Use% Mounted on/dev/sdc3 5.9G 8.1M 6.0G 1% /mnt/dev/sdc2 96M 48K 96M 1% /mnt/dev/sdc4 3.8G 3.8M 3.9G 1% /mnt/home 基本系统安装只讲一些必须的步骤 默认网络连接： dhcpcd（有线连接） 网络连接： 无线连接： 1# wifi-menu ADSL 宽带连接： 12# pppoe-setup #配置# systemctl start adsl #连接 pacman 软件仓库镜像服务器：选择地理位置最为接近的镜像服务器以获得更高的下载速度。pacman优先使用位置靠前的镜像地址。将选定的镜像地址置于最前以便 pacman 使用。注意：该配置不仅会应用到安装环境，也会应用至新系统中。1# nano /etc/pacman.d/mirrorlist 更新本地数据库：1# pacman -Syy 查看中国大陆的镜像服务器：1grep -A 1 &apos;China&apos; /etc/pacman.d/mirrorlist 选择所有的中国大陆的镜像服务器：1# sed -i &apos;/Score/&#123;/China/!&#123;n;s/^/#/&#125;&#125;&apos; /etc/pacman.d/mirrorlist 安装基础系统1# pacstrap -i /mnt base base-devel 提示共141个软件包，需要下载220.37M内容，安装完成后是 710.09M。 需要等待一会，休息一下 生成fstab1fstab： # genfstab -p -U /mnt &gt;&gt; /mnt/etc/fstab 然后更改fstab（系统默认一般就比较好了，不优化也行）。 下面的操作可以在 chroot 环境下运行1# arch-chroot /mnt 设置 hostname1echo &apos;nisuiyi&apos; &gt; /etc/hostname 。 设置时区1# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 新建 /etc/locale.conf 内容为123LANG=&apos;en_US.UTF-8&apos;LC_COLLATE=&apos;C&apos;LC_MESSAGES=&apos;C&apos; 编辑 /etc/locale.gen取消 en_US.UTF-8, zh_CN.UTF-8, zh_TW.UTF-8 前面的注释，然后执行 locale-gen 命令。 更改 root 密码1passwd root 安装 Grub 引导系统仍然在chroot环境中操作。编辑 /etc/mkinitcpio.conf，检查HOOKS段，让 block 参数紧挨着 udev 参数之后（早一点加载），然后1# mkinitcpio -p linux 生成img文件。 使用pacman安装GRUB重要！ GRUBBIOS：安装:1# pacman -S grub os-prober 格式: grub-install –recheck /dev/&lt;目标磁盘&gt;,无论是32位还是64位系统，都是使用–target=i386-pc参数，–no-floppy是不检查软驱1# grub-install --target=i386-pc --recheck --boot-directory=/boot --no-floppy /dev/sdc 生成grub:12# grub-mkconfig -o /boot/grub/grub.cfg# grep &apos;set=root&apos; /boot/grub/grub.cfg 确保:1# blkid /dev/sdc2 UEFI：注意，仅UEFI使用这种方式123# pacman -S dosfstools grub efibootmgr# grub-install --target=x86_64-efi --efi-directory=&lt;EFI 分区挂载点&gt; --bootloader-id=arch_grub --recheck# grub-mkconfig -o /boot/grub/grub.cfg 退出收工 退出chroot，Ctrl + d 即可。 umount 123# umount /dev/sdc3# umount /dev/sdc2# umount /dev/sdc4 重启reboot 拔下启动U盘，用你的Arch Linux优盘启动吧。]]></content>
      <categories>
        <category>折腾笔记</category>
      </categories>
      <tags>
        <tag>折腾笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法学习笔记】贪心算法背包问题]]></title>
    <url>%2F2016%2F04%2F03%2FALG-4%2F</url>
    <content type="text"><![CDATA[贪心算法是我们在《计算机算法设计与分析》这门课中学习的几种重要的算法之一，顾名思义，贪心算法总是做出在当前看来最好的选择。也就是该算法并不从整体最优考虑，它所作出的选择只是在某种意义上的从局部的最优选择，寻找到解决问题的次优解的方法。虽然我们希望贪心算法得到的最终结果也是整体最优的，但是在某些情况下，该算法得到的只是问题的最优解的近似。 贪心算法思路————问题通常以自顶向下的方式进行，以迭代的方式做出相继的贪心选择，每做一次贪心选择就将所求问题简化为规模更小的子问题。当达到算法中的某一步（不可简化的子问题）不能再继续前进时，算法停止。该算法存在的短板： 不能保证求得的最后解是最佳的； 不能用来求最大或最小解问题； 只能求满足某些约束条件的可行解的范围。 实现该算法的过程： Begin 从问题的某一初始解出发； while 能朝给定总目标前进一步 do 求出可行解的一个解元素； end 由所有解元素组合成问题的一个可行解 背包问题描述 0-1背包问题：给定n种物品和一个背包。物品i的重量是Wi，其价值为Vi，背包的容量为C。应如何选择装入背包的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有2种选择，即装入背包（1）或不装入背包（0）。不能将物品i装入背包多次，也不能只装入部分的物品i。 背包问题：与0-1背包问题类似，所不同的是在选择物品i装入背包时，可以选择物品i的一部分，而不一定要全部装入背包，1≤i≤n。背包问题可以定义如下：给出n个大小为w1,w2,…,wn,值为v1,v2,…,vn的项目，并设背包容量为C，要找到非负实数x1,x2,…,xn, 使和在约束下最大。 贪心算法解决背包问题有几种策略：(i) 一种贪婪准则为：从剩余的物品中，选出可以装入背包的价值最大的物品，利用这种规则，价值最大的物品首先被装入（假设有足够容量），然后是下一个价值最大的物品，如此继续下去。这种策略不能保证得到最优解。例如，考虑n=2, w=[100,10,10], v =[20,15,15], c = 105。当利用价值贪婪准则时，获得的解为x= [ 1 , 0 , 0 ]，这种方案的总价值为2 0。而最优解为[ 0 , 1 , 1 ]，其总价值为3 0。 (ii) 另一种方案是重量贪婪准则是：从剩下的物品中选择可装入背包的重量最小的物品。虽然这种规则对于前面的例子能产生最优解，但在一般情况下则不一定能得到最优解。考虑n= 2 ,w=[10,20], v=[5,100], c= 2 5。当利用重量贪婪策略时，获得的解为x =[1,0], 比最优解[ 0 , 1 ]要差。 (iii) 还有一种贪婪准则，就是我们教材上提到的：认为，每一项计算yi=vi/si,即该项值和大小的比，再按比值的降序来排序，从第一项开始装背包，然后是第二项，依次类推，尽可能的多放，直到装满背包。有的参考资料也称为价值密度pi/wi贪婪算法。这种策略也不能保证得到最优解。利用此策略试解n= 3 ,w=[20,15,15], v=[40,25,25], c=30 时的最优解。虽然按pi /wi 非递减的次序装入物品不能保证得到最优解，但它是一个直觉上近似的解。而且这是解决普通背包问题的最优解，因为在选择物品i装入背包时，可以选择物品i的一部分，而不一定要全部装入背包，1≤i≤n。 Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;climits&gt;#include&lt;cstring&gt;using namespace std;float c = 10; //背包容量float w[] = &#123;0,10,2,6,5,4&#125;; //物品质量float v[] = &#123;0,6,3,5,4,6&#125;; //物品价值const int n = sizeof(w)/sizeof(w[0]) - 1 ; //物品品种数float x[n+1]; //背包中某种物品的质量（结果）void Sort(int n,float v[],float w[]) //对物品的单位价值排序&#123; for(int i = 1;i &lt;= n;i++) &#123; for(int j = i;j &lt;= n;j++) &#123; if(v[i]/w[i] &lt; v[j]/w[j]) &#123; float tempv = v[i]; v[i] = v[j]; v[j]=tempv; float tempw = w[i]; w[i] = w[j]; w[j] = tempw; &#125; &#125; &#125;&#125;void printSort(int n,float v[],float w[]) //输出排序后结果&#123; for(int i = 1;i &lt;= n;i++) &#123; cout&lt;&lt;"v:"&lt;&lt;" "&lt;&lt;v[i]&lt;&lt;" "; cout&lt;&lt;"w:"&lt;&lt;" "&lt;&lt;w[i]&lt;&lt;endl; &#125;&#125;void Knapsack(int n,float c,float v[],float w[],float x[]) //贪心选择&#123; Sort(n,v,w); int i; for(i = 1;i &lt;= n;i++) x[i] = 0; //float c = M; for(i = 1;i &lt;= n;i++) &#123; if(w[i] &gt; c) break; x[i] = 1; c-=w[i]; &#125; if(i &lt;= n) x[i]= c/w[i];&#125;int main()&#123; Knapsack(n,c,v,w,x); printSort(n,v,w); //输出结果 cout &lt;&lt; "The best answer is:\n"; for(int j =1; j &lt;= 5; j++) &#123; cout &lt;&lt; v[j] &lt;&lt; " "; &#125; cout &lt;&lt; endl; for(int i = 1; i &lt;= 5; i++) cout &lt;&lt; x[i] * w[i] &lt;&lt; " "; //system("pause"); return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转：【算法学习笔记】动态规划0—1背包问题]]></title>
    <url>%2F2016%2F03%2F24%2FALG-3%2F</url>
    <content type="text"><![CDATA[问题描述：给定n种物品和一背包。物品i的重量是wi，其价值为vi，背包的容量为C。问应如何选择装入背包的物品，使得装入背包中物品的总价值最大? 对于一种物品，要么装入背包，要么不装。所以对于一种物品的装入状态可以取0和1.我们设物品i的装入状态为xi,xi∈ (0,1)，此问题称为0-11背包问题。 过程分析数据：物品个数n=5,物品重量w[n]={0，2，2，6，5，4},物品价值V[n]={0，6，3，5，4，6},（第0位，置为0，不参与计算，只是便于与后面的下标进行统一，无特别用处，也可不这么处理。）总重量c=10.背包的最大容量为10，那么在设置数组m大小时，可以设行列值为6和11，那么，对于m(i,j)就表示可选物品为i…n背包容量为j(总重量)时背包中所放物品的最大价值。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;climits&gt;#include&lt;cstring&gt;using namespace std;const int c = 10; //背包的容量const int w[] = &#123;0,2,2,6,5,4&#125;;//物品的重量，其中0号位置不使用 。const int v[] = &#123;0,6,3,5,4,6&#125;;//物品对应的待加，0号位置置为空。const int n = sizeof(w)/sizeof(w[0]) - 1 ; //n为物品的个数int x[n+1];void package0_1(int m[][11],const int w[],const int v[],const int n)//n代表物品的个数&#123; //采用从底到顶的顺序来设置m[i][j]的值 //首先放w[n] for(int j = 0; j &lt;= c; j++) if(j &lt; w[n]) m[n][j] = 0; //j小于w[n],所对应的值设为0，否则就为可以放置 else m[n][j] = v[n]; //对剩下的n-1个物品进行放置。 int i; for(i = n-1; i &gt;= 1; i--) for(int j = 0; j &lt;= c; j++) if(j &lt; w[i]) m[i][j] = m[i+1][j];//如果j &lt; w[i]则，当前位置就不能放置，它等于上一个位置的值。 //否则，就比较到底是放置之后的值大，还是不放置的值大，选择其中较大者。 else m[i][j] = m[i+1][j] &gt; m[i+1][j-w[i]] + v[i]? m[i+1][j] : m[i+1][j-w[i]] + v[i];&#125;void answer(int m[][11],const int n)&#123; int j = c; int i; for(i = 1; i &lt;= n-1; i++) if(m[i][j] == m[i+1][j]) x[i] = 0; else &#123; x[i] = 1; j = j - w[i]; &#125; x[n] = m[i][j] ? 1 : 0;&#125;int main()&#123; int m[6][11]= &#123;0&#125;; package0_1(m,w,v,n); for(int i = 0; i &lt;= 5; i++) &#123; for(int j = 0; j &lt;= 10; j++) printf("%2d ",m[i][j]); cout &lt;&lt; endl; &#125; answer(m,n); cout &lt;&lt; "The best answer is:\n"; for(int i = 1; i &lt;= 5; i++) cout &lt;&lt; x[i] &lt;&lt; " "; system("pause"); return 0;&#125; 原文链接]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记03----运算符与表达式、序列]]></title>
    <url>%2F2016%2F03%2F22%2Fpynote03%2F</url>
    <content type="text"><![CDATA[运算符与表达式1.在解释器总执行运算在Python的解释器中，你可以交互地使用解释器来进行计算。例如输入:` 222+222` 解释器会直接显示结果：&gt;&gt;&gt;444 2.运算符及用法运算符 名称 说明 例子 与其他语言基本一致 3. 运算符的优先级（由低到高）默认地，运算符优先级表决定了哪个运算符在别的运算符之前计算。 运算符 描述 lambda Lambda表达式 or 布尔“或” and 布尔“与” not x 布尔“非” in，not in 成员测试 is，is not 同一性测试 &lt;，&lt;=，&gt;，&gt;=，!=，== 比较 | 按位或 ^ 按位异或 &amp; 按位与 &lt;&lt;，&gt;&gt; 移位 +，- 加法与减法 *，/，% 乘法、除法与取余 +x，-x 正负号 ~x 按位翻转 ** 指数 x.attribute 属性参考 x[index] 下标 x[index:index] 寻址段 f(arguments…) 函数调用 (experession,…) 绑定或元组显示 [expression,…] 列表显示 {key:datum,…} 字典显示 ‘expression,…’ 字符串转换然而，如果你想要改变它们的计算顺序，你得使用圆括号。 例如:&gt;&gt;&gt;3*(3+2) 输出结果为&gt;&gt;&gt;15 123456#!/usr/bin/env python a=40 b=60 area=a*b print("Area is",area) 序列 在Python中最基本的数据结构是序列，序列中的每个元素被分配了一个序号——即元素的位置，叫做索引。第一个索引是0，第二个是1，而倒数第一个元素可以标记为-1，倒数第二个为-2以此类推。 序列的元素可以是之前讲的所有基础数据类型，也可以是另一个序列，还可以是之后我们将要将的对象。 序列最常用的有两类，元组(tuple)和列表(list)。两者的区别是，列表可以修改，而元组不行。 123&gt;&gt;&gt; student1=("霸天虎","男",19) #student1就是元组 &gt;&gt;&gt; student1 #在解释器中输入变量名称，可以显示变量值 ('霸天虎', '男', 19) 123&gt;&gt;&gt; student2=["汤姆猫","男",22] #student2就是列表 &gt;&gt;&gt; student2 ['汤姆猫', '男', 22] 123&gt;&gt;&gt; student3=("王尼玛","男","未知",["脑袋大","脖子短","屁股圆"]) #在序列中的元素也是序列 &gt;&gt;&gt; student3 ('王尼玛', '男', '未知', ['脑袋大', '脖子短', '屁股圆']) 序列的操作1.索引12345&gt;&gt;&gt; student1[0] #显示元组student1的第一个元素 '霸天虎' &gt;&gt;&gt; student1[-1] #显示元组student1的最后一个元素 19 1234&gt;&gt;&gt; student3[-1][0] #显示元组student3最后一个元组元素中的第一个元素 '脑袋大' &gt;&gt;&gt; student3[-1][0][0] #显示元组student3最后一个元组元素中的第一个元素字符串中的第一个字符 '脑' 1.1分片 使用索引访问的是单个元素，而使用分片访问的是一坨元素基本样式[下限:上限:步长]，步长省略默认步长为1.123&gt;&gt;&gt; numbers=[1,2,3,4,5,6,7,8,9] &gt;&gt;&gt; numbers[0:3] #显示从第一个（包括第一个）到第三个（包括第三个）之间的元素，类似for（int i=0，i&lt;3,i++） [1, 2, 3] 123456&gt;&gt;&gt; numbers[8:11] #显示第9个到第11个元素，因为没有第11个，所以只输出第9个元素 [9] &gt;&gt;&gt; numbers[-3:-1] #显示末第三到末第一个元素 [7, 8] &gt;&gt;&gt; numbers[-1:-3] #如果顺序写反，不会输出元素 [] 123456&gt;&gt;&gt; numbers[:3] #如果索引空缺，则默认索引两端 [1, 2, 3] &gt;&gt;&gt; numbers[-3:] [7, 8, 9] &gt;&gt;&gt; numbers[7:] [8, 9] 12&gt;&gt;&gt; numbers[0:5:2] #显示第1个到第5个元素，且步长为2 [1, 3, 5] 12&gt;&gt;&gt; numbers[::3] #步长3，从左向右输出 [1, 4, 7] 12&gt;&gt;&gt; numbers[::-1] #步长为1，从右向左输出 [9, 8, 7, 6, 5, 4, 3, 2, 1] 2.赋值 元组不可修改，而列表可以修改。123456789&gt;&gt;&gt; student1[0]="擎天柱" #给元组student1第一个元素重新赋值，结果报错 Traceback (most recent call last): File "&lt;pyshell#22&gt;", line 1, in &lt;module&gt; student1[0]="擎天柱" TypeError: 'tuple' object does not support item assignment &gt;&gt;&gt; student2[0]="纸巾" #给列表student2第一个元素复制，没有问题 &gt;&gt;&gt; student2 ['纸巾', '男', 22] 3.序列相加与乘法 12&gt;&gt;&gt; ["王小明"]+["男"] #序列的加法 ['王小明', '男'] 123&gt;&gt;&gt; a=["王大头","男"]*11 #序列的乘法 &gt;&gt;&gt; a ['王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男', '王大头', '男'] 4.序列的循环调用123student3=("王尼玛","男","未知",["脑袋大","脖子短","屁股圆"]) for a in student3: print(a) 输出 1234王尼玛 男 未知 ['脑袋大', '脖子短', '屁股圆'] 词典1.词典的定义1&gt;&gt;&gt;dic = &#123;'tom':11, 'sam':57,'lily':100&#125; #tom是键，11是值 词典和表类似的地方，是包含有多个元素，每个元素以逗号分隔。但词典的元素包含有两部分，键和值，常见的是以字符串来表示键，也可以使用数字或者真值来表示键（不可变的对象可以作为键）。值可以是任意对象。键和值两者一一对应。 与列表和元组不同的是，词典的元素没有顺序。你不能通过下标引用元素。词典是通过键来引用。 123456dic = &#123;'tom':11, 'sam':57,'lily':100&#125; print(dic['tom']) dic['tom'] = 30 dic['王尼玛']=250 #可以通过这种形式向词典中添加元素 print(dic) 输出结果 1211 &#123;'sam': 57, '王尼玛': 250, 'tom': 30, 'lily': 100&#125; 2.词典的循环调用123dic = &#123;'tom':11, 'sam':57,'lily':100&#125; for key in dic: print(key,dic[key]) 输出 123lily 100 sam 57 tom 11 小提示： 在初始化序列时，单个元素的排列仍是排列，单个元素的元组不是元祖。python (“dd”)‘dd’ #不是元组[“dd”][‘dd’] 其实tuple、list是python中的两个”类”。至于什么是类，之后我会提到 小括号是元组，中括号是列表，大括号是词典]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记02----基本数据类型]]></title>
    <url>%2F2016%2F03%2F22%2Fpynote02%2F</url>
    <content type="text"><![CDATA[1.Python中的数在Python中有4种类型的数——整数、长整数、浮点数和复数。a) 2是一个整数的例子。b) 长整数不过是大一些的整数。c) 3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。d) (-5+4j)和(2.3-4.6j)是复数的例子。1234&gt;&gt;&gt; a=1 &gt;&gt;&gt; b=3.53E-4 &gt;&gt;&gt; b #在解释器中直接输入变量名可以输出变量中的值 0.000353 2.Python中的字符串字符串是字符的序列。字符串基本上就是一组单词。 a） 可以使用单引号、双引号、三个引号来指示字符串。12345"Hello World" 'Hello World' """Hello World""" #单引号双引号作用相同，都可以保存字符串中的空格 #三个引号除了空格以外，还可以保存换行 12345&gt;&gt;&gt; name="王尼玛" &gt;&gt;&gt; name[0] #通过序号0可以调用字符串第一个字符 '王' &gt;&gt;&gt; name[-1] #通过需要-1可以调用字符串末第一个字符 '玛' 12&gt;&gt;&gt; "王蜜桃"[-1] #直接调用字符串末第一个字符 '桃' 12345&gt;&gt;&gt; a="hello" &gt;&gt;&gt; b="world" &gt;&gt;&gt; c=a+b #字符串加法 &gt;&gt;&gt; c 'helloworld' 123a="python "*11 #字符串的乘法 &gt;&gt;&gt; a 'python python python python python python python python python python python ' 123&gt;&gt;&gt; a="python"*11 &gt;&gt;&gt; "p" in a #判断p是否在a中 True b) 转义符。 在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：转义字符 描述(在行尾时) 续行符\ 反斜杠符号\’ 单引号\” 双引号\a 响铃\b 退格(Backspace)\e 转义\000 空\n 换行\v 纵向制表符\t 横向制表符\r 回车\f 换页\oyy 八进制数yy代表的字符，例如：\o12代表换行\xyy 十进制数yy代表的字符，例如：\x0a代表换行\other 其它的字符以普通格式输出 有时我们并不想让转义字符生效，我们只想显示字符串原来的意思，这就要用r和R来定义原始字符串。如：1print（r'\t\r'） 输出结果为1\t\r c) Unicode字符串 Unicode是书写国际文本的标准方法。如果你想要用你的母语如北印度语或阿拉伯语写文本，那么你需要有一个支持Unicode的编辑器。类似地，Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u”This is a Unicode string.”。 3.Python中的变量 Python中的变量不需要声明就可以使用。 比如可以输入1a="测试" 那么内存中就会有一个变量a，它的值是”测试”，变量的类型是字符串类型。我们可以通过type（）来查询变量的类型。1tpye(a) 输出结果为1&lt;type 'str'&gt; 可以再次给a赋其他类型的数值1a=1 小提示：1.字符串是不可变的！一旦定义了字符串，这个字符串中的内容就不能更改啦！ 2.Python中没有char类型！ 3.多个字符串放在一起会自动连接！12print("你""好") 输出结果是 你好 4.Python是大小写敏感的，标识符的明明要求与C语言相同。标识符的第一个字母必须是字母或者下划线”_”，其他位置的字母可以是字母、数字、下划线。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【OS学习笔记】处理器管理——单处理器调度算法 / 线程]]></title>
    <url>%2F2016%2F03%2F21%2FOSnote-2%2F</url>
    <content type="text"><![CDATA[常用调度算法一、先来先服务（FCFS）二、短作业/短进程优先（SJF/SPF)三、时间片轮转（RR）时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。 四、高响应比优先（HRRF）高响应比优先调度算法的基本思想是把CPU分配给就绪队列中响应比最高的进程。高响应比优先调度算法既考虑作业的执行时间也考虑作业的等待时间，综合了先来先服务和最短作业优先两种算法的特点。该算法中的响应比是指作业等待时间与运行比值，响应比公式定义如下：响应比 =（等待时间+要求服务时间）/ 要求服务时间,即RR=（w+s）/s=1+w/s，因此响应比一定是大于1的。 五、优先级调度既可用于高级调度，又可用于低级调度，还可用于实时系统。当该算法用于作业调度时，系统从后备作业队列中选择若干个优先级最高的，且系统能满足资源要求的作业装入内存运行。当该算法用于进程调度时，将把处理机分配给就绪进程队列中优先级最高的进程。 优先级1.静态优先级：静态优先级是在创建进程时确定进程的优先级，并且规定它在进程的整个运行期间保持不变。2.动态优先级：动态优先级是在创建进程时赋予该进程一个初始优先级，然后其优先级随着进程的执行情况的变化而改变，以便获得更好的调度性能。在采用优先级法的低级调度中，分为抢占式和非抢占式 非抢占式优先级算法在这种调度方式下，系统一旦把处理机分配给就绪队列中优先级最高的进程后，该进程就能一直执行下去，直至完成；或因等待某事件的发生使该进程不得不放弃处理机时，系统才能将处理机分配给另一个优先级高的就绪进程。 抢占式优先级算法在这种调度方式下，进程调度程序把处理机分配给当时优先级最高的就绪进程，使之执行。一旦出现了另一个优先级更高的就绪进程时，进程调度程序就停止正在执行的进程，将处理机分配给新出现的优先级最高的就绪进程。 六、多级反馈队列调度（MLFQ）多级反馈队列调度算法为就绪状态的进程设置多个队列，第1级队列优先度最高，但时间片最小，以下各级队列优先度依次降低而时间片依次增加。各级队列均按先来先服务的原则排序。 优点1、短进程优先处理。2、系统开销不大。3、对分时系统来说，交互型请求通常能在第一队列中完成。 缺点如果优先级高的队列一直不为空，优先级较低的队列中的进程可能长时间无法得到运行，即会导致饥饿的发生。 七、实时调度基本要求是保证计算机在规定的时间内对外部事件的请求做出响应。 实时调度和非实时调度的区别：分类： （1）比率单调调度算法算法的任务优先级按照任务周期来确定。短任务周期的任务具有较高的优先级，周期长的任务优先级较低。 实现简单、系统开销小、灵活性好，实时调度基础算法，但CPU利用率低。 （2）最早截止时间优先调度算法算法的任务优先级按照截止时间来确定。截止时间接近的任务具有较高的优先级，截止时间较晚的任务优先级较低。 更多用于抢占式调度算法 （3）最短空闲时间优先调度算法算法的任务优先级按最短空闲时间来确定。最短空闲时间越短的任务具有较高的优先级。 任务空闲时间 = 任务截止时间 - 任务剩余时间 - 当前时间更多用于抢占式调度算法系统开销较大 线程线程的引入线程是为了弥补进程的缺陷而提出并使用的。 进程在一个时段内只能做一件事。 线程线程可以理解为CPU调度和执行的最小单元。 1 进程内的一个执行单元。 2 进程内的一个可独立调度的实体。 3 线程是进程中一个相对独立的控制流程序。 4 线程是执行的上下文。 属性 1.线程属于轻型实体，基本不拥有系统资源，只拥有为保证其运行必不可少的资源。 例如，只有一个线程控制块（TCB）、程序计数器（PC）、一组寄存器和堆栈等。 2.线程是独立调度和分派的基本单位，是能够独立运行的基本单位。 3.同一个进程中的所有线程共享该进程的全部资源。 4.线程并发执行程度高，同一进程的多个线程可以并发执行，多个进程的多个线程也可并发执行。 线程和传统进程的比较相似之处 1.二者都有标识符（ID）、一组寄存器、状态、优先级及所要遵循的调度策略。 2.进程控制块(PCB)，线程控制块（TCB）。 3.进程中的线程共享该进程的资源，进程中的子进程也共享该进程的资源；线程和子线程的创建者可以对线程和子线程实施某些控制。 差异 1.传统进程除了是调度和分派的基本单位以外，还是资源分配的基本单位。而引入线程的操作系统中，线程只是调度和分派的基本单位。 2.线程并发执行的程度高于传统进程并发执行的程度。 3.线程的创建和撤销时空开销小于进程，切换时间小于进程。 4. 5.一个线程的数据可以直接被属于同一个进程的其他线程所使用，因此数据传递既方便又快捷。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【OS学习笔记】进程同步与通信]]></title>
    <url>%2F2016%2F03%2F21%2FOSnote-3%2F</url>
    <content type="text"><![CDATA[进程同步与通信进程同步并发进程的关系 间接制约关系：一组（两个或多个）进程共享一中资源，且该资源一次仅允许一个进程使用。 直接制约关系：几个进程相互协作完成一项任务，这些进程要求必须按照规定好的顺序依次执行。进程的互斥与同步 1.进程同步：若干进程为为完成一个共同的任务而互相合作等待对方的消息的协调关系称为进程同步。 2.进程互斥：进程之间争夺互斥资源引起的。 2.1 饥饿：一个就绪进程所申请的资源总是被优先于自己的其他进程占有，而始终处于不能被调度执行的状态，这种情况称为饥饿。 2.2 死锁：一个进程集合中，已经占有部分资源的两个或两个以上的进程，还需要获得已被其他进程占有的资源才能继续执行；有可能出现某些进程相互之间都在等待对方的资源且无法运行的局面，即在进程集合中的这些进程处于永远的阻塞状态，这就是死锁。 3.二者相似之处进程互斥实质上是进程同步的一种特殊情况。 4.进程同步与进程互斥的区别：~ 临界资源与临界区 一段时间内只能允许一个进程使用的资源（即互斥资源）称为临界资源。 对临界资源的访问只能互斥进行，也即个进程对同一临界资源进行操作的程序段也应互斥执行，只有这样才能保证对临界资源的互斥访问。我们把进程中访问临界资源的代码段称为临界区。临界区同步机制的4条准则：1 .空闲让进。2 .忙则等待。3 .有限等待。若干进程要求进入同一临界资源的临界区时，应在有限的时间内使一进程进入临界区，即不应出现各进程相互等待而都无法进入临界区的情况。4 .让权等待。当进程不能进入其临界区时应立即释放所占有的CPU，以免陷入忙等（进程占用CPU的同时又一直等待）。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【OS学习笔记】操作系统引论]]></title>
    <url>%2F2016%2F03%2F21%2FOSnote-1%2F</url>
    <content type="text"><![CDATA[OS的定义OS是掌控（管理）计算机上所有事情的系统软件。 控制和管理计算机系统的所有硬件和软件资源。 合理地组织计算机的工作流程，保证计算机资源的公平竞争和使用。 方便用户使用计算机。 防止对计算机资源的非法侵占和使用。 保证OS自身的正常运转。 OS的层次模型 用户接口（命令接口、程序接口、图形用户接口）对对象操纵和管理的软件集合（处理机管理软件、存储器管理软件、设备管理软件、文件管理软件）操作系统对象（处理机、存储器、设备、文件和作业） 操作系统对象就是OS操作和管理的对象。命令接口是用户和OS的接口，程序接口是应用程序和OS的接口。 OS的功能一、存储管理（1）、内存分配：为每道程序分配内存，两种方式如下：静态分配：每个作业的内存空间是作业装入时确定的，装入后，不允许再申请新的内存空间，也不允许在内存中“移动”；动态分配：每个作业的基本内存空间也是在装入时确定，但允许在运行中申请新的内存空间也允许“移动”要完成内存空间分配应有：内存分配数据结构（记录内存使用情况）、内存分配功能（系统按内存分配算法分配）、内存回收功能（系统对用户不再需要的内存通过用户释放去完成系统的回收）（2）、内存保护：确保每道程序都在自己的内存空间中运行互不干扰。即决不允许用户程序访问操作系统的程序和数据；也不允许转移到非共享的其它用户程序中去执行。因此需要内存保护机制，一种较为简单的内存保护机制是设置两个界限寄存器，分别用于存放正在执行程序的上届和下届。系统需对每条指令所访问的地址进行越界检查，如果发生越界，便发出越界中断请求，以停止该程序的执行。若完全用软件实现，需要增加若干指令去进行越界检查，将显著降低程序的运行速度，因此越界检查都是由硬件实现。当然对发生越界后的处理还须软件配合来完成。（3）地址映射一个应用程序（源程序）.cpp经编译compile后，通常会形成若干个目标程序.obj；这些目标程序再经过连接link而形成可装入程序。这些程序地址都是从“0”开始，其他地址都是相对于起始地址计算的；由这些地址所形成的地址范围称为“地址空间”。其中的地址称为“逻辑地址”或“相对地址”。此外，由内存中的一系列单元所限定的地址范围称为“内存空间”其中的地址称为“物理地址”。在多道程序环境中，地址空间中的逻辑地址和内存空间中的物理地址是不可能一致的，因此存储器管理必须提供地址映射功能，以将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址，该功能也由应硬件完成。（4）内存扩充由于物理内存容量有限，因此难于满足用户需要，势必影响系统的性能。这里的内存扩充是指借助虚拟存储技术，从逻辑上去扩充内存容量，使用户所感觉到的内存容量比实际内存容量大得多，可使更多用户程序能并发运行。需要内存扩充机制，实现如下功能：请求调入功能：（现装现卖）允许在仅装入一部分用户程序和数据的情况下，启动该程序运行。在运行过程中对当发现继续运行所需的程序和数据尚未装入内存时，可向OS发送请求由OS将所需部分调入内存，以便继续运行。置换功能：（舍不舍得）若内存中已无足够空间来装入需要调入的部分时，系统应能将内存中的一部分暂时不用的程序和数据调至磁盘上，然后将所需部分调入内存。 二、处理器管理处理器的分配和运行都是以进程为基本单位（1）进程控制创建进程为其分配资源，运行结束时撤销进程并回收资源，及控制进程在运行过程中的状态转换。在OS中通常是利用若干条进程控制原语或系统调用，来实现进程控制。（要做就做全套）原语，指用以完成特定功能、具有“原子性”的一段程序。原子性，即程序中一组动作，不被其他任何操作打断。最基本的原语有创建新进程的进程原语，撤销进程原语。（2）进程同步对诸进程的运行进行协调，有如下两种协调方式：进程互斥方式：指诸进程在对临界资源访问时，应采用互斥方式进程同步方式：在互相合作完成共同任务的进程间，由同步机构对他们的次序加以协调。最简单的实现进程互斥的机制是，为每种临界资源配一把锁，设置一对关锁原语Lock（w）和开锁原语Unlock（w）。而实现进程同步最常用的机制使信号量。（3）进程通信进程相互合作去完成一共同任务时，需交换信息。直接通信方式：用与进程位于同一计算机系统时。由源进程利用发生命令直接将message挂到目标进程的消息队列上，以后由目标进程利用接收命令从其消息队列中取出消息。间接通信方式（找个中间人，银弹策略）：用于进程处于不同系统中时。由源进程利用发生命令将message送入一个存放消息的中间实体，以后由目标进程利用接收命令从中间实体中取走消息。该中间实体通常称为邮箱，相应的通信系统称为电子邮件系统？？？（4）调度等待在后边队列上的每个作业通常要经过调度，包括作业调度和进程调度两步才能执行。作业调度的基本任务，是从后备队列中按照一定的算法，选择出若干个作业，为他们分配必要的资源（首要是内存）。将他们调入内存后，变为它们建立进程，使之称为可能获得处理器的就需进程；并将他们按一定算法插入就绪队列。进程调度：从进程的就绪对垒中，按一定算法选一新进程，把处理机分配给它，并为它设置运行现场，使进程投入运行。这两调度算法有些是相同的如FCFS（First come First service）算法，优先权高优先调度算法。 三、设备管理(1)缓冲管理管理好各种类型的缓冲区，如字符缓冲区和字符块缓冲区，以缓和CPU和I/O速度不匹配的矛盾，最终达到提高CPU和I/O设备利用率，进而提高系统吞吐量。（比如串口I/O） 最常见的缓冲区机制有单缓冲区机制，能实现双向同时传送数据的双缓冲机制，以及能供多个设备同时使用的公用缓冲池机制。（2）设备分配根据用户的I/O请求，位置分配其所需的设备。若在CPU和I/O间还存在设备控制器和I/O通道时，还须为分配出去的设备分配响应的控制器和通道。 为实现该功能，系统应配置设备控制表、控制器控制表等数据结构，用于记录设备及控制器的标识符和状态。对于独占设备（临界）的分配，还应考虑该设备被分配出去后，系统是否安全，设备用完后，还应立即回收。（3）设备处理（设备驱动程序）任务是实现CPU和设备控制器之间的通信。即由CPU向设备控制器发出I/O指令，要求它完成指定的I/O操作；并能接受由设备控制器发来的中断请求，给予及时的响应和相应的处理。处理过程： 首先设备处理程序检查I/O请求的合法性、了解设备的状态是否空闲、了解有关传递参数以及设置设备的工作方式。 然后，便向设备控制器发出I/O命令，启动I/O设备区完成指定的I/O操作 最后是及时响应由控制器发来的中断请求，并根据该中断请求的类型，调用相应的中断处理程序进行处理。 （4）设备独立性和虚拟设备设备独立性是指应用程序独立于物理设备，以使用户编址的程序与实际使用的物理设备无关。（就是说应用程序用的设备是OS提供的设备的接口，OS屏蔽了具体使用哪个设备?,银弹策略）可提高用户程序的可适应性，易于实现输入、输出的重定向（即I/O操作中所使用的设备科方便地重新指定）。虚拟设备，是把每次仅允许一个进程使用的物理设备，改造为能同时供多个进程共享的设备。提高了设备利用率，加速了程序的运行。 四、文件管理（1）文件存储空间的管理系统设置相应的数据结构，用于记录文件存储空间的使用情况，以供分配存储空间时参考。还应具有对存储空间进行分配和回收的功能。一般对存储空间的分配次啊用离散分配方式，以减少外存零头，并以盘块为基本分配单位。盘块的大小通常为512字节至4k字节。（2）目录管理方便在外存在寻找用户所需文件。通常有系统为每个文件建立一个目录项，包含文件名、文件属性、文件在磁盘上的物理位置等，最终构成一个目录文件。目录管理的主要任务，是为每个文件建立起目录项，并对众多的目录项加以有效的组织，以实现方便的按名存取。（3）文件的读写管理和存取控制由于读和写操作不会同时进行，故可合用一个读/写指针。一个完善的文件系统中，可以采用多级保护设施来达到保护文件存取控制的目标。第一进行系统级存取控制，使用空灵。第二级是用户级存取控制，通过对用户分类并为其分配适当的“文件存取权限”等方法实现。第三级文件级存取控制，通过设置文件属性（只读、只执行、读/写等属性）来控制对文件的存取。 五、用户接口（1）命令接口分为联机用户：由一组键盘操作命令及命令解释程序所组成。用户在终端或控制台上键入一命令后，系统理解转入命令解释程序。完成指定功能后，控制又返回终端或控制台。用户可通过此实现对作业控制。脱机用户接口：为批处理作业的用户提供的，由一组作业控制语言JCL组成。批处理作业的用户不能直接与自己的作业交互作用，只能委托系统代替用户对作业进行控制和干预。（2）程序接口是为用户在执行中访问系统资源而设置的，是用户程序取得OS服务的唯一途径，由一组系统调用完成。（3）图形接口将联机用户接口演化而来，得到图形接口，更方便直观。 六、网络与通信管理（1）网络资源管理计算机联网的目的是进行资源共享，网络操作系统应能够实现网上资源共享，管理用户对资源的访问，保证网络信息资源的安全性和完整性。（2）数据通信管理计算机联网后站点之间可以互相传送数据。数据通信管理为为网络应用提供必要的网络通信协议，处理网络信息传输过程中的物理细节；通过通信软件，按照网络通信协议完成网络上计算机之间的信息传输。（3）网络管理包括网络性能管理、安全管理、故障管理、配置管理和日志管理。 OS的基本特征一、并发性并发性是操作系统最重要的特征，其他特征以并发性为前提。并发性是指两个或两个以上的事情或活动在同一时间间隔内发生（不是同一时刻）。即，在计算机系统中同时存在多个进程，从宏观上看，这些进程是同时运行并向前推进着；从微观上讲，任何时刻只能有一个进程执行，单CPU条件下，则这些进程在CPU上交替执行。通常的程序是静态实体（Passive Entity），它们是不能并发执行得。为了让程序并发执行，系统必须分别为每个程序建立进程（进程的来由），即在系统中能独立运行并作为资源分配的基本单位，他是一个活动实体。 二、共享性在内存中并发执行的多个进程可以共同使用系统中的资源。互斥共享方式：有些资源如打印机，虽然可同时供多个进程使用，但一段时间内却只允许一个进程访问该资源（称为临界资源），所以需要同步的方式进行访问使用。临界资源都要求互斥地被共享。同时访问方式：允许在一段时间内由多个进程同时对它进行访问，这里的“同时”往往是宏观上的，微观上这些进程也可能是交替地对该资源进行访问。这种方式的典型资源是磁盘。 三、虚拟性（Virtual）虚拟性 的本质含义是指一个物理实体映射为多个逻辑实体。例如，多道分时系统中，虽只有一个CPU，但每个终端用户却都认为是有一个CPU在专门为他服务。也可把一条物理信道虚拟为多条逻辑信道（虚信道）。在os中虚拟的实现，主要是通过分时使用的方法。如果n是某一物理设备所对应的虚拟的逻辑设备，则虚拟设备的速度必然是物理设备速度的1/n. 四、不确定性进程的执行由于资源等因素的限制并非“一气呵成”，而是走走停停，因此是以一部方式运行的。尽管如此，只要运行环境相同/初始数据相同，作业经多次运行，都会获得完全相同的结果，因此，异步运行是允许的。 OS的分类无OS时的计算机系统：人工操作方式-à脱机输入输出方式 一、批处理系统（成批处理特性）单道批处理系统：多道批处理系统：用户所提交的作业都先存放在外存上并排成一个队列称为“后备队列”；然后由作业调度程序按一定的算法从后备队列中选择若干个作业调入内存，使他们共享CPU和系统中的各种资源，从而内存中驻留多道程序并行执行。（作业从提交到完成，需要进过两次调度：作业调度算法从外存的队列中选入内存。进程调度算法，从内存中作业中选择其一将处理器分配给其进行执行）优点：1.、提高CPU利用率。I/O是在准备数据，所以在I/O完成前CPU是无法完成操作的。这样显然会降低CPU的利用率。所以多道程序，可以让多个程序装入内存，可交替执行，从而当正在运行的程序因I/O而暂停执行时，系统可调度另一道程序运行，从而保持了CPU处于忙碌状态。2、可提高内存和I/O设备的利用率，如果单道程序，则偌大的内存只能装入一个程序，这样必定浪费内存。3、增加系统吞吐量。缺点：1（指作业进入系统到执行完成退出系统的时间）平均周转时间长，。由于作业要排队，依次进行处理，因而作业的周转时间较长。2无交互能力，用户一旦提交作业，就不能再与自己的作业进行交互，修改和调试不方便。 二、分时系统（比如windows）（交互特性）指在一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户共享主机中的资源，每个用户都可通过自己的终端以交互（人机交互）的方式使用计算机。实现的关键问题：及时接收（能同时接收多个终端上输入的数据，为每个终端配置一个缓冲区，用来暂存用户键入的命令），及时处理（各个用户的作业都必须在内存中，且能频繁获得处理机而运行，此目标要求所有的用户作业都直接进入内存）实现方法：（1）用户作业不能先进入磁盘，然后再调入内存。（2）不允许一个作业长时间占用处理器直至它运行结束或发生I/O请求后，方才调度其他作业运行。应规定每个程序只运行很短的时间（通常称为时间片），然后暂停该作业的运行并立即调度下一个程序的运行。 三、实时系统（比如DSP中RTOS）（实时特性）所谓实时是指“及时”“即时”，实时系统是指在规定时间内完成对该事件的处理，并控制所有实时任务加以分类。实时系统是以任务来划分，并由他们反映或控制外部时间，因而带有紧迫性。划分：执行任务是否呈现周期性：周期性实时任务（周期性的控制某个外部时间）、非周期性实时任务。对截止时间的要求来划分：硬实时任务（必须满足任务对截止时间的要求，否则可能出现难以预测的结果）软实时任务（也有个截止时间，但并不严格，错过不会有太大影响）注意：实时系统也与分时系统一样具有多路性、独立性，可为多个终端服务且独立，但对实时系统而言，其多路性表现在经常对多路的现场信息进行采集或对多个对象或多个执行机构进行控制。实时系统也具交互性，但仅限于访问系统中某些特定的专用服务出现，而不想分时系统那样提供数据处理服务、资源共享等服务。 批处理系统、分时系统和实时系统是三种基本的操作系统类型。一个实际的os可能兼有三者或其中两者的功能。 四、微机操作系统 ~~~五、网络操作系统六、多CPU操作系统七、分布式操作系统八、嵌入式操作系统]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记01----Hello World！]]></title>
    <url>%2F2016%2F03%2F21%2Fpynote01%2F</url>
    <content type="text"><![CDATA[1.Python命令行在linux下输入python（windows下点击开始-&gt;程序-&gt;Python 2.3 -&gt;IDLE（Python GUI）在&gt;&gt;&gt;提示符后输入print(‘Hello World!’) Hello World! 2.Python小程序用文本编辑器写一个.py结尾的文件，比如说helloWorld.py中写入print(“Hello World”) 在命令提示符中输入Python helloWorld.py，会在窗口中显示以下结果 Hello World! 3.Python脚本下面将刚才的Python小程序改写成Python脚本 #!/usr/bin/env python print(&quot;&quot;&quot;Hello World!&quot;&quot;&quot;) 更改helloWorld.py文件的权限 sudo chmod 755 helloWorld.py 输入./helloWorld.py即可之行该脚本，输入结果如下 Hello World! 知识点：1.单引号、双引号、多引号的区别 *先说双引号与3个双引号的区别，双引号所表示的字符串通常要写成一行如果要写成多行，那么就要使用\ (“连行符”) 123s1 = &quot;hello,world&quot; # s2与s1是一样的。s2 = &quot;hello,\ world&quot; 如果你用3个双引号的话，就可以直接写了，如下： 123s3 = &quot;&quot;&quot;hello, #s3实际上就是&quot;hello,\nworld,\nhahaha.&quot;, “\n”是换行符。world,hahaha.&quot;&quot;&quot; 如果你的字符串里\n很多，你又不想在字符串中用\n的话，那么就可以使用3个双引号。而且使用3个双引号还可以在字符串中增加注释，如下： 12345678s3 = &quot;&quot;&quot;hello, #hoho, this is hello, 在3个双引号的字符串内可以有注释哦world, #hoho, this is worldhahaha.&quot;&quot;&quot;另外，三个引号还可用于注释。例如：&quot;&quot;&quot;大家好，我是注释&quot;&quot;&quot; 单引号与双引号的作用是相同的。但是为什么要引入单引号和双引号呢？举个例子：当我用单引号来表示一个字符串时，如果要表示 Let’s go 这个字符串，必须这样： s4 = &#39;Let\&#39;s go&#39; 注意没有，字符串中有一个’，而字符串又是用’来表示，所以这个时候就要使用转义符 \ （\，转义符应该知道吧）, 如果你的字符串中有一大堆的转义符，看起来肯定不舒服python也很好的解决了这个问题。 如下： s5 = &quot;Let&#39;s go&quot; 这时，我们看，python知道你是用 “ 来表示字符串，所以python就把字符串中的那个单引号 ‘ , 当成普通的字符处理了，是不是很简单？ 对于双引号，也是一样的，下面举个例子 s6 = &#39;I realy like &quot;python&quot;!&#39; 这就是单引号和双引号都可以表示字符串的原因了。 2.在Python 2.x中，print还可以是一个关键字，可写成print ‘Hello World!’，但这在3.x中行不通。 3.“#!/usr/bin/python”与”#!/usr/bin/env python”的区别（windows用户可以无视） #!/usr/bin/python 是告诉操作系统执行这个脚本的时候，调用/usr/bin下的python解释器；相当于写死了Python的路径，如果Python的路径改变，脚本将无法执行。不推荐使用 #!/usr/bin/env python 这种用法是为了防止操作系统用户没有将python装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。 4.如何通过直接输入helloWorld.py而不是./helloWorld来执行脚本？（windows用户请无视）在一般用户下输入PATH=$PATH：(注意后面的冒号)。 即可直接通过输入helloWorld.py执行脚本。但是值得注意的是，千万不要用这种方法修改超级用户（一般是root）的PATH变量。这是一个安全网面 的漏洞，因为root用户管理员可能因此执行一个某个命令的伪装版本。 5.如何使你的程序在任何位置执行？ PATH=/home/userName/test:$PATH //将/home/userName/test加入PATH （注意中间的冒号！ PATH必须大写！） sudo cp helloWorld.py /home/userName/test/helloWorld 然后输入helloWorld即可直接之行脚本 6.Python的注释 123456789#单行注释&lt;**多行注释1**&gt;&quot;&quot;&quot;多行注释2&quot;&quot;&quot;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于code-dream参赛作品给新人的一些建议]]></title>
    <url>%2F2016%2F03%2F14%2Fcode-dream%2F</url>
    <content type="text"><![CDATA[只学习过C语言也是可以做作品来参加code dream，这是面向计院全体大一新生的比赛，所以无需发怵，六队的学弟学妹也要做的66666！ 参赛作品要求本次比赛主要分为三个项目：网页设计类、程序软件类、算法设计类。各类别参赛作品具体要求如下： （1）网页设计类参赛选手自定一个站点名称，动态或静态网页不限，但演示成果要生成静态网页格式html。要有一定的代码量，不能直接套用动态网页生成程序来生成静态页面。要求主题鲜明突出，创意新颖，页面结构美观。制作软件不限制，通过合理运用网页设计的各种技术，体现良好的艺术性和实用性。页面深度必须在三层左右，以4-7个页面为宜。要求能在WinXP以上系统运行，显示分辨率800*600以上，网页采用Internet Explorer6.0以上浏览器。 例如：个人博客，宣传页面，简单网页应用（实现一定的功能，不受页面深度限制）等。 个人博客可以使用成熟的WordPress，Z-blog，hexo等博客程序构建，然后自定义其部分功能，创建新的页面，要有独创性； 宣传页面即介绍某个企业，产品，或者是其他你想让人知晓的页面，可以用Dreamwave，甚至是十几年前的frontpage(曾在小学课本里看到)，so easy； 网页应用可以使用一些网络服务接口来创建自己的应用，最好有一定实际价值。参考 html瞬间入门 （2）程序软件作品制作要求：具有一定实用价值或者娱乐价值，界面尽可能友好，使用简单，可以带有使用帮助。作品大概有这几个方面：信息管理、游戏娱乐、文体健康、学习生活等主题，内容务必积极健康向上。 例如：实用小工具，游戏，学习辅助软件等。 这是我最推荐你们去选择的题目。可以做计算器，小游戏，画图板等等。 用c配合VC是可以实现图形界面的，具体会用到MFC，这个框架我并不熟悉，可以参考网上的资料自学，也可以向我索取； 还有就是使用第三方的图形库，如文档很全的EGE,我曾用它实现过贪吃蛇； 如果你想使用python我也是十分的支持，因为python太强大了。而且pygame是可以速成的，去找本《pygame游戏编程入门》看看，一个月做出很耐玩的游戏并不是很困难； 还有一些歪门邪道的方式去做一个程序作品，我就不提了。 其实，黑框框（控制台程序）也完全没问题，重要的是内涵。 （3）算法设计类制作要求：利用算法解决已有的或与学习生活相关的复杂问题，算法具有一定的实现难度，体现出对编程语言和简单算法的掌握。要求配有算法流程图、必要的说明，能够以简单、直观的界面展示。 例如：矩阵计算，高等数学涵盖的计算，智能扫雷算法、五子棋人机对弈等。 不必多说，重在算法，对其他没什么特别的要求。 当然，你们能做的绝不局限于我说的这些，要开动脑筋，一旦有你想做的的东西，技术问题不会成为你最大的阻碍。有了C语言的基础，花上五六天去掌握一门新的编程语言也不是没有可能的。]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>科协</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法学习笔记】棋盘覆盖问题演示程序]]></title>
    <url>%2F2016%2F03%2F08%2FALG-2%2F</url>
    <content type="text"><![CDATA[引子棋盘覆盖问题采用的是分治策略。通过十字划分，将原问题转化为四个规模较小的棋盘覆盖问题。递归的使用这种分割，将问题最简化。 问题简述 在一个 2^k 2^k个方格组成的棋盘中，若恰有一个方格与其它方格不同，则称该方格为一特殊方格，称该棋盘为一特殊棋盘。显然特殊方格在棋盘上出现的位置有 4^k 种情形。因而对任何 k&gt;=0 ，有 4^k 种不同的特殊棋盘。下图所示的特殊棋盘为 k=2 时 16 个特殊棋盘中的一个。在棋盘覆盖问题中，要用下图中 4 中不同形态的 L 型骨牌覆盖一个给定的特殊棋牌上除特殊方格以外的所有方格，且任何 2 个 L 型骨牌不得重叠覆盖。易知，在任何一个 2^k 2^k 的棋盘中，用到的 L 型骨牌个数恰为 (4^k-1)/3 。 题解用分治策略，可以设计解棋盘问题的一个简捷的算法。当k&gt;0时，将2^k 2^k棋盘分割为4个2^(k-1) 2^(k-1)子棋盘，如下图所示。特殊方格必位于4个较小子棋盘之一中，其余3个子棋盘中无特殊方格。为了将这3个无特殊方格的子棋盘转化为特殊棋盘，我们可以用一个L型骨牌覆盖这3个较小的棋盘的汇合处，如下图所示，这3个子棋盘上被L型骨牌覆盖的方格就成为该棋盘上的特殊方格，从而将原问题化为4个较小规模的棋盘覆盖问题。递归的使用这种分割，直至棋盘简化为1x1棋盘。 C++ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;iostream&gt;using namespace std;int tile=1; //L型骨牌的编号(递增)int board[100][100]; //棋盘/****************************************************** 递归方式实现棋盘覆盖算法* 输入参数：* tr--当前棋盘左上角的行号* tc--当前棋盘左上角的列号* dr--当前特殊方格所在的行号* dc--当前特殊方格所在的列号* size：当前棋盘的:2^k*****************************************************/void chessBoard ( int tr, int tc, int dr, int dc, int size )&#123; if ( size==1 ) //棋盘方格大小为1,说明递归到最里层 return; int t=tile++; //每次递增1 int s=size/2; //棋盘中间的行、列号(相等的) //检查特殊方块是否在左上角子棋盘中 if ( dr&lt;tr+s &amp;&amp; dc&lt;tc+s ) //在 chessBoard ( tr, tc, dr, dc, s ); else //不在，将该子棋盘右下角的方块视为特殊方块 &#123; board[tr+s-1][tc+s-1]=t; chessBoard ( tr, tc, tr+s-1, tc+s-1, s ); &#125; //检查特殊方块是否在右上角子棋盘中 if ( dr&lt;tr+s &amp;&amp; dc&gt;=tc+s ) //在 chessBoard ( tr, tc+s, dr, dc, s ); else //不在，将该子棋盘左下角的方块视为特殊方块 &#123; board[tr+s-1][tc+s]=t; chessBoard ( tr, tc+s, tr+s-1, tc+s, s ); &#125; //检查特殊方块是否在左下角子棋盘中 if ( dr&gt;=tr+s &amp;&amp; dc&lt;tc+s ) //在 chessBoard ( tr+s, tc, dr, dc, s ); else //不在，将该子棋盘右上角的方块视为特殊方块 &#123; board[tr+s][tc+s-1]=t; chessBoard ( tr+s, tc, tr+s, tc+s-1, s ); &#125; //检查特殊方块是否在右下角子棋盘中 if ( dr&gt;=tr+s &amp;&amp; dc&gt;=tc+s ) //在 chessBoard ( tr+s, tc+s, dr, dc, s ); else //不在，将该子棋盘左上角的方块视为特殊方块 &#123; board[tr+s][tc+s]=t; chessBoard ( tr+s, tc+s, tr+s, tc+s, s ); &#125;&#125;void main()&#123; int size; cout&lt;&lt;"输入棋盘的size(2^n): "; cin&gt;&gt;size; int x,y; cout&lt;&lt;"输入特殊方格位置坐标: "; cin&gt;&gt;x&gt;&gt;y; chessBoard ( 0,0,x,y,size ); for ( int i=0; i&lt;size; i++ ) &#123; for ( int j=0; j&lt;size; j++ ) cout&lt;&lt;board[i][j]&lt;&lt;"\t"; cout&lt;&lt;endl; &#125;&#125; EGE演示程序我自己用EGE做了一个图形化演示，但效果并不理想，代码核心内容如上，就不贴代码了。如图]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用树莓派搭建你自己的Web服务器,以及一个可以外网访问的Blog]]></title>
    <url>%2F2016%2F03%2F07%2Fwebserver-powered-by-raspberrypi%2F</url>
    <content type="text"><![CDATA[先决条件很简单，树莓派或是其他开发板甚至是LinuxPC，路由器。 我使用的是一代树莓派b+，内存512M加上超频到极限的单核处理器，实在是无法与树莓派2相媲美，不得已只好选择相对轻量的环境完成这项尝试。说道Web服务器，大家也许都会想到 Apache、MySql 等等，非常常见的组合LAMP（Linux+Apache+Mysql/MariaDB+Perl/PHP/Python） ，但是考虑到树莓派的性能有一个非常合适的组合 nginx + sqlite + php对了还有php博客程序，我选择Z-blog。 首先，要搭建一个Web服务器：介绍一下 nginx 是个轻量级的高性能Web服务器，并不比Apache差，好像淘宝就广泛的使用它。sqlite 是个非常轻量级的数据库，常用于嵌入式领域，许多Android应用用的也是它。php 非常常用Web脚本语言，就不必介绍了。 不如直接切到root下工作 安装nginx web服务器 (约6MB)1sudo apt-get install nginx 启动nginx1sudo /etc/init.d/nginx start nginx的www根目录默认在 /usr/share/nginx/www中，稍后的blog程序可以放到该目录下 安装php和sqlite(约9MB)1sudo apt-get install php5-fpm php5-sqlite 修改nginx的配置文件1sudo nano /etc/nginx/sites-available/default 找到listen行，将其前面的#号注释去掉，修改后内容如下1listen 80; ## listen for ipv4. 在路由器的内网环境下80端口并不是一个好的选择，因为绝大多数路由器不会开放例如80这样的常用端口，我设置成8888，看个人爱好咯 找到index行，加入index.php，修改后内容如下1index index.php index.html index.htm 找到php的定义段，将这些行的注释去掉 ，修改后内容如下12345location ~ \.php$ &#123;fastcgi_pass unix:/var/run/php5-fpm.sock;fastcgi_index index.php;include fastcgi_params;&#125; 重新加载nginx的配置1sudo /etc/init.d/nginx reload 上面的操作很关键，是通用的步骤，但没接触过nginx的我在其中栽了好多跟头 检验一下接下来我们访问一下试试，我的树莓派静态ip地址是 192.168.1.110（一定要设置好），刚才设置了监听端口8888，浏览器访问 192.168.1.110:8888 出现Welcome to nginx! 说明我的nginx服务已经启动成功。 然后在树莓派中生成一php文件，测试一下php1sudo nano /usr/share/nginx/www/test.php 在文件中输入以下内容1&lt;? phpinfo(); ?&gt; Ctrl+X然后Yes存盘退出 再来访问一下，PHP OK 出现PHP页面 使你的树莓派能够从外网访问：你得申请一个免费的动态域名解析，由于我用的是ＦＡＳＴ的路由器，只支持花生壳，所以我申请了花生壳的动态域名解析。申请花生壳很简单，打开 http://www.oray.com ,点击顶部的“注册”，申请一个花生壳域名。 有很多二级域名可以选择 i ok la是不是很好记 进入路由器，配置你的花生壳动态域名账号，别忘了DDNS，否则登不上，点击登录，保存 大部分国产路由器都支持花生壳，记得Tenda不支持 接下来需要配置端口了。先要确定你的树莓派在局域网内的IP，给它一个静态的IP：192.168.1.110然后添加端口转发，到192.168.1.110，刚才的8888端口保证她是生效的，也可以继续添加一些其他端口便于管理。 22,443端口都可以开启 现在可以试着用外网访问一下 你的花生壳域名，别忘了加上“:”+端口号。 到这里基本上已经大功告成，只消几分钟你的blog就可以运作起来了。 Blog程序安装:选用同样轻量的Z-blog，完美支持我们前面搭建的平台；如果使用WordPress未尝不可，但是它不完全支持sqlite，可以参考（http://www.tuicool.com/articles/fuiyQb ）。 简单说过一下吧！太困了 进/usr/share/nginx/www/下，1wget https://github.com/zblogcn/Release/raw/master/zip/Z-BlogPHP_1_4_Deeplue_150101.zip 解压通过浏览器访问Release下的index.php或者install.php进入安装步骤，后面就一路点下去,后台出现 大功告成 我的主页 http://bwael.iok.la:8888/ 近期会一直开放 原文是有图的 : 原文]]></content>
      <categories>
        <category>折腾笔记</category>
      </categories>
      <tags>
        <tag>折腾笔记</tag>
        <tag>Linux</tag>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法学习笔记】NP完全性理论，让我看晕了/递归策略的排列问题]]></title>
    <url>%2F2016%2F03%2F07%2FALG-1%2F</url>
    <content type="text"><![CDATA[引子开学第一周，初识算法课，当头一棒，老师NP 问题云云，遂寻书溯源，不得解。 突然发现《计算机算法设计与分析》这本书真是过分啊，整一册习题集，不只是哪位老师运用腾挪大法著成此书，怕了怕了。去借学神的《算法导论》一睹NP真容。 ……欢迎批评指正 NP我们以前接触的算法基本上都是多项式时间算法：对于规模为n的输入，在最坏的情况下的运行时间是O(n^k)，其中k为某一确定常数。 但实际上有一些问题不能在多项式时间内解决；另外，还有许多可以在多项式时间内解决的问题，但对任意常数k，它们都不能在O(n^k)时间内被解决。 上面所提的后者在我的理解中就是NP问题。可以这样想想：对于下一步的动作，他们也不知道确切的应该怎么办，只能“尝试”很多种方案才能够得出一个答案，这显然是很费时的。 至于NPC问题，可以这么认为，这种问题只有把解域里面的所有可能都穷举了之后才能得出答案，这样的问题是NP里面最难的问题，这种问题就是NPC问题。 …… 总之，当我们试着去说明一个问题为NP完全问题时，我们是在陈述它是一个多么困难的问题，并不是去证明它存在某个有效算法，而是去证明不太可能存在有效的算法去解决问题。 NP问题的存在，应该就是提醒我们对待复杂的问题，更好的办法是花时间开发一种近似算法或解决某种已处理问题的特例，而不是寻找求得问题确切解的一种快速算法。 递归策略 直接的或间接的调用自身的算法称为递归算法。 递归的使用在我的印象中最深刻的是初学时完成的求n的阶乘 程序： 12345int factorial (int n)&#123; if(n==1) return 1; return n*factorial(n-1)&#125; 未完待续]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android命名规范]]></title>
    <url>%2F2016%2F02%2F14%2Fandroid-naming-conventions%2F</url>
    <content type="text"><![CDATA[Java类文件: activity:以activity作为后缀.例如:PersonActivity; adapter:以adapter作为后缀.例如:PersonAdapter; database:以db作为后缀.例如:PersonDB; Entity:以entity作为后缀.例如:PersonEntity; so on 资源文件:layout目录下: 页面布局文件:以act_ 为前缀,模块package为中缀,去掉activity后为后缀.例如:Person模块的AddCustomActivity的布局文件命名为:act_person_addcustom.xml ListView中的Item布局文件.以item_ 为前缀,列表项的名称为后缀.控件名称为:lvUserList,Item的布局文件命名为:item_lvUserList.xml Dialog布局文件.dlg_ 为固定前缀,Dialog的功能名称为后缀.例如:dlg_hint.xml drawable目录文件下: 一个页面共用,用页面前缀; 一个模块共用,用模块前缀; 全局使用:common java类中控件对象:控件类型缩写+控件的逻辑名称:例如:btnLogin; layout中控件对象:建议和activity中相对应的控件名称保持一致.例如:R.id.btnLogin; strings.xml中常量:所在activity名称 + 控件名称 + 功能/描述,例如:loginActivity_btnLogin_text;拆分Strings.xml:strings_ + 模块名称,例如: strings_module_a.xml; 常量名称:只能包含之母和下划线,字母全部大写并用链接; Androidb编码规范 Activity中的onCreate:是设计模式中单一职责原则的体现. initVariables():初始化变量.initView():初始化控件 loadData():初始化数据 坚持使用fastJSON自定义实体来作为MobileAPI的数据载体. 页面之间传值,坚持使用Intent携带序列化实体数据的方.禁止为了省事使用全局变量进行传值. 为控件添加事件,初始化下面就直接添加事件. activity中不能使用嵌套的内部类 Adapter规范: 统一放在adapter这个包中. adapter绑定数据,一律为ArrayList; adapter创建适合于自身列表的ViewHolder实体类,统一命名为ViewHolder. 不同模块的实体类不能共享. 为节省内存,请使用ArrayList,而不是HashMap -图片的处理,统一使用ImageLoader/fresco SharedPreferences保存简单配置信息,对于复杂的对象,还是要存储到本地文件中数据类型转换一定要进行校验.失败要有默认值,使用try-catch保护,避免空指针使用常量来代替枚举类型]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
